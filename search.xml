<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux-deepin自带VPN配置(L2TP/IpSec)</title>
      <link href="/2019/11/22/linux-deepin-l2tp-config/"/>
      <url>/2019/11/22/linux-deepin-l2tp-config/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="http://zhouhy.top/2018/02/18/win10-use-ca-L2TP-OR-IPSEC-vpn-config/">WIN10 篇跳转链接</a></p><p>最近开始使用Linux-Deepin系统了，所以WIN10上的VPN也需要移到LINUX下面，然后搜索了一下，看网上都是让安装各种东西。所以自己试下，发现可以不用安装任何东西的配置方法。</p><p>例如网上教程：<br><img src="/2019/11/22/linux-deepin-l2tp-config/1.png" alt=""></p><h2 id="第一步（最后一步）"><a href="#第一步（最后一步）" class="headerlink" title="第一步（最后一步）"></a>第一步（最后一步）</h2><p>Deepin中提供了多种VPN的配置方法，这里就只举例说一种。<br><img src="/2019/11/22/linux-deepin-l2tp-config/0.png" alt=""></p><p>控制中心 <code>-&gt;</code> 网络<code>-&gt;</code>  VPN <code>-&gt;</code> 创建<code>-&gt;</code>  L2TP</p><p><img src="/2019/11/22/linux-deepin-l2tp-config/2.png" alt=""></p><h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><p>Deepin中VPN的配置还可以导出，方便二次配置<br><img src="/2019/11/22/linux-deepin-l2tp-config/3.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> VPN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> deepin </tag>
            
            <tag> vpn </tag>
            
            <tag> l2tp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智能(四)：TensorFlow基本操作</title>
      <link href="/2019/08/28/AI4-for-Tensorflow-base-operation/"/>
      <url>/2019/08/28/AI4-for-Tensorflow-base-operation/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
            <tag> Tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智能(三)：TensorFlow的介绍与安装</title>
      <link href="/2019/08/27/AI3-for-Tensorflow-of-introduce-and-install/"/>
      <url>/2019/08/27/AI3-for-Tensorflow-of-introduce-and-install/</url>
      
        <content type="html"><![CDATA[<h2 id="Tensorflow-的介绍"><a href="#Tensorflow-的介绍" class="headerlink" title="Tensorflow 的介绍"></a>Tensorflow 的介绍</h2><p>Tensorflow是一个基于数据流编程（dataflow programming）的符号数学系统，被广泛应用于各类机器学习（machine learning）算法的编程实现，其前身是谷歌的神经网络算法库DistBelief [1]  。</p><p>Tensorflow是目前最火的深度学习框架，广泛应用于自然语言处理、语音识别、图像处理等多个领域。不仅深受全球深度学习爱好者的广泛欢迎，Google、eBay、Uber、OPenAI等众多科技公司的研发团队也都在使用它。</p><p>Tensorflow是由谷歌大脑团队于2015年11月开发的第二代开源的机器学习系统。Tensorflow支持python、C++、java、GO等多种编程语言，以及CNN、RNN和GAN等深度学习算法。Tensorflow除可以在Windows、Linux、MacOS等操作系统运行外，还支持Android和iOS移动平台的运行、树莓派等开发板中、以及适用于多个CPU/GPU组成的分布式系统中。</p><p>相较于其它的深度学习框架，如：Caffe、Torch、Keras、MXnet、Theano等，Tensorflow的主要优势有以下几点：高度的灵活性、支持python语言开发、可视化效果好、功能更加强大、运行效率高、强大的社区。</p><h2 id="Tensorflow安装与配置"><a href="#Tensorflow安装与配置" class="headerlink" title="Tensorflow安装与配置"></a>Tensorflow安装与配置</h2><p>目前，Windows、Linux和MacOS均已支持Tensorflow。文章将以Windows系统的安装为例。</p><p>在安装Tensorflow前，我们要先安装Anaconda，因为它集成了很多Python的第三方库及其依赖项，方便我们在编程中直接调用。</p><p>Anaconda下载地址为：<a href="https://www.anaconda.com/download/。" target="_blank" rel="noopener">https://www.anaconda.com/download/。</a></p><p>下载好安装包后，一步步next执行安装过程。</p><p>安装好Anaconda后，可以打开命令提示符，输入<code>pip install Tensorflow</code>完成Tensorflow的安装。<br>此处默认安装为cpu版，如果需要安装gpu版 需要执行<code>pip install Tensorflow-gpu</code>，<strong>注意 gpu版安装后需要安装对应gpu版本的驱动才能使用gpu进行训练</strong>。<br>之后我们进入python可执行界面，输入<code>import tensorflow as tf</code>来检验Tensorflow是否安装成功。如果没有报任何错，可以正常执行，则说明Tensorflow已经安装成功。</p><h3 id="HOME"><a href="#HOME" class="headerlink" title="HOME"></a>HOME</h3><p><img src="/2019/08/27/AI3-for-Tensorflow-of-introduce-and-install/anaconda.png" alt=""><br>home中包含了一些已经默认安装好的工具和一些推荐使用的工具可以一键安装。<br><strong>Jupyter Notebook</strong>是一款非常好用的交互式开发工具，不仅支持40多种编程语言，还可以实时运行代码、共享文档、数据可视化、支持markdown等，适用于机器学习、统计建模数据处理、特征提取等多个领域。尤其在Kaggle、天池等数据科学竞赛中，快捷、实时、方便的优点深受用户欢迎。本书后边的章节中，均将以Jupyter Notebook作为开发环境，运行Tensorflow程序。</p><h3 id="Environments"><a href="#Environments" class="headerlink" title="Environments"></a>Environments</h3><p><img src="/2019/08/27/AI3-for-Tensorflow-of-introduce-and-install/environments.png" alt=""><br>环境中包含了已经安装的、未安装的、需要更新的、所有的环境。例如Tensorflow。</p><p>其他的就不多做介绍，都是一看就懂的东西，复杂点的可以在使用过程中慢慢摸索。到这Tensorflow就安装完成了。</p><h2 id="计算图模型"><a href="#计算图模型" class="headerlink" title="计算图模型"></a>计算图模型</h2><h3 id="Tensor"><a href="#Tensor" class="headerlink" title="Tensor"></a>Tensor</h3><p><img src="/2019/08/27/AI3-for-Tensorflow-of-introduce-and-install/intro_tensorflow_01.png" alt=""><br><strong>Tensor</strong> :张量 ，在数学上，张量是N维向量，这意味着张量可以用来表示N维数据集。上面的图有点复杂，难以理解。我们看看它的简化版本：<br><img src="/2019/08/27/AI3-for-Tensorflow-of-introduce-and-install/intro_tensorflow_02.png" alt=""><br>上图显示了一些简化的张量。随着维度的不断增加，数据表示将变得越来越复杂。例如，一个3x3的张量，我可以简单地称它为3行和3列的矩阵。如果我选择另一个形式的张量（1000x3x3），我可以称之为一个向量或一组1000个3x3的矩阵。在这里我们将（1000x3x3）称为张量的形状或尺寸。张量可以是常数也可以是变量。</p><h3 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h3><p><strong>Flow</strong>:计算图，流。流是指一个计算图或简单的一个图，图不能形成环路，图中的每个节点代表一个操作，如加法、减法等。每个操作都会导致新的张量形成。<br><img src="/2019/08/27/AI3-for-Tensorflow-of-introduce-and-install/intro_tensorflow_03.png" alt=""></p><p>上图展示了一个简单的计算图，所对应的表达式为：</p><pre><code>e = (a+b)x(b+1)</code></pre><p>计算图具有以下属性：</p><ul><li>叶子顶点或起始顶点始终是张量。意即，操作永远不会发生在图的开头，由此我们可以推断图中的每个操作都应该接受一个张量并产生一个新的张量。同样，张量不能作为非叶子节点出现，这意味着它们应始终作为输入提供给操作/节点。</li><li><p>计算图总是以层次顺序表达复杂的操作。通过将a + b表示为c，将b + 1表示为d，可以分层次组织上述表达式。 因此，我们可以将e写为：</p><p> <code>e = c*d   ##这里 c = a+b 且 d = b+1.</code></p></li><li><p>以反序遍历图形而形成子表达式，这些子表达式组合起来形成最终表达式。</p></li><li><p>当我们正向遍历时，遇到的顶点总是成为下一个顶点的依赖关系，例如没有a和b就无法获得c，同样的，如果不解决c和d则无法获得e。</p></li><li><p><strong>同级节点的操作彼此独立，这是计算图的重要属性之一</strong>。当我们按照图中所示的方式构造一个图时，很自然的是，在同一级中的节点，例如c和d，彼此独立，这意味着没有必要在计算d之前计算c。<br>因此它们可以并行执行。</p></li></ul><h3 id="计算图模型-1"><a href="#计算图模型-1" class="headerlink" title="计算图模型"></a>计算图模型</h3><p>Tensorflow是一种计算图模型，即用图的形式来表示运算过程的一种模型。Tensorflow程序一般分为图的构建和图的执行两个阶段。图的构建阶段也称为图的定义阶段，该过程会在图模型中定义所需的运算，每次运算的的结果以及原始的输入数据都可称为一个节点（operation ，缩写为op）。我们通过以下程序来说明图的构建过程：<br>程序1：<br><img src="/2019/08/27/AI3-for-Tensorflow-of-introduce-and-install/c1.png" alt=""></p><p>程序1定义了图的构建过程，“import tensorflow as tf”，是在python中导入tensorflow模块,并另起名为“tf”；接着定义了两个常量op，m1和m2，均为1*2的矩阵；最后将m1和m2的值作为输入创建一个矩阵加法op，并输出最后的结果result。</p><p><strong>Add_1:0</strong>:图的名字。<br><strong>shape(2,)</strong>:相当于shape(2,1),代表图的形状2列一行。<br><strong>dtype=int32</strong>:图的类型，int32。</p><p>我们分析最终的输出结果可知，其并没有输出矩阵相加的结果，而是输出了一个包含三个属性的Tensor。</p><p>以上过程便是图模型的<strong>构建阶段</strong>：<strong>只在图中定义所需要的运算，而没有去执行运算。</strong>我们可以用下图来表示：<br><img src="/2019/08/27/AI3-for-Tensorflow-of-introduce-and-install/c1.png" alt=""></p><p>第二个阶段为图的执行阶段，也就是在会话（session）中执行图模型中定义好的运算。<br>我们通过程序2来解释图的执行阶段：</p><p>程序2：<br><img src="/2019/08/27/AI3-for-Tensorflow-of-introduce-and-install/c2.png" alt=""></p><p>程序2描述了图的执行过程，首先通过“tf.session()”启动默认图模型，再调用run()方法启动、运行图模型，传入上述参数result，执行矩阵的加法，并打印出相加的结果，最后在任务完成时，要记得调用close()方法，关闭会话。</p><p>除了上述的session写法外，我们更建议大家，把session写成如程序3所示“with”代码块的形式，这样就无需显示的调用close释放资源，而是自动地关闭会话。</p><p>程序3：<br><img src="/2019/08/27/AI3-for-Tensorflow-of-introduce-and-install/c3.png" alt=""></p><p>此外，我们还可以利用CPU或GPU等计算资源分布式执行图的运算过程。一般我们无需显示的指定计算资源，Tensorflow可以自动地进行识别，如果检测到我们的GPU环境，会优先的利用GPU环境执行我们的程序。但如果我们的计算机中有多于一个可用的GPU，这就需要我们手动的指派GPU去执行特定的op。如下程序4所示，Tensorflow中使用<code>with...device</code>语句来指定GPU或CPU资源执行操作。</p><p>程序4：<br><img src="/2019/08/27/AI3-for-Tensorflow-of-introduce-and-install/c4.png" alt=""></p><p>上述程序中的“<code>tf.device(“/gpu:2”)</code>”是指定了第二个GPU资源来运行下面的op。依次类推，我们还可以通过“/gpu:3”、“/gpu:4”、“/gpu:5”…来指定第N个GPU执行操作。</p><p>Tensorflow中还提供了默认会话的机制，如程序5所示，我们通过调用函数<code>as_default()</code>生成默认会话。</p><p>程序5：<br><img src="/2019/08/27/AI3-for-Tensorflow-of-introduce-and-install/c5.png" alt=""></p><p>我们可以看到程序5和程序2有相同的输出结果。我们在启动默认会话后，可以通过调用<code>eval()</code>函数，直接输出变量的内容。</p><p>有时，我们需要在Jupyter或IPython等python交互式环境开发。Tensorflow为了满足用户的这一需求，提供了一种专门针对交互式环境开发的方法<code>InteractiveSession()</code>,具体用法如程序6所示：</p><p>程序6：<br><img src="/2019/08/27/AI3-for-Tensorflow-of-introduce-and-install/c6.png" alt=""></p><p>程序6就是交互式环境中经常会使用的<code>InteractiveSession()</code>方法，其创建<code>sess</code>对象后，可以直接输出运算结果。</p><p>综上所述，我们介绍了Tensorflow的核心概念——计算图模型，以及定义图模型和运行图模型的几种方式。接下来，思考一个问题，为什么Tensorflow要使用图模型？图模型有什么优势呢？</p><p>首先，图模型的最大好处是节约系统开销，提高资源的利用率，可以更加高效的进行运算。因为我们在图的执行阶段，只需要运行我们需要的op,这样就大大的<strong>提高了资源的利用率</strong>；其次，这种结构有利于我们提取中间某些节点的结果，方便以后利用中间的节点去进行其它运算；还有就是这种结构对分布式运算更加友好，运算的过程可以分配给多个CPU或是GPU同时进行，提高运算效率；最后，因为图模型把运算分解成了很多个子环节，所以这种结构也让我们的求导变得更加方便。</p>]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
            <tag> Tensorflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智能(一)：深度学习发展史</title>
      <link href="/2019/08/27/AI2-for-Development-History-of-DL/"/>
      <url>/2019/08/27/AI2-for-Development-History-of-DL/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为机器学习最重要的一个分支，深度学习近年来发展迅猛，在国内外都引起了广泛的关注。然而深度学习的火热也不是一时兴起的，而是经历了一段漫长的发展史。本文主要讲深度学习发展过程中几个重要的时刻。</p><h2 id="起源阶段"><a href="#起源阶段" class="headerlink" title="起源阶段"></a>起源阶段</h2><blockquote><p>1943年，心里学家麦卡洛克和数学逻辑学家皮兹发表论文《神经活动中内在思想的逻辑演算》，提出了MP模型。MP模型是模仿神经元的结构和工作原理，构成出的一个基于神经网络的数学模型，本质上是一种“模拟人类大脑”的神经元模型。MP模型作为人工神经网络的起源，开创了人工神经网络的新时代，也奠定了神经网络模型的基础。</p></blockquote><blockquote><p>1949年，加拿大著名心理学家唐纳德·赫布在《行为的组织》中提出了一种基于无监督学习的规则——海布学习规则(Hebb<br>Rule)。海布规则模仿人类认知世界的过程建立一种“网络模型”，该网络模型针对训练集进行大量的训练并提取训练集的统计特征，然后按照样本的相似程度进行分类，把相互之间联系密切的样本分为一类，这样就把样本分成了若干类。海布学习规则与“条件反射”机理一致，为以后的神经网络学习算法奠定了基础，具有重大的历史意义。</p></blockquote><blockquote><p>20世纪50年代末，在MP模型和海布学习规则的研究基础上，美国科学家罗森布拉特发现了一种类似于人类学习过程的学习算法——感知机学习。并于1958年，正式提出了由两层神经元组成的神经网络，称之为“感知器”。感知器本质上是一种线性模型，可以对输入的训练集数据进行二分类，且能够在训练集中自动更新权值。感知器的提出吸引了大量科学家对人工神经网络研究的兴趣，对神经网络的发展具有里程碑式的意义。</p><p>但随着研究的深入，在1969年，“AI之父”马文·明斯基和LOGO语言的创始人西蒙·派珀特共同编写了一本书籍《感知器》，在书中他们证明了单层感知器无法解决线性不可分问题（例如：异或问题）。由于这个致命的缺陷以及没有及时推广感知器到多层神经网络中，在20世纪70年代，人工神经网络进入了第一个寒冬期，人们对神经网络的研究也停滞了将近20年。</p></blockquote><h2 id="发展阶段"><a href="#发展阶段" class="headerlink" title="发展阶段"></a>发展阶段</h2><blockquote><p>1982年，著名物理学家约翰·霍普菲尔德发明了Hopfield神经网络。Hopfield神经网络是一种结合存储系统和二元系统的循环神经网络。Hopfield网络也可以模拟人类的记忆，根据激活函数的选取不同，有连续型和离散型两种类型，分别用于优化计算和联想记忆。但由于容易陷入局部最小值的缺陷，该算法并未在当时引起很大的轰动。</p></blockquote><blockquote><p>直到1986年，深度学习之父杰弗里·辛顿提出了一种适用于多层感知器的反向传播算法——BP算法。BP算法在传统神经网络正向传播的基础上，增加了误差的反向传播过程。反向传播过程不断地调整神经元之间的权值和阈值，直到输出的误差达到减小到允许的范围之内，或达到预先设定的训练次数为止。BP算法完美的解决了非线性分类问题，让人工神经网络再次的引起了人们广泛的关注。</p><p>但是由于八十年代计算机的硬件水平有限，如：运算能力跟不上，这就导致当神经网络的规模增大时，再使用BP算法会出现“梯度消失”的问题。这使得BP算法的发展受到了很大的限制。再加上90年代中期，以SVM为代表的其它浅层机器学习算法被提出，并在分类、回归问题上均取得了很好的效果，其原理又明显不同于神经网络模型，所以人工神经网络的发展再次进入了瓶颈期。</p></blockquote><h2 id="爆发阶段"><a href="#爆发阶段" class="headerlink" title="爆发阶段"></a>爆发阶段</h2><blockquote><p>2006年，杰弗里·辛顿以及他的学生鲁斯兰·萨拉赫丁诺夫正式提出了深度学习的概念。他们在世界顶级学术期刊《科学》发表的一篇文章中详细的给出了“梯度消失”问题的解决方案——通过无监督的学习方法逐层训练算法，再使用有监督的反向传播算法进行调优。该深度学习方法的提出，立即在学术圈引起了巨大的反响，以斯坦福大学、多伦多大学为代表的众多世界知名高校纷纷投入巨大的人力、财力进行深度学习领域的相关研究。而后又在迅速蔓延到工业界中。</p></blockquote><blockquote><p>2012年，在著名的ImageNet图像识别大赛中，杰弗里·辛顿领导的小组采用深度学习模型AlexNet一举夺冠。AlexNet采用ReLU激活函数，从根本上解决了梯度消失问题，并采用GPU极大的提高了模型的运算速度。同年，由斯坦福大学著名的吴恩达教授和世界顶尖计算机专家Jeff Dean共同主导的深度神经网络——DNN技术在图像识别领域取得了惊人的成绩，在ImageNet评测中成功的把错误率从26％降低到了15％。深度学习算法在世界大赛的脱颖而出，也再一次吸引了学术界和工业界对于深度学习领域的关注。</p><p>随着深度学习技术的不断进步以及数据处理能力的不断提升，2014年，Facebook基于深度学习技术的DeepFace项目，在人脸识别方面的准确率已经能达到97%以上，跟人类识别的准确率几乎没有差别。这样的结果也再一次证明了深度学习算法在图像识别方面的一骑绝尘。</p></blockquote><blockquote><p>2016年，随着谷歌公司基于深度学习开发的AlphaGo以4:1的比分战胜了国际顶尖围棋高手李世石，深度学习的热度一时无两。后来，AlphaGo又接连和众多世界级围棋高手过招，均取得了完胜。这也证明了在围棋界，基于深度学习技术的机器人已经超越了人类。</p></blockquote><blockquote><p>2017年，基于强化学习算法的AlphaGo升级版AlphaGo<br>Zero横空出世。其采用“从零开始”、“无师自通”的学习模式，以100:0的比分轻而易举打败了之前的AlphaGo。除了围棋，它还精通国际象棋等其它棋类游戏，可以说是真正的棋类“天才”。此外在这一年，深度学习的相关算法在医疗、金融、艺术、无人驾驶等多个领域均取得了显著的成果。所以，也有专家把2017年看作是深度学习甚至是人工智能发展最为突飞猛进的一年。</p></blockquote><p><strong>未来已来,将至已至。</strong> 在深度学习的浪潮之下，不管是AI的相关从业者还是我们IT行业的工作者，都应该以开放、学习的心态关注深度学习、人工智能的热点动态。</p>]]></content>
      
      
      <categories>
          
          <category> DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智能(一)：人工智能、机器学习、深度学习的关系</title>
      <link href="/2019/08/27/AI1-for-AI-and-ML-and-DL/"/>
      <url>/2019/08/27/AI1-for-AI-and-ML-and-DL/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2016年，谷歌阿尔法围棋以4:1战胜围棋世界冠军、职业九段棋手李世石，不仅让深度学习为人们所知，而且掀起了人工智能的“大众热”。此后，人工智能越来越热，从机器人开发、语音识别、图像识别、自然语言处理到专家系统等不断推陈出新。同时，人工智能技术越来越多地融入到我们的生活中，出现了智能音箱、智能助理、智能机器人等。</p><p>根据应用领域的不同，人工智能研究的技术也不尽相同，目前以机器学习、计算机视觉等成为热门的AI技术方向。但是，平常接触中，很多人分不清人工智能（AI）、机器学习（ML）、深度学习（DL）的关系。</p><h2 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h2><p>人工智能(Artificial Intelligence)，英文缩写为AI。它是研究、开发用于模拟、延伸和扩展人的智能的理论、方法、技术及应用系统的一门新的技术科学。</p><p>人工智能是计算机科学的一个分支，它企图了解智能的实质，并生产出一种新的能以人类智能相似的方式做出反应的智能机器，该领域的研究包括语音识别、图像识别、机器人、自然语言处理、智能搜索和专家系统等。</p><p>人工智能可以对人的意识、思维的信息过程的模拟。人工智能不是人的智能，但能像人那样思考、也有可能超过人的智能。</p><h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><p>机器学习(Machine Learning)是指用某些算法指导计算机利用已知数据得出适当的模型，并利用此模型对新的情境给出判断的过程。</p><p>机器学习的思想并不复杂，它仅仅是对人类生活中学习过程的一个模拟。而在这整个过程中，最关键的是数据。</p><p>任何通过数据训练的学习算法的相关研究都属于机器学习，包括很多已经发展多年的技术，比如线性回归(Linear Regression)、K均值(K-means，基于原型的目标函数聚类方法)、决策树(Decision Trees，运用概率分析的一种图解法)、随机森林(Random Forest，运用概率分析的一种图解法)、PCA(Principal Component Analysis，主成分分析)、SVM(Support Vector Machine，支持向量机)以及ANN(Artificial Neural Networks，人工神经网络)。</p><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><p>深度学习(Deep Learning)的概念源于人工神经网络的研究。含多隐层的多层感知器就是一种深度学习结构。深度学习通过组合低层特征形成更加抽象的高层表示属性类别或特征，以发现数据的分布式特征表示。</p><p>深度学习是机器学习研究中的一个新的领域，其动机在于建立、模拟人脑进行分析学习的神经网络，它模仿人脑的机制来解释数据，例如图像，声音和文本。</p><h2 id="人工智能与机器学习、深度学习的关系"><a href="#人工智能与机器学习、深度学习的关系" class="headerlink" title="人工智能与机器学习、深度学习的关系"></a>人工智能与机器学习、深度学习的关系</h2><p>严格意义上说，人工智能和机器学习没有直接关系，只不过目前机器学习的方法被大量的应用于解决人工智能的问题而已。目前机器学习是人工智能的一种实现方式，也是最重要的实现方式。</p><p>早期的机器学习实际上是属于统计学，而非计算机科学的;而二十世纪九十年代之前的经典人工智能跟机器学习也没有关系。所以今天的AI和ML有很大的重叠，但并没有严格的从属关系。</p><p><strong>不过如果仅就计算机系内部来说，ML是属于AI的。AI今天已经变成了一个很泛泛的学科了。</strong></p><p>深度学习是机器学习现在比较火的一个方向，其本身是神经网络算法的衍生，在图像、语音等富媒体的分类和识别上取得了非常好的效果。</p><p>如果把深度学习当成人工智能的一个子学科来看，三者关系如下图所示：<br><img src="/2019/08/27/AI1-for-AI-and-ML-and-DL/aimldl.jpeg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI，ML，DL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派(一)：无外设情况下配置WIFI和SSH</title>
      <link href="/2019/05/28/raspberry-pi1-for-No-Display-Config-WIFI-And-SSH/"/>
      <url>/2019/05/28/raspberry-pi1-for-No-Display-Config-WIFI-And-SSH/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近恰好树莓派发布了4B版本，相对于3B+版本性能提升3倍有余，又配备千兆网卡，并且在内存上提供1G、2G、4G选择，所以无聊入手了一个来玩玩（树莓派不是性价比最高的开发板，但是它的社区资料非常完善）。但是手上又没有显示器和多余的键鼠，想要远程树莓派就比较麻烦了。后来发现树莓派官方 Raspbian 系统久加入了允许在开机前对 WiFi 网络进行配置的机制。</p><p><strong>注意，这个方法仅适用于全新安装树莓派系统到 SD 卡之后没有做过任何 Wi-Fi 配置的情况下有效。如果你之前配置过 Wi-Fi，再用本方法系统会默认使用已有的配置而忽略这里的配置。因此建议使用前重新安装系统。</strong></p><h2 id="WiFi-网络配置"><a href="#WiFi-网络配置" class="headerlink" title="WiFi 网络配置"></a>WiFi 网络配置</h2><p>用户可以在未启动树莓派的状态下单独修改 <strong>/boot/wpa_supplicant.conf</strong> 文件配置 WiFi 的 SSID 和密码，这样树莓派启动后会自行读取 <strong>wpa_supplicant.conf</strong> 配置文件连接 WiFi 设备。</p><p>操作方法简单：将刷好 Raspbian 系统的 SD 卡用电脑读取。在 boot 分区，也就是树莓派的 <strong>/boot</strong> 目录下新建 <strong>wpa_supplicant.conf</strong> 文件，按照下面的参考格式填入内容并保存 <strong>wpa_supplicant.conf</strong> 文件。</p><pre><code>country=CNctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdevupdate_config=1network={ssid=&quot;WiFi-A&quot;psk=&quot;12345678&quot;key_mgmt=WPA-PSKpriority=1}network={ssid=&quot;WiFi-B&quot;psk=&quot;12345678&quot;key_mgmt=WPA-PSKpriority=2scan_ssid=1}</code></pre><p>说明以及不同安全性的 WiFi 配置示例：<br>**#ssid:网络的ssid</p><p>#psk:密码</p><p>#priority:连接优先级，数字越大优先级越高（不可以是负数）</p><p>#scan_ssid:连接隐藏WiFi时需要指定该值为1**</p><p>如果你的 WiFi 没有密码</p><pre><code>network={ssid=&quot;你的无线网络名称（ssid）&quot;key_mgmt=NONE}</code></pre><p>如果你的 WiFi 使用WEP加密</p><pre><code>network={ssid=&quot;你的无线网络名称（ssid）&quot;key_mgmt=NONEwep_key0=&quot;你的wifi密码&quot;}</code></pre><p>如果你的 WiFi 使用WPA/WPA2加密</p><pre><code>network={ssid=&quot;你的无线网络名称（ssid）&quot;key_mgmt=WPA-PSKpsk=&quot;你的wifi密码&quot;}</code></pre><p>如果你不清楚 WiFi 的加密模式，可以在安卓手机上用 root explorer 打开 <code>/data/misc/wifi/wpa/wpa_supplicant.conf</code>，查看 WiFi 的信息。</p><h2 id="开启-SSH-服务"><a href="#开启-SSH-服务" class="headerlink" title="开启 SSH 服务"></a>开启 SSH 服务</h2><p>如果通过 ssh 连接树莓派出现 Access denied 这个提示则说明 ssh 服务没有开启。要手动开启的话，和 WiFi 配置相似，同样在 boot 分区新建一个文件，空白的即可，文件命名为 ssh。注意要小写且不要有任何扩展名。<br>树莓派在启动之后会在检测到这个文件之后自动启用 ssh 服务。随后即可通过登录路由器找到树莓派的 IP 地址，通过 ssh 连接到树莓派了。（有关开启 SSH 服务的详细方法）</p><p>如果需要远程桌面方式操作树莓派，可以通过 ssh 安装 xrdp，再用 Windows 的远程桌面客户端连接到树莓派。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.raspberrypi.org/" target="_blank" rel="noopener">树莓派官网</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Raspberry Pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入了解HTTP Session与中间人攻击</title>
      <link href="/2019/05/14/deepen-understanding-HTTP-session-and-MITM/"/>
      <url>/2019/05/14/deepen-understanding-HTTP-session-and-MITM/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇写到了Session丢失的问题，用户登录之后服务器存储用户信息在session中，然后给客户端或者浏览器返回一个sessionid,那么如果我连接了公共的wifi，被其他人抓包之后获取了http header中的sessionid，是不是就可以以用户的身份随意做一些权限操作呢？</p><p>答案是肯定的。只需要在headers中设置了你拿到的sessionid即可。</p><pre><code>//tomcat生成的sessionid叫做jsessionid。cookie=JSESSIONID=AC56B19FACB51BAE7843597AA9A53971</code></pre><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><h3 id="session的初衷"><a href="#session的初衷" class="headerlink" title="session的初衷"></a>session的初衷</h3><p>session在web开发中是一个非常重要的概念，这个概念很抽象，很难定义，也是最让人迷惑的一个名词，也是最多被滥用的名字之一，在不同的场合，session一次的含义也很不相同。这里只探讨HTTP Session。</p><p>session的初衷是解决http协议无状态问题的服务端解决方案，它能让客户端和服务端一系列交互动作变成一个完整的事务，能使网站变成一个真正意义上的软件。</p><p>讲到这里就说一点题外话，在web应用开发里就出现了保持http链接状态的技术：一个是cookie技术，另一种是session技术。</p><blockquote><p>cookie技术是客户端的解决方案（当然随着html5的出现，比cookie更为强劲和安全的技术出现了，但是鉴于html5的普及度不够，就不做本文讨论的内容了），Cookie就是由服务器发给客户端的特殊信息，而这些信息以文本文件的方式存放在客户端，然后客户端每次向服务器发送请求的时候都会带上这些特殊的信息。让我们说得更具体一些：当用户使用浏览器访问一个支持Cookie的网站的时候，用户会提供包括用户名在内的个人信息并且提交至服务器；接着，服务器在向客户端回传相应的超文本的同时也会发回这些个人信息，当然这些信息并不是存放在HTTP响应体（Response &gt; Body）中的，而是存放于HTTP响应头（Response &gt; Header）；当客户端浏览器接收到来自服务器的响应之后，浏览器会将这些信息存放在一个统一的位置，对于Windows操作系统而言，我们可以从： [系统盘]:\Documents and &gt; Settings[用户名]\Cookies目录中找到存储的Cookie；自此，客户端再向服务器发送请求的时候，都会把相应的Cookie再次发回至服务器。而这次，Cookie信息则存放在HTTP请求头（Request &gt; Header）了。有了Cookie这样的技术实现，服务器在接收到来自客户端浏览器的请求之后，就能够通过分析存放于请求头的Cookie得到客户端特有的信息，从而动态生成与该客户端相对应的内容。通常，我们可以从很多网站的登录界面中看到“请记住我”这样的选项，如果你勾选了它之后再登录，那么在下一次访问该网站的时候就不需要进行重复而繁琐的登录动作了，而这个功能就是通过Cookie实现的。</p><p>session技术则是服务端的解决方案，它是通过服务器来保持状态的。由于Session这个词汇包含的语义很多，因此需要在这里明确一下Session的含义。首先，我们通常都会把Session翻译成会话，因此我们可以把客户端浏览器与服务器之间一系列交互的动作称为一个 Session。从这个语义出发，我们会提到Session持续的时间，会提到在Session过程中进行了什么操作等等；其次，Session指的是服务器端为客户端所开辟的存储空间，在其中保存的信息就是用于保持状态。从这个语义出发，我们则会提到往Session中存放什么内容，如何根据键值从 Session中获取匹配的内容等。要使用Session，第一步当然是创建Session了。那么Session在何时创建呢？当然还是在服务器端程序运行的过程中创建的，不同语言实现的应用程序有不同创建Session的方法，而在Java中是通过调用HttpServletRequest的getSession方法（使用true作为参数）创建的。在创建了Session的同时，服务器会为该Session生成唯一的Session id，而这个Session  id在随后的请求中会被用来重新获得已经创建的Session；在Session被创建之后，就可以调用Session相关的方法往Session中增加内容了，而这些内容只会保存在服务器中，发到客户端的只有Session id；当客户端再次发送请求的时候，会将这个Session id带上，服务器接受到请求之后就会依据Session id找到相应的Session，从而再次使用之。正式这样一个过程，用户的状态也就得以保持了。</p></blockquote><p><strong>cookie与session的关系</strong><br>cookie和session的方案虽然分别属于客户端和服务端，但是服务端的session的实现对客户端的cookie有依赖关系的，上面讲到服务端执行session机制时候会生成session的id值，这个id值会发送给客户端，客户端每次请求都会把这个id值放到http请求的头部发送给服务端，而这个id值在客户端会保存下来，保存的容器就是cookie，因此当我们完全禁掉浏览器的cookie的时候，服务端的session也会不能正常使用。</p><h3 id="Java中session的产生和存储"><a href="#Java中session的产生和存储" class="headerlink" title="Java中session的产生和存储"></a>Java中session的产生和存储</h3><p>session也被翻译成会话，sessionid是一个会话的key，浏览器第一次访问服务器会在服务器端生成一个session，有一个sessionid和它对应。</p><p>ManagerBase是所有session管理工具类的基类，它是一个抽象类，所有具体实现session管理功能的类都要继承这个类，该类有一个受保护的方法，该方法就是创建sessionId值的方法，（tomcat的session的id值生成的机制是一个随机数加时间加上jvm的id值，jvm的id值会根据服务器的硬件信息计算得来，因此不同jvm的id值都是唯一的）。</p><p>StandardManager类是tomcat容器里默认的session管理实现类，它会将session的信息存储到web容器所在服务器的内存里。</p><p>PersistentManagerBase也是继承ManagerBase类，它是所有持久化存储session信息的基类，PersistentManager继承了PersistentManagerBase，但是这个类只是多了一个静态变量和一个getName方法，目前看来意义不大，对于持久化存储session，tomcat还提供了StoreBase的抽象类，它是所有持久化存储session的基类，另外tomcat还给出了文件存储FileStore和数据存储JDBCStore两个实现。</p><p><strong>注意：</strong> 为了弥补http协议的无状态的特点，服务端会占用一定的内存和cpu用来存储和处理session计算的开销，这也就是tomcat这个的web容器的并发连接那么低（tomcat官方文档里默认的连接数是200）原因之一。此处可以考虑使用分布式缓存技术，例如：memcached和redis，将session信息的存储独立出来也是解决session同步问题的方法。</p><p>Tomcat的session同步也有使用memcache的解决方案，大家可以参加下面的文章：<br><a href="http://blog.sina.com.cn/s/blog_5376c71901017bqx.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_5376c71901017bqx.html</a><br>但是该方案只是解决了同步问题，session机制任然和web容器紧耦合，我们需要一个高效、可扩展的解决方案，那么我们就应该不是简单的把session独立出来存储而是设计一个完全独立的session机制，它既能给每个web应用提供session的功能又可以实现session同步，下面是一篇用zookeeper实现的分布式session方案：<br><a href="http://www.open-open.com/lib/view/open1378556537303.html" target="_blank" rel="noopener">http://www.open-open.com/lib/view/open1378556537303.html</a></p><h2 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h2><p>中间人攻击（Man-in-the-MiddleAttack，简称“MITM攻击”）是一种“间接”的入侵攻击，这种攻击模式是通过各种技术手段将受入侵者控制的一台计算机虚拟放置在网络连接中的两台通信计算机之间，这台计算机就称为“中间人”。在前言中提到的就是简单的session劫持也叫中间人攻击。</p><p>中间人攻击主要有2种方式：</p><h3 id="DNS欺骗（DNSSpoofing）"><a href="#DNS欺骗（DNSSpoofing）" class="headerlink" title="DNS欺骗（DNSSpoofing）"></a><strong>DNS欺骗（DNSSpoofing）</strong></h3><blockquote><p>DNS欺骗就是其中的一种惯用手法。攻击者通过入侵DNS服务器、控制路由器等方法把受害者要访问的目标机器域名对应的IP解析为攻击者所控制的机器，这样受害者原本要发送给目标机器的数据就发到了攻击者的机器上，这时攻击者就可以监听甚至修改数据，从而收集到大量的信息。</p></blockquote><h3 id="会话劫持”（SessionHijack）"><a href="#会话劫持”（SessionHijack）" class="headerlink" title="会话劫持”（SessionHijack）"></a><strong>会话劫持”（SessionHijack）</strong></h3><blockquote><p>会话劫持是一种结合了嗅探以及欺骗技术在内的攻击手段。广义上说，会话劫持就是在一次正常的通信过程中，攻击者作为第三方参与到其中，或者是在数据里加入其他信息，甚至将双方的通信模式暗中改变，即从直接联系变成有攻击者参与的联系。简单地说，就是攻击者把自己插入到受害者和目标机器之间，并设法让受害者和目标机器之间的数据通道变为受害者和目标机器之间存在一个看起来像“中转站”的代理机器（攻击者的机器）的数据通道，从而干涉两台机器之间的数据传输，例如监听敏感数据、替换数据等。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> session </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MITM </tag>
            
            <tag> session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOS 系统通过plist方式安装App</title>
      <link href="/2019/02/14/iphone-install-through-plist/"/>
      <url>/2019/02/14/iphone-install-through-plist/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为之前公司经营不善，几近破产，于是公司决定放弃互联网部门，然后我只能美滋滋的拿着违约补偿金，和平分手。<br>目前在新的公司做app后端开发，一期项目接近尾声，需要做一个App升级的功能，说穿了就是一个下载，这个东西90%的人大一就会吧，Android的本质就是下载，就不多做介绍。IOS大部分可以通过APP store升级更新，而小部分企业内部使用的app，是不会上架app store，那它们是如何升级的呢，本文主要介绍利用itms-services协议安装IPA安装包。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>SSL证书 </li><li>对应的plist文件 </li><li>IPA安装包一个</li></ol><p>在iOS开发中，Xcode 7.0也就是iOS9.0(以及以后)中开发中要求App内访问的网络必须使用HTTPS协议，以此来提高数据传输之间的安全性。所以我们需要支持Https的服务环境（也就是SSL证书）。</p><p><strong>注意：个人名义发布的或者非权威机构发布的证书是无用的。</strong> </p><p>当然如果没有有效的证书也可以使用别人的，比如<a href="https://www.jianshu.com" target="_blank" rel="noopener">七牛云</a>、<a href="https://www.jianshu.com" target="_blank" rel="noopener">github</a>、<a href="https://coding.net/" target="_blank" rel="noopener">coding</a>，把上面准备好的 plist 文件 与 IPA 安装包往上面一丢，完事。</p><h3 id="plist文件"><a href="#plist文件" class="headerlink" title="plist文件"></a>plist文件</h3><pre><code>&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</code></pre><plist version="1.0"><br><dict><br>  <!-- array of downloads. --><br>  <key>items</key><br>  <array><br>   <dict><br>    <!-- an array of assets to download --><br>     <key>assets</key><br>      <array><br>       <!-- software-package: the ipa to install. --><br>        <dict><br>         <!-- required. the asset kind. --><br>          <key>kind</key><br>          <string>software-package</string><br>          <!-- optional. md5 every n bytes. will restart a chunk if md5 fails. --><br>          <key>md5-size</key><br>          <integer>10485760</integer><br>          <!-- optional. array of md5 hashes for each "md5-size" sized chunk. --><br>          <key>md5s</key><br>          <array><br>            <string>41fa64bb7a7cae5a46bfb45821ac8bba</string><br>            <string>51fa64bb7a7cae5a46bfb45821ac8bba</string><br>          </array><br>          <!-- required. the URL of the file to download. --><br>          <key>url</key><br>          <string><a href="https://www.example.com/apps/foo.ipa" target="_blank" rel="noopener">https://www.example.com/apps/foo.ipa</a></string><br>        </dict><br>        <!-- display-image: the icon to display during download.--><br>        <dict><br>         <key>kind</key><br>         <string>display-image</string><br>         <!-- optional. indicates if icon needs shine effect applied. --><br>         <key>needs-shine</key><br>         <true><br>         <key>url</key><br>         <string><a href="https://www.example.com/image.57x57.png" target="_blank" rel="noopener">https://www.example.com/image.57x57.png</a></string><br>        </true></dict><br>        <!-- full-size-image: the large 512x512 icon used by iTunes. --><br>        <dict><br>         <key>kind</key><br>         <string>full-size-image</string><br>         <!-- optional. one md5 hash for the entire file. --><br>         <key>md5</key><br>         <string>61fa64bb7a7cae5a46bfb45821ac8bba</string><br>         <key>needs-shine</key><br>         <true><br>         <key>url</key><string><a href="https://www.example.com/image.512x512.jpg" target="_blank" rel="noopener">https://www.example.com/image.512x512.jpg</a></string><br>        </true></dict><br>      </array><br><key>metadata</key><br>      <dict><br>       <!-- required --><br>       <key>bundle-identifier</key><br>       <string>com.example.fooapp</string><br>       <!-- optional (software only) --><br>       <key>bundle-version</key><br>       <string>1.0</string><br>       <!-- required. the download kind. --><br>       <key>kind</key><br>       <string>software</string><br>       <!-- optional. displayed during download; typically company name --><br>       <key>subtitle</key><br>       <string>Apple</string><br>       <!-- required. the title to display during the download. --><br>       <key>title</key><br>       <string>Example Corporate App</string><br>      </dict><br>    </dict><br>  </array><br></dict><br></plist><p><strong>以下栏是必填项：</strong><br>URL：应用 (.ipa) 文件的完全限定 HTTPS URL<br>display-image：57 x 57 像素的 PNG 图像，在下载和安装过程中显示。指定图像的完全限定 URL<br>full-size-image：512 x 512 像素的 PNG 图像，表示 iTunes 中相应的应用<br>bundle-identifier：应用的包标识符，与 Xcode 项目中指定的完全一样<br>bundle-version：应用的包版本，在 Xcode 项目中指定<br>title：下载和安装过程中显示的应用的名称        </p><p>样本清单文件还包含可选键。例如，如果应用文件太大，并且想要在执行错误检验（TCP 通信通常会执行该检验）的基础上确保下载的完整性，可以使用 MD5 键。通过指定项目数组的附加成员，您还可以使用一个清单文件安装多个应用。</p><h3 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h3><p>后端代码就是普通的下载，强行贴上来。</p><pre><code>@RequestMapping(&quot;/upgrade/{name}&quot;)private HttpServletResponse downloadFile(HttpServletResponse response, @PathVariable String name) {    String fileName = name;//被下载的文件名，默认路径为/,    try {        // path是指欲下载的文件的路径。        File file = new File(fileName);        // 取得文件名。        String filename = file.getName();        // 取得文件的后缀名。        String ext = filename.substring(filename.lastIndexOf(&quot;.&quot;) + 1).toUpperCase();        // 以流的形式下载文件。        InputStream fis = new BufferedInputStream(new FileInputStream(fileName));        byte[] buffer = new byte[fis.available()];        fis.read(buffer);        fis.close();        // 清空response        response.reset();        // 设置response的Header        OutputStream toClient = new BufferedOutputStream(response.getOutputStream());        response.setHeader(&quot;Content-Type&quot;,&quot;text/plain;charset=utf-8&quot;);        toClient.write(buffer);        toClient.flush();        toClient.close();        return null;    } catch (IOException ex) {        ex.printStackTrace();    }    return null;}</code></pre><p>所以我的plist里面的应用url是<code>http://127.0.0.1/upgrade/appname.ipa</code> (plist文件中的URL可以是https也可以是http)</p><h3 id="下载应用"><a href="#下载应用" class="headerlink" title="下载应用"></a>下载应用</h3><p>确认通过浏览器能够直接访问到plist文件，及下载ipa文件后<br>用safari访问 以下链接即可下载应用(也可以通过此方法下载国区未上线的游戏)</p><pre><code>itms-services:///?action=download-manifest&amp;url=https://127.0.0.1/upgrade/plistname.plist</code></pre><h3 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h3><ol><li><a href="https://help.apple.com/deployment/ios/#/apdda9e027d2" target="_blank" rel="noopener">IOS部署参考</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> APP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极光推送功能集成</title>
      <link href="/2018/12/15/JiGuang-Push/"/>
      <url>/2018/12/15/JiGuang-Push/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近一直想写点东西，但是沉迷吃鸡无法自拔。还有就是我比较懒，稍有少许安逸就不想行动了。<br>今天主要是集成极光服务的推送功能，直接记下来好了。我的Java项目主要是需要集成极光的推送消息给android、IOS，所以在这里我只会介绍怎么给极光推送，至于APP端也很简单，根据你的推送方式设置别名，标签或者ID即可。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="注册极光"><a href="#注册极光" class="headerlink" title="注册极光"></a>注册极光</h3><p>第一步，注册极光账号，这个就不需要多说了，<a href="https://www.jiguang.cn" target="_blank" rel="noopener">极光官网</a>。<br>注册好了之后创建一个应用，创建完成后,记住AppKey 与 Master Secret 后面会用到。</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre><code>&lt;dependency&gt;    &lt;groupId&gt;cn.jpush.api&lt;/groupId&gt;    &lt;artifactId&gt;jpush-client&lt;/artifactId&gt;    &lt;version&gt;3.2.17&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>现在一般都是Maven项目吧！！！如果不是去<a href="https://mvnrepository.com" target="_blank" rel="noopener">Maven仓库</a>下载。</p><h3 id="创建Jpush帮助类"><a href="#创建Jpush帮助类" class="headerlink" title="创建Jpush帮助类"></a>创建Jpush帮助类</h3><pre><code>private final static String appKey = &quot;860d817c725842c111111111&quot;;private final static String masterSecret = &quot;36169d64e73ccd3111111111&quot;;private static JPushClient jPushClient = new JPushClient(masterSecret, appKey);</code></pre><p>AppKey 和  Master Secret 就是前面创建应用得到的。<br>JPushClient 就是我们创建的实例<br>以下是具体推送的代码</p><pre><code>/**     * 推送给设备标识参数的用户     *     * @param registrationId     设备标识     * @param notification_title 通知内容标题     * @param msg_title          消息内容标题     * @param msg_content        消息内容     * @param extrasparam        扩展字段     * @return 0推送失败，1推送成功     */    public static int sendToRegistrationId(String registrationId, String notification_title, String msg_title, String msg_content, String extrasparam) {        int result = 0;        try {            PushPayload pushPayload = JpushClientUtil.buildPushObject_all_registrationId_alertWithTitle(registrationId, notification_title, msg_title, msg_content, extrasparam);            System.out.println(pushPayload);            PushResult pushResult = jPushClient.sendPush(pushPayload);            System.out.println(pushResult);            if (pushResult.getResponseCode() == 200) {                result = 1;            }        } catch (APIConnectionException e) {            e.printStackTrace();        } catch (APIRequestException e) {            e.printStackTrace();        }        return result;    }    /**     * 发送给所有安卓用户     *     * @param notification_title 通知内容标题     * @param msg_title          消息内容标题     * @param msg_content        消息内容     * @param extrasparam        扩展字段     * @return 0推送失败，1推送成功     */    public static int sendToAllAndroid(String notification_title, String msg_title, String msg_content, String extrasparam) {        int result = 0;        try {            PushPayload pushPayload = JpushClientUtil.buildPushObject_android_all_alertWithTitle(notification_title, msg_title, msg_content, extrasparam);            System.out.println(pushPayload);            PushResult pushResult = jPushClient.sendPush(pushPayload);            System.out.println(pushResult);            if (pushResult.getResponseCode() == 200) {                result = 1;            }        } catch (Exception e) {            e.printStackTrace();        }        return result;    }    /**     * 发送给所有IOS用户     *     * @param notification_title 通知内容标题     * @param msg_title          消息内容标题     * @param msg_content        消息内容     * @param extrasparam        扩展字段     * @return 0推送失败，1推送成功     */    public static int sendToAllIos(String notification_title, String msg_title, String msg_content, String extrasparam) {        int result = 0;        try {            PushPayload pushPayload = JpushClientUtil.buildPushObject_ios_all_alertWithTitle(notification_title, msg_title, msg_content, extrasparam);            System.out.println(pushPayload);            PushResult pushResult = jPushClient.sendPush(pushPayload);            System.out.println(pushResult);            if (pushResult.getResponseCode() == 200) {                result = 1;            }        } catch (Exception e) {            e.printStackTrace();        }        return result;    }    /**     * 发送给所有用户     *     * @param notification_title 通知内容标题     * @param msg_title          消息内容标题     * @param msg_content        消息内容     * @param extrasparam        扩展字段     * @return 0推送失败，1推送成功     */    public static int sendToAll(String notification_title, String msg_title, String msg_content, String[] employeeIds, String extrasparam) {        int result = 0;        try {            PushPayload pushPayload = JpushClientUtil.buildPushObject_android_and_ios(notification_title, msg_title, msg_content, employeeIds, extrasparam);            System.out.println(pushPayload);            PushResult pushResult = jPushClient.sendPush(pushPayload);            System.out.println(pushResult);            if (pushResult.getResponseCode() == 200) {                result = 1;            }        } catch (Exception e) {            e.printStackTrace();        }        return result;    }    //all    public static PushPayload buildPushObject_android_and_ios(String notification_title, String msg_title, String msg_content, String[] employeeIds, String extrasparam) {        return PushPayload.newBuilder()                .setPlatform(Platform.android_ios())                .setAudience(Audience.alias(employeeIds))                .setNotification(Notification.newBuilder()                        .setAlert(&quot;11111&quot;)                        .addPlatformNotification(AndroidNotification.newBuilder()                                .setAlert(msg_content)                                .setTitle(msg_title)                                //此字段为透传字段，不会显示在通知栏。用户可以通过此字段来做一些定制需求，如特定的key传要指定跳转的页面（value）                                .addExtra(&quot;androidExt1&quot;, extrasparam)                                .build()                        )                        .addPlatformNotification(IosNotification.newBuilder()                                //传一个IosAlert对象，指定apns title、title、subtitle等                                .setAlert(IosAlert.newBuilder().setTitleAndBody(msg_title, null, msg_content).build())                                //直接传alert                                //此项是指定此推送的badge自动加1                                .incrBadge(1)                                //此字段的值default表示系统默认声音；传sound.caf表示此推送以项目里面打包的sound.caf声音来提醒，                                // 如果系统没有此音频则以系统默认声音提醒；此字段如果传空字符串，iOS9及以上的系统是无声音提醒，以下的系统是默认声音                                .setSound(&quot;sound.caf&quot;)                                //此字段为透传字段，不会显示在通知栏。用户可以通过此字段来做一些定制需求，如特定的key传要指定跳转的页面（value）                                .addExtra(&quot;iosExt1&quot;, extrasparam)                                //此项说明此推送是一个background推送，想了解background看：http://docs.jpush.io/client/ios_tutorials/#ios-7-background-remote-notification                                // .setContentAvailable(true)                                .build()                        )                        .build()                )                //Platform指定了哪些平台就会像指定平台中符合推送条件的设备进行推送。 jpush的自定义消息，                // sdk默认不做任何处理，不会有通知提示。建议看文档http://docs.jpush.io/guideline/faq/的                // [通知与自定义消息有什么区别？]了解通知和自定义消息的区别                .setMessage(Message.newBuilder()                        .setMsgContent(msg_content)                        .setTitle(msg_title)                        .addExtra(&quot;message extras key&quot;, extrasparam)                        .build())                .setOptions(Options.newBuilder()                        //此字段的值是用来指定本推送要推送的apns环境，false表示开发，true表示生产；对android和自定义消息无意义                        .setApnsProduction(false)                        //此字段是给开发者自己给推送编号，方便推送者分辨推送记录                        .setSendno(1)                        //此字段的值是用来指定本推送的离线保存时长，如果不传此字段则默认保存一天，最多指定保留十天，单位为秒                        .setTimeToLive(86400)                        .build()                )                .build();    }    private static PushPayload buildPushObject_all_registrationId_alertWithTitle(String registrationId, String notification_title, String msg_title, String msg_content, String extrasparam) {        System.out.println(&quot;----------buildPushObject_all_all_alert&quot;);        //创建一个IosAlert对象，可指定APNs的alert、title等字段        //IosAlert iosAlert =  IosAlert.newBuilder().setTitleAndBody(&quot;title&quot;, &quot;alert body&quot;).build();        return PushPayload.newBuilder()                //指定要推送的平台，all代表当前应用配置了的所有平台，也可以传android等具体平台                .setPlatform(Platform.all())                //指定推送的接收对象，all代表所有人，也可以指定已经设置成功的tag或alias或该应应用客户端调用接口获取到的registration id                .setAudience(Audience.registrationId(registrationId))                //jpush的通知，android的由jpush直接下发，iOS的由apns服务器下发，Winphone的由mpns下发                .setNotification(Notification.newBuilder()                        //指定当前推送的android通知                        .addPlatformNotification(AndroidNotification.newBuilder()                                .setAlert(notification_title)                                .setTitle(notification_title)                                //此字段为透传字段，不会显示在通知栏。用户可以通过此字段来做一些定制需求，如特定的key传要指定跳转的页面（value）                                .addExtra(&quot;androidNotification extras key&quot;, extrasparam)                                .build())                        //指定当前推送的iOS通知                        .addPlatformNotification(IosNotification.newBuilder()                                //传一个IosAlert对象，指定apns title、title、subtitle等                                .setAlert(notification_title)                                //直接传alert                                //此项是指定此推送的badge自动加1                                .incrBadge(1)                                //此字段的值default表示系统默认声音；传sound.caf表示此推送以项目里面打包的sound.caf声音来提醒，                                // 如果系统没有此音频则以系统默认声音提醒；此字段如果传空字符串，iOS9及以上的系统是无声音提醒，以下的系统是默认声音                                .setSound(&quot;sound.caf&quot;)                                //此字段为透传字段，不会显示在通知栏。用户可以通过此字段来做一些定制需求，如特定的key传要指定跳转的页面（value）                                .addExtra(&quot;iosNotification extras key&quot;, extrasparam)                                //此项说明此推送是一个background推送，想了解background看：http://docs.jpush.io/client/ios_tutorials/#ios-7-background-remote-notification                                //取消此注释，消息推送时ios将无法在锁屏情况接收                                // .setContentAvailable(true)                                .build())                        .build())                //Platform指定了哪些平台就会像指定平台中符合推送条件的设备进行推送。 jpush的自定义消息，                // sdk默认不做任何处理，不会有通知提示。建议看文档http://docs.jpush.io/guideline/faq/的                // [通知与自定义消息有什么区别？]了解通知和自定义消息的区别                .setMessage(Message.newBuilder()                        .setMsgContent(msg_content)                        .setTitle(msg_title)                        .addExtra(&quot;message extras key&quot;, extrasparam)                        .build())                .setOptions(Options.newBuilder()                        //此字段的值是用来指定本推送要推送的apns环境，false表示开发，true表示生产；对android和自定义消息无意义                        .setApnsProduction(false)                        //此字段是给开发者自己给推送编号，方便推送者分辨推送记录                        .setSendno(1)                        //此字段的值是用来指定本推送的离线保存时长，如果不传此字段则默认保存一天，最多指定保留十天；                        .setTimeToLive(86400)                        .build())                .build();    }    private static PushPayload buildPushObject_android_all_alertWithTitle(String notification_title, String msg_title, String msg_content, String extrasparam) {        System.out.println(&quot;----------buildPushObject_android_registrationId_alertWithTitle&quot;);        return PushPayload.newBuilder()                //指定要推送的平台，all代表当前应用配置了的所有平台，也可以传android等具体平台                .setPlatform(Platform.android())                //指定推送的接收对象，all代表所有人，也可以指定已经设置成功的tag或alias或该应应用客户端调用接口获取到的registration id                .setAudience(Audience.alias(&quot;17601018219&quot;))//Audience.tag(&quot;tag1&quot;);Audience.all()                //jpush的通知，android的由jpush直接下发，iOS的由apns服务器下发，Winphone的由mpns下发                .setNotification(Notification.newBuilder()                        //指定当前推送的android通知                        .addPlatformNotification(AndroidNotification.newBuilder()                                .setAlert(notification_title)                                .setTitle(notification_title)                                //此字段为透传字段，不会显示在通知栏。用户可以通过此字段来做一些定制需求，如特定的key传要指定跳转的页面（value）                                .addExtra(&quot;androidNotification extras key&quot;, extrasparam)                                .build())                        .build()                )                //Platform指定了哪些平台就会像指定平台中符合推送条件的设备进行推送。 jpush的自定义消息，                // sdk默认不做任何处理，不会有通知提示。建议看文档http://docs.jpush.io/guideline/faq/的                // [通知与自定义消息有什么区别？]了解通知和自定义消息的区别                .setMessage(Message.newBuilder()                        .setMsgContent(msg_content)                        .setTitle(msg_title)                        .addExtra(&quot;message extras key&quot;, extrasparam)                        .build())                .setOptions(Options.newBuilder()                        //此字段的值是用来指定本推送要推送的apns环境，false表示开发，true表示生产；对android和自定义消息无意义                        .setApnsProduction(false)                        //此字段是给开发者自己给推送编号，方便推送者分辨推送记录                        .setSendno(1)                        //此字段的值是用来指定本推送的离线保存时长，如果不传此字段则默认保存一天，最多指定保留十天，单位为秒                        .setTimeToLive(86400)                        .build())                .build();    }    private static PushPayload buildPushObject_ios_all_alertWithTitle(String notification_title, String msg_title, String msg_content, String extrasparam) {        System.out.println(&quot;----------buildPushObject_ios_registrationId_alertWithTitle&quot;);        return PushPayload.newBuilder()                //指定要推送的平台，all代表当前应用配置了的所有平台，也可以传android等具体平台                .setPlatform(Platform.ios())                //指定推送的接收对象，all代表所有人，也可以指定已经设置成功的tag或alias或该应应用客户端调用接口获取到的registration id                .setAudience(Audience.all())                //jpush的通知，android的由jpush直接下发，iOS的由apns服务器下发，Winphone的由mpns下发                .setNotification(Notification.newBuilder()                        //指定当前推送的android通知                        .addPlatformNotification(IosNotification.newBuilder()                                //传一个IosAlert对象，指定apns title、title、subtitle等                                .setAlert(notification_title)                                //直接传alert                                //此项是指定此推送的badge自动加1                                .incrBadge(1)                                //此字段的值default表示系统默认声音；传sound.caf表示此推送以项目里面打包的sound.caf声音来提醒，                                // 如果系统没有此音频则以系统默认声音提醒；此字段如果传空字符串，iOS9及以上的系统是无声音提醒，以下的系统是默认声音                                .setSound(&quot;sound.caf&quot;)                                //此字段为透传字段，不会显示在通知栏。用户可以通过此字段来做一些定制需求，如特定的key传要指定跳转的页面（value）                                .addExtra(&quot;iosNotification extras key&quot;, extrasparam)                                //此项说明此推送是一个background推送，想了解background看：http://docs.jpush.io/client/ios_tutorials/#ios-7-background-remote-notification                                // .setContentAvailable(true)                                .build())                        .build()                )                //Platform指定了哪些平台就会像指定平台中符合推送条件的设备进行推送。 jpush的自定义消息，                // sdk默认不做任何处理，不会有通知提示。建议看文档http://docs.jpush.io/guideline/faq/的                // [通知与自定义消息有什么区别？]了解通知和自定义消息的区别                .setMessage(Message.newBuilder()                        .setMsgContent(msg_content)                        .setTitle(msg_title)                        .addExtra(&quot;message extras key&quot;, extrasparam)                        .build())                .setOptions(Options.newBuilder()                        //此字段的值是用来指定本推送要推送的apns环境，false表示开发，true表示生产；对android和自定义消息无意义                        .setApnsProduction(false)                        //此字段是给开发者自己给推送编号，方便推送者分辨推送记录                        .setSendno(1)                        //此字段的值是用来指定本推送的离线保存时长，如果不传此字段则默认保存一天，最多指定保留十天，单位为秒                        .setTimeToLive(86400)                        .build())                .build();    }</code></pre><p>实际调用方法：</p><pre><code>JpushClientUtil.sendToAllAndroid(&quot;testIos&quot;,&quot;testIos&quot;,&quot;this is a ios Dev test&quot;,&quot;&quot;)</code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://docs.jiguang.cn/jpush/guideline/intro/" target="_blank" rel="noopener">极光官方API</a></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>极光的API总体来说是用起来是比较简单的，之所以记下来是因为在网上看到了千篇一律的错误文章，不知道是因为极光版本升级了还是其他原因。</p>]]></content>
      
      
      <categories>
          
          <category> APP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 极光 </tag>
            
            <tag> 推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透简单介绍与工具推荐</title>
      <link href="/2018/08/02/Intranet-penetration/"/>
      <url>/2018/08/02/Intranet-penetration/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为什么需要内网穿透</p><p>当内网中的主机没有静态IP地址要被外网稳定访问时可以使用内网穿透</p><p>在互联网中唯一定位一台主机的方法是通过公网的IP地址，但固定IP是一种非常稀缺的资源，不可能给每个公司都分配一个，且许多中小公司不愿意为高昂的费用买单，多数公司直接或间接的拨号上网，电信部门会给接入网络的用户分配IP地址，以前上网用户少的时候基本分配的都是临时的静态IP地址，租约过了之后可能会更换成另一个IP地址，这样外网访问就不稳定，因为内网的静态IP地址一直变化，为了解决这个问题可以使用动态域名解析的办法变换域名指向的静态IP地址。但是现在越来越多的上网用户使得临时分配的静态IP地址也不够用了，电信部门开始分配一些虚拟的静态IP地址，这些IP是公网不能直接访问的，如以125开头的一些IP地址，以前单纯的动态域名解析就不好用了。</p><h2 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h2><p>NAT（Network Address Translation）即网络地址转换，NAT能将其本地地址转换成全球IP地址。</p><p>内网的一些主机本来已经分配到了本地IP地址（如局域网DHCP分配的IP），但现在又想和因特网上的主机通信（并不需要加密）时，可使用NAT方法。</p><p>通过使用少量的公有IP 地址代表较多的私有IP 地址的方式，将有助于减缓可用的IP地址空间的枯竭。</p><p>NAT不仅能解决了lP地址不足与共享上网的问题，而且还能够有效地避免来自网络外部的攻击，隐藏并保护网络内部的计算机。</p><p>多路由器可完成NAT功能。</p><h2 id="NAT实现方式"><a href="#NAT实现方式" class="headerlink" title="NAT实现方式"></a>NAT实现方式</h2><p><strong>静态转换</strong>是指将内部网络的私有IP地址转换为公有IP地址，IP地址对是一对一。</p><p><strong>动态转换</strong>是指将内部网络的私有IP地址转换为公用IP地址时，IP地址是不确定的，是随机的。</p><p><strong>端口多路复用（Port address Translation,PAT)</strong>，内部网络的所有主机均可共享一个合法外部IP地址实现对Internet的访问，从而可以最大限度地节约IP地址资源。同时又可隐藏网络内部的所有主机，有效避免来自internet的攻击。因此，目前网络中应用最多的就是端口多路复用方式。</p><p><strong>应用程序级网关技术（Application Level Gateway）ALG</strong>：传统的NAT技术只对IP层和传输层头部进行转换处理，ALG它能对这些应用程序在通信时所包含的地址信息也进行相应的NAT转换。</p><h2 id="内网穿透的定义与障碍"><a href="#内网穿透的定义与障碍" class="headerlink" title="内网穿透的定义与障碍"></a>内网穿透的定义与障碍</h2><p>简单来说实现不同局域网内的主机之间通过互联网进行通信的技术叫内网穿透。</p><p><strong>障碍一</strong>：位于局域网内的主机有两套 IP 地址，一套是局域网内的 IP 地址，通常是动态分配的，仅供局域网内的主机间通信使用；一套是经过网关转换后的外网 IP 地址，用于与外网程序进行通信。</p><p><strong>障碍二</strong>：位于不同局域网内的两台主机，即使是知道了对方的 IP 地址和端口号，“一厢情愿”地将数据包发送过去，对方也是接收不到的。<br>因为出于安全起见，除非是主机主动向对方发出了连接请求（这时会在该主机的数据结构中留下一条记录），否则，当主机接收到数据包时，如果在其数据结构中查询不到对应的记录，那些不请自来的数据包将会被丢弃。</p><p><strong>解决办法</strong>：要想解决以上两大障碍，我们需要借助一台具有公网 IP 的服务器进行桥接。</p><h2 id="热门工具分析"><a href="#热门工具分析" class="headerlink" title="热门工具分析"></a>热门工具分析</h2><p>虽然贫穷应该是使用者本人的缺点，而不是产品的缺点，但是本章还是将付费归于缺点当中。</p><h3 id="花生壳"><a href="#花生壳" class="headerlink" title="花生壳"></a>花生壳</h3><p>花生壳既是内网穿透软件、内网映射软件,也是端口映射软件。</p><p><strong>优点</strong>：规模最大，较正规，完善。</p><p><strong>缺点</strong>：付费，限制端口，限制流量。</p><h3 id="nat123"><a href="#nat123" class="headerlink" title="nat123"></a>nat123</h3><p>nat123是内网端口映射与动态域名解析软件，在内网启动映射后，可在外网访问连接内网网站等应用。</p><p><strong>缺点</strong>：免费的泛域问题严重，付费的没有短期的。</p><h3 id="NATAPP"><a href="#NATAPP" class="headerlink" title="NATAPP"></a>NATAPP</h3><p>NATAPP基于ngrok的国内内网穿透服务，<strong>免费版会强制更换域名</strong>，临时用一下可以</p><p><strong>优点</strong>：使用简单，有免费隧道，一级vip9元一个月</p><p><strong>缺点</strong>：收费</p><h3 id="Ngrok"><a href="#Ngrok" class="headerlink" title="Ngrok"></a>Ngrok</h3><p>ngrok 是一个反向代理，通过在公共端点和本地运行的 Web 服务器之间建立一个安全的通道，实现内网主机的服务可以暴露给外网。</p><p><strong>优点</strong>：开源，使用简单，有免费隧道。ngrok 可捕获和分析所有通道上的流量，便于后期分析和重放。</p><p><strong>缺点</strong>：免费服务不定时强制更换域名/端口。</p><h3 id="Cpolar"><a href="#Cpolar" class="headerlink" title="Cpolar"></a>Cpolar</h3><p>Cpolar是一个反向代理，通过在公共端点和本地运行的 Web 服务器之间建立一个安全的通道。</p><p><strong>优点</strong>：有免费的隧道，使用简单，并且免费版不会定时强制更换域名或者端口。</p><p>官网：<a href="https://www.cpolar.com" target="_blank" rel="noopener">https://www.cpolar.com</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>免费的比较推荐Cpolar 。</li><li>有公网IP的服务器可以自己搭建。</li><li>如果应用于微信平台开发，花生壳用不了；nat123泛域严重，vip比较贵 ；NatApp域名会强制变更，不稳定；Ngrok 有泛域问题，隧道不稳定。</li><li>内网穿透工具不局限文中几种，只是其中几种恰好本人用过，其余还有Spike、Lanproxy、Frp、Natapp、Ssh、3322动态域名、dnspod。</li><li>需要深入了解原理可以参考，<a href="https://zhuanlan.zhihu.com/p/30351943" target="_blank" rel="noopener">内网穿透的工具原理与开发实战</a>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 内网穿透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpolar </tag>
            
            <tag> ngrok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSR搭建属于自己的梯子</title>
      <link href="/2018/07/12/SSR-builds-its-own-ladder/"/>
      <url>/2018/07/12/SSR-builds-its-own-ladder/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SSR梯子切勿用于非法用途，主要是用来学习交流使用。<br>这几天一直有小伙伴问我有没有免费的梯子，我之前一直在用google的蓝灯，但是后来因为国情原因时好时坏的所以决定自己研究一下梯子的搭建。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>SSTAP：链接: <a href="https://pan.baidu.com/s/1tfuR5gsUnmTNxurvn_fFNA" target="_blank" rel="noopener">https://pan.baidu.com/s/1tfuR5gsUnmTNxurvn_fFNA</a>  密码:67zb<br>Windows客户端代理工具：链接: <a href="https://pan.baidu.com/s/1pqtpMnrHRk89lWDe-IOmFQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1pqtpMnrHRk89lWDe-IOmFQ</a> 密码:fqkt<br>服务器一台：推荐使用vultr地址：<a href="http://www.vuvps.com/vultr.php" target="_blank" rel="noopener">http://www.vuvps.com/vultr.php</a><br>最后一个xShell远程终端，用来连接你的服务器，链接: <a href="https://pan.baidu.com/s/1ab2GYTH7YyLCl0qfAxp5Hg" target="_blank" rel="noopener">https://pan.baidu.com/s/1ab2GYTH7YyLCl0qfAxp5Hg</a>  密码:meeu ，只需要用一次就行了，就是SSR搭建后之后，你就可以把它卸载了。<br>准备支付宝。</p><h3 id="服务器选购"><a href="#服务器选购" class="headerlink" title="服务器选购"></a>服务器选购</h3><p>1.进入到Vultr首页，填写你的邮箱地址和登陆密码（密码需要数字+大写+小写字母），然后点击“CreateAccount”注册账号，注册成功之后,Service一栏里面，需要验证一下自己的邮箱。<br><img src="/2018/07/12/SSR-builds-its-own-ladder/1.png" alt=""></p><p>2.购买服务器需要最低充值10美金，使用支付宝付款，服务器按小时计费。</p><p>充值流程：【Billing】-【Alipay】-【Pay withAlipay】-【完成支付】<br><img src="/2018/07/12/SSR-builds-its-own-ladder/2.png" alt=""></p><p>3.支付完成后，接着选择服务器，本着最便宜的原则来购买（一般纽约为2.5美元一个月）</p><p>【Server Location】<br><img src="/2018/07/12/SSR-builds-its-own-ladder/3.png" alt=""><br>【ServerType】 选择Centos 6x64（默认是Centos 7，如果没选6也没关系）<br><img src="/2018/07/12/SSR-builds-its-own-ladder/4.png" alt=""><br>【ServerSize】反正选最便宜的。<br><img src="/2018/07/12/SSR-builds-its-own-ladder/5.png" alt=""><br>剩下的默认，最后点击右下角“DeployNow”完成购买。</p><p>PS:主机创建的时候需要等两分钟再执行下一步SSR部署</p><h3 id="SSR部署"><a href="#SSR部署" class="headerlink" title="SSR部署"></a>SSR部署</h3><p>1.下载xShell,上面有链接，vps信息在你刚刚购买的面板里面可以看到。</p><p>打开xshell，新建链接，填写主机ip，端口号，钩选重新链接，然后点连接。<br><img src="/2018/07/12/SSR-builds-its-own-ladder/6.png" alt=""><br>弹出“SSR安全警告”，选择“接受并保存”，用户名root（记得钩选记住用户名），密码在你的vultr里面去看，<br><img src="/2018/07/12/SSR-builds-its-own-ladder/7.png" alt=""><br>出现下图（root@vultr）代表成功<br><img src="/2018/07/12/SSR-builds-its-own-ladder/8.png" alt=""></p><h3 id="SSR安装"><a href="#SSR安装" class="headerlink" title="SSR安装"></a>SSR安装</h3><p>执行以下命令（密码建议修改，port可以默认）</p><pre><code>wget --no-check-certificate https://freed.ga/github/shadowsocksR.sh; bash shadowsocksR.sh</code></pre><p><img src="/2018/07/12/SSR-builds-its-own-ladder/9.png" alt=""><br><img src="/2018/07/12/SSR-builds-its-own-ladder/10.png" alt=""></p><p>出现提示“Shadowsocksr安装完成”就可以继续下一步，锐速安装（图片保存一下）。</p><h3 id="锐速安装"><a href="#锐速安装" class="headerlink" title="锐速安装"></a>锐速安装</h3><p>因为 Vultr 的所有机房都位于国外，当晚上上网高峰期来临时，在连接速度上会比较慢，所以我们有必要安装一些程序来加速连接速度。本次推荐安装的是站长一直在用的锐速加速软件，个人认为目前在提速方面，相比于最新的 Google BBR 拥塞控制算法，锐速尚有优势。</p><h4 id="1-执行更换内核脚本"><a href="#1-执行更换内核脚本" class="headerlink" title="1.执行更换内核脚本"></a>1.执行更换内核脚本</h4><pre><code>wget -N --no-check-certificate https://freed.ga/kernel/ruisu.sh&amp;&amp; bash ruisu.sh</code></pre><p>执行之后，脚本会自动断开服务器，假如你钩选了记住用户名和密码，它会自动重连，如果没钩选也没关系，Xshel左上角【File】-【重新连接】，然后执行锐速安装脚本。</p><h4 id="2-锐速安装脚本"><a href="#2-锐速安装脚本" class="headerlink" title="2.锐速安装脚本"></a>2.锐速安装脚本</h4><p><strong>注意事项</strong></p><pre><code>1、安装锐速需降级系统内核，而安装 Google BBR 则需升级系统内核，故两者不能同时安装。2、安装锐速需降级系统内核，有可能造成系统不稳定，故不建议将其应用在重要的生产环境中。3、本教程只支持 CentOS6 x64 及 CentOS7 x64 系统，不支持任何 Debian &amp; Ubuntu 系统！</code></pre><p>输入<code>uname -r</code>查看当前系统内核版本。主要分三种情况：</p><p><strong>1、结果以 2 开头，例如 2.6.32-696.18.7.el6.x86_64。</strong></p><pre><code>wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install &apos;2.6.32-642.el6.x86_64&apos;</code></pre><p>2、结果以 3 开头，例如 3.10.0-693.11.6.el7.x86_64。</p><pre><code>yum install net-tools -y &amp;&amp; wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install。</code></pre><p>3、结果以 4 开头，例如 4.12.10-1.el7.elrepo.x86_64。</p><p>这种输出结果说明我们的服务器已经安装 Google BBR 拥塞控制算法，此时已经无法继续安装锐速。</p><p>如果出现版本不匹配，会出现一个选项，直接选个1就行了，直至出现下图，恭喜你，拥有了一个属于自己的SSR梯子。<br><img src="/2018/07/12/SSR-builds-its-own-ladder/11.png" alt=""></p><h3 id="SStap配置"><a href="#SStap配置" class="headerlink" title="SStap配置"></a>SStap配置</h3><p>下载SStap,安装并填写SSR信息，下载链接在上面。</p><p>你只需要填写服务器IP、端口号、密码，其他信息照着下图抄就行了,此处注意SStap的版本，因为某些原因高版本的SStap屏蔽了网站的加速。<br><img src="/2018/07/12/SSR-builds-its-own-ladder/12.png" alt=""><br>最后给个Google一张<br><img src="/2018/07/12/SSR-builds-its-own-ladder/13.png" alt=""><br>SSR各平台下载地址=》 <a href="http://www.vuvps.com/?p=112" target="_blank" rel="noopener">极光SSR各平台客户端操作软件</a></p>]]></content>
      
      
      <categories>
          
          <category> VPN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssr </tag>
            
            <tag> vps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集群环境下的文件同步</title>
      <link href="/2018/07/12/File-Synchronization-in-Cluster-Environment/"/>
      <url>/2018/07/12/File-Synchronization-in-Cluster-Environment/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近公司的项目，需要做一个上传下载的功能，正准备把大学写的demo拿来用一用，然后反应过来，我们项目部署的是集群。因为使用nginx均衡负载，由于分发请求到不同服务器，这样如果只想把上传的图片只保存到一台服务器，会涉及到多服务器文件同步的问题。</p><p>例如：我上传文件时，负载到A服务器，文件上传到A服务器下路径，我下载时被分配到B服务器了，此时B服务器相应的路径下并没有我在A上传的文件。</p><p>那么，如何解决集群环境文件上传不同步的问题呢？</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>文件保存到数据库，目前数据库单个字段存储大小可以高达几个GB，所以存储到数据库完全没问题，至于访问速度以及其他问题，emmmmm（实用性太低）。</li><li>宿主机的nginx对于上传的location做特殊处理, 只让一台机器来负责文件上传, 不完美但是有效, 可以作为一段时间的过度方案。（治标不治本）</li><li>使用SFTP、SCP、xshell同步文件到文件服务器，或者多个负载服务器上。</li><li>搭建一个分布式文件系统（或者硬盘）, 挂载到所有的服务器上，使被挂载的成为一个局域网网络盘, 处理文件上传后写只写入这个特定目录即可，不需要考虑同步问题。（后面有时间出一下Linux挂载的文章）</li><li>使用阿里巴巴的OSS服务。（费钱）</li></ol><h2 id="使用SCP操作远程服务器"><a href="#使用SCP操作远程服务器" class="headerlink" title="使用SCP操作远程服务器"></a>使用SCP操作远程服务器</h2><h3 id="SCP"><a href="#SCP" class="headerlink" title="SCP"></a>SCP</h3><p>scp是secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读 read only system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I/O非常高，而scp基本不影响系统正常使用。</p><pre><code>scp root@192.168.120.204:/opt/soft/nginx-0.5.38.tar.gz /opt/soft/</code></pre><p>贴一个使用指令，具体其他参数，可以google。</p><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>使用Java代码执行scp需要使用ganymed-ssh2包，这个包是十几年前的，不过能用就行。</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;ch.ethz.ganymed&lt;/groupId&gt;    &lt;artifactId&gt;ganymed-ssh2&lt;/artifactId&gt;    &lt;version&gt;build210&lt;/version&gt;&lt;/dependency&gt;</code></pre><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><pre><code>import ch.ethz.ssh2.Connection;import ch.ethz.ssh2.SCPClient;import ch.ethz.ssh2.SFTPv3Client;import ch.ethz.ssh2.SFTPv3DirectoryEntry;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.Vector;/** * 文件帮助类 */public class SSHUtil {    private static Logger logger = LoggerFactory.getLogger(SSHUtil.class);    private String IP = &quot;10.128.118.188&quot;;    private int PORT = 22;    private String USER = &quot;was&quot;;//登录用户名    private String PASSWORD = &quot;&lt;gF3&gt;gWf0D&quot;;//生成私钥的密码和登录密码，这两个共用这个密码    private Connection connection = null;    private String PRIVATEKEY = &quot;C:\\Users\\ubuntu\\.ssh\\id_rsa&quot;;// 本机的私钥文件    private boolean usePassword = true;// 使用用户名和密码来进行登录验证。如果为true则通过用户名和密码登录，false则使用rsa免密码登录    public SSHUtil(String IP, int PORT, String USER, String PASSWORD) {        this.IP = IP;        this.PORT = PORT;        this.USER = USER;        this.PASSWORD = PASSWORD;        this.usePassword = true;        this.connection = new Connection(IP, PORT);    }    /**     * ssh用户登录验证，使用用户名和密码来认证     *     * @param user     * @param password     * @return     */    public boolean isAuthedWithPassword(String user, String password) {        try {            return connection.authenticateWithPassword(user, password);        } catch (IOException e) {            e.printStackTrace();        }        return false;    }    /**     * ssh用户登录验证，使用用户名、私钥、密码来认证 其中密码如果没有可以为null，生成私钥的时候如果没有输入密码，则密码参数为null     *     * @param user     * @param privateKey     * @param password     * @return     */    public boolean isAuthedWithPublicKey(String user, File privateKey, String password) {        try {            return connection.authenticateWithPublicKey(user, privateKey, password);        } catch (IOException e) {            e.printStackTrace();        }        return false;    }    /**     * 认证     * @return     */    public boolean isAuth() {        if (usePassword) {            return isAuthedWithPassword(USER, PASSWORD);        } else {            return isAuthedWithPublicKey(USER, new File(PRIVATEKEY), PASSWORD);        }    }    /**     * 从远程服务器下载文件     * @param remoteFile /opt/1.zip     * @param path  /opt     */    public void getFile(String remoteFile, String path) {        try {            connection.connect();            boolean isAuthed = isAuth();            if (isAuthed) {                System.out.println(&quot;认证成功!&quot;);                SCPClient scpClient = connection.createSCPClient();                scpClient.get(remoteFile, path);            } else {                System.out.println(&quot;认证失败!&quot;);            }        } catch (IOException e) {            e.printStackTrace();        } finally {            connection.close();        }    }    /**     * 在远端linux上创建文件夹     *     * @param dirName          文件夹名称     * @param posixPermissions 目录或者文件夹的权限     */    public void mkDir(String dirName, int posixPermissions) {        try {            connection.connect();            boolean isAuthed = isAuth();            if (isAuthed) {                SFTPv3Client sftpClient = new SFTPv3Client(connection);                List&lt;String&gt; dirNames = new ArrayList&lt;&gt;(Arrays.asList(dirName.split(&quot;/&quot;, -1)));                dirNames.remove(&quot;&quot;);                dirNames.remove(&quot;&quot;);                String path = &quot;&quot;;                for (int i = 0; i &lt; dirNames.size() - 1; i++) {                    path += &quot;/&quot; + dirNames.get(i);                    Vector ls = sftpClient.ls(path);                    String nextDirName = dirNames.get(i + 1);                    if (isContainsDirectoryByName(ls, nextDirName)) {                        continue;                    } else {                        sftpClient.mkdir(path + &quot;/&quot; + dirNames.get(i + 1), posixPermissions);                    }                }            } else {                System.out.println(&quot;认证失败!&quot;);            }        } catch (Exception ex) {            ex.printStackTrace();        } finally {            connection.close();        }    }    /**     * 向远程服务器推文件     * @param localFile 本地文件路径 例如：/opt/1.zip     * @param remoteTargetDirectory 远程服务器路径 例如：/opt     */    public void putFile(String localFile, String remoteTargetDirectory) {        try {            connection.connect();            boolean isAuthed = isAuth();            if (isAuthed) {                SCPClient scpClient = connection.createSCPClient();                //创建目录                SFTPv3Client sftpClient = new SFTPv3Client(connection);                List&lt;String&gt; dirNames = new ArrayList&lt;&gt;(Arrays.asList(remoteTargetDirectory.split(&quot;/&quot;, -1)));                //移除首尾带/                dirNames.remove(&quot;&quot;);                dirNames.remove(&quot;&quot;);                String path = &quot;&quot;;                //逐级创建目录                for (int i = 0; i &lt; dirNames.size() - 1; i++) {                    path += &quot;/&quot; + dirNames.get(i);                    Vector ls = sftpClient.ls(path);                    String nextDirName = dirNames.get(i + 1);                    if (isContainsDirectoryByName(ls, nextDirName)) {                        continue;                    } else {                        sftpClient.mkdir(path + &quot;/&quot; + dirNames.get(i + 1), 0755);                    }                }                scpClient.put(localFile, remoteTargetDirectory);            } else {                System.out.println(&quot;认证失败!&quot;);            }        } catch (Exception ex) {            ex.printStackTrace();        } finally {            connection.close();        }    }    /**     * 是否包含文件夹名为XXX的     *     * @return     */    public boolean isContainsDirectoryByName(Vector&lt;SFTPv3DirectoryEntry&gt; dirs, String dirName) {        if (dirs != null &amp;&amp; dirs.size() != 0) {            for (int i = 0; i &lt; dirs.size(); i++) {                SFTPv3DirectoryEntry sde = dirs.get(i);                if (sde.attributes.isDirectory() &amp;&amp; sde.filename.equals(dirName)) {                    return true;                }            }            return false;        }        return false;    }}</code></pre><p>代码主要是传文件部分，因为jar包过于古老且停止更新了，其余方法懒得写了，感兴趣的可以阅读源码。</p><h3 id="SFTP"><a href="#SFTP" class="headerlink" title="SFTP"></a>SFTP</h3><h4 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h4><pre><code>&lt;dependency&gt;    &lt;groupId&gt;commons-net&lt;/groupId&gt;    &lt;artifactId&gt;commons-net&lt;/artifactId&gt;    &lt;version&gt;3.6&lt;/version&gt;&lt;/dependency&gt;</code></pre><h4 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h4><pre><code>/**      * Description: 向FTP服务器上传文件      * @param host FTP服务器hostname      * @param port FTP服务器端口      * @param username FTP登录账号      * @param password FTP登录密码      * @param basePath FTP服务器基础目录     * @param filePath FTP服务器文件存放路径。文件的路径为basePath+filePath     * @param filename 上传到FTP服务器上的文件名      * @param input 输入流      * @return 成功返回true，否则返回false      */      public static boolean uploadFile(String host, int port, String username, String password, String basePath,            String filePath, String filename, InputStream input) {        boolean result = false;        FTPClient ftp = new FTPClient();        try {            int reply;            ftp.connect(host, port);// 连接FTP服务器            // 如果采用默认端口，可以使用ftp.connect(host)的方式直接连接FTP服务器            ftp.login(username, password);// 登录            reply = ftp.getReplyCode();            if (!FTPReply.isPositiveCompletion(reply)) {                ftp.disconnect();                return result;            }            //切换到上传目录            if (!ftp.changeWorkingDirectory(basePath+filePath)) {                //如果目录不存在创建目录                String[] dirs = filePath.split(&quot;/&quot;);                String tempPath = basePath;                for (String dir : dirs) {                    if (null == dir || &quot;&quot;.equals(dir)) continue;                    tempPath += &quot;/&quot; + dir;                    if (!ftp.changeWorkingDirectory(tempPath)) {                        if (!ftp.makeDirectory(tempPath)) {                            return result;                        } else {                            ftp.changeWorkingDirectory(tempPath);                        }                    }                }            }            //设置上传文件的类型为二进制类型            ftp.setFileType(FTP.BINARY_FILE_TYPE);            //上传文件            if (!ftp.storeFile(filename, input)) {                return result;            }            input.close();            ftp.logout();            result = true;        } catch (IOException e) {            e.printStackTrace();        } finally {            if (ftp.isConnected()) {                try {                    ftp.disconnect();                } catch (IOException ioe) {                }            }        }        return result;     }</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>方法都是大同小异，知道原理即可，其余的无外乎用什么工具，君子性非异也，善假于物。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Linux </tag>
            
            <tag> 集群 </tag>
            
            <tag> SCP </tag>
            
            <tag> SFTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用JavaScript写一个区块链</title>
      <link href="/2018/07/08/write-a-blockchain-in-JavaScript/"/>
      <url>/2018/07/08/write-a-blockchain-in-JavaScript/</url>
      
        <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>本文是由Savjee.be发布，JeLewine翻译。版权归原作者所有，如有侵权，请与我联系删除</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>原文：<a href="https://link.zhihu.com/?target=https://www.savjee.be/2017/07/Writing-tiny-blockchain-in-JavaScript/" target="_blank" rel="noopener">Writing a tiny blockchain in JavaScript</a><br>作者：Savjee.be<br>译者：JeLewine</p><p>几乎每个人都听说过像比特币和以太币这样的加密货币，但是只有极少数人懂得隐藏在它们背后的技术。在这篇博客中，我将会用JavaScript来创建一个简单的区块链来演示它们的内部究竟是如何工作的。我将会称之为SavjeeCoin！</p><p>全文分为三个部分：<br>part1：实现一个基本的区块链<br>part2：实现POW<br>part3：交易与挖矿奖励</p><h2 id="Part1：实现一个基本的区块链"><a href="#Part1：实现一个基本的区块链" class="headerlink" title="Part1：实现一个基本的区块链"></a>Part1：实现一个基本的区块链</h2><p>区块链</p><p>区块链是由一个个任何人都可以访问的区块构成的公共数据库。这好像没什么特别的，不过它们有一个有趣的属性：它们是不可变的。一旦一个区块被添加到区块链中，除非让剩余的其余区块失效，否则它是不会再被改变的。</p><p>这就是为什么加密货币是基于区块链的原因。你肯定不希望人们在交易完成后再变更交易！</p><p>创造一个区块</p><p>区块链是由许许多多的区块链接在一起的（这听上去好像没毛病..）。链上的区块通过某种方式允许我们检测到是否有人操纵了之前的任何区块。</p><p>那么我们如何确保数据的完整性呢？每个区块都包含一个基于其内容计算出来的hash。同时也包含了前一个区块的hash。</p><p>下面是一个区块类用JavaScript写出来大致的样子：</p><pre><code>const SHA256 = require(&quot;crypto-js/sha256&quot;);  class Block {    constructor(index, timestamp, data, previousHash = &apos;&apos;) {      this.index = index;      this.previousHash = previousHash;      this.timestamp = timestamp;      this.data = data;      this.hash = this.calculateHash();    }    calculateHash() {      return SHA256(this.index + this.previousHash + this.timestamp + JSON.stringify(this.data)).toString();    }  }  </code></pre><p>因为JavaScript中并不支持sha256所以我引入了crypto-js库。然后我定义了一个构造函数来初始化我区块的属性。每一个区块上都被赋予了index属性来告知我们这个区块在整个链上的位置。我们同时也生成了一个时间戳，以及需要在区块里存储的一些数据。最后是前一个区块的hash。</p><p>创造一个链</p><p>现在我们可以在Blockchain类中将区块链接起来了！下面是用JavaScript实现的代码：</p><pre><code>class Blockchain{    constructor() {          this.chain = [this.createGenesisBlock()];    }    createGenesisBlock() {          return new Block(0, &quot;01/01/2017&quot;, &quot;Genesis block&quot;, &quot;0&quot;);    }    getLatestBlock() {          return this.chain[this.chain.length - 1];    }    addBlock(newBlock) {          newBlock.previousHash = this.getLatestBlock().hash;          newBlock.hash = newBlock.calculateHash();          this.chain.push(newBlock);    }    isChainValid() {      for (let i = 1; i &lt; this.chain.length; i++){            const currentBlock = this.chain[i];            const previousBlock = this.chain[i - 1];            if (currentBlock.hash !== currentBlock.calculateHash()) {                      return false;            }            if (currentBlock.previousHash !== previousBlock.hash) {                  return false;            }      }          return true;    }  }  </code></pre><p>在构造函数里，我通过创建一个包含创世块的数组来初始化整个链。第一个区块是特殊的，因为它不能指向前一个区块。我还添加了下面两个方法：<br>getLatestBlock()返回我们区块链上最新的区块。<br>addBlock()负责将新的区块添加到我们的链上。为此，我们将前一个区块的hash添加到我们新的区块中。这样我们就可以保持整个链的完整性。因为只要我们变更了最新区块的内容，我们就需要重新计算它的hash。当计算完成后，我将把这个区块推进链里（一个数组）。<br>最后，我创建一个isChainValid()来确保没有人篡改过区块链。它会遍历所有的区块来检查每个区块的hash是否正确。它会通过比较previousHash来检查每个区块是否指向正确的上一个区块。如果一切都没有问题它会返回true否则会返回false。</p><p>使用区块链</p><p>我们的区块链类已经写完啦，可以真正的开始使用它了！</p><pre><code>let savjeeCoin = new Blockchain();  savjeeCoin.addBlock(new Block(1, &quot;20/07/2017&quot;, { amount: 4 }));  savjeeCoin.addBlock(new Block(2, &quot;20/07/2017&quot;, { amount: 8 }));  </code></pre><p>在这里我仅仅是创建了一个区块链的实例，并且命名它为SavjeeCoin！之后我在链上添加了一些区块。区块里可以包含任何你想要放的数据，不过在上面的代码里，我选择添加了一个带有amount属性的对象。</p><p>试着操作吧！</p><p>在介绍里我曾说过区块链是不可变的。一旦添加，区块就不可能再变更了。让我们试一下！</p><pre><code>// 检查是否有效(将会返回true)  console.log(&apos;Blockchain valid? &apos; + savjeeCoin.isChainValid());  // 现在尝试操作变更数据  savjeeCoin.chain[1].data = { amount: 100 };  // 再次检查是否有效 (将会返回false)  console.log(&quot;Blockchain valid? &quot; + savjeeCoin.isChainValid());  </code></pre><p>我会在一开始通过运行isChainValid()来验证整个链的完整性。我们操作过任何区块，所以它会返回true。</p><p>之后我将链上的第一个（索引为1）区块的数据进行了变更。之后我再次检查整个链的完整性，发现它返回了false。我们的整个链不再有效了。</p><p>结论</p><p>这个小栗子还远未达到完成的程度。它还没有实现POW（工作量证明机制）或P2P网络来与其它矿工来进行交流。</p><p>但他确实证明了区块链的工作原理。许多人认为原理会非常复杂，但这篇文章证明了区块链的基本概念是非常容易理解和实现的。</p><h2 id="Part2：实现POW-proof-of-work-工作量证明"><a href="#Part2：实现POW-proof-of-work-工作量证明" class="headerlink" title="Part2：实现POW(proof-of-work:工作量证明)"></a>Part2：实现POW(proof-of-work:工作量证明)</h2><p>在part1中我们用JavaScript创建了一个简单的区块链来演示区块链的工作原理。不过这个实现并不完整，很多人发现依旧可以篡改该系统。没错！我们的区块链需要另一种机制来抵御攻击。那么让我们来看看我们该如何做到这一点！</p><p>问题</p><p>现在我们可以很快的创造区块然后非常迅速的将它们添加进我们的区块链中。不过这导致了三个问题：<br>第一：人们可以快速创建区块然后在我们的链里塞满垃圾。大量的区块会导致我们区块链过载并让其无法使用。<br>第二：因为创建一个有效的区块太容易了，人们可以篡改链中的某一个区块，然后重新计算所有区块的hash。即使它们已经篡改了区块，他们仍然可以以有效的区块来作为结束。<br>第三：你可以通过结合上述两个破绽来有效控制区块链。区块链由p2p网络驱动，其中节点会将区块添加到可用的最长链中。所以你可以篡改区块，然后计算所有其他的区块，最后添加多任意你想要添加的区块。你最后会得到一个最长的链，所有的其它节点都会接受它然后往上添加自己的区块。<br>显然我们需要一个方案来解决这些问题：POW。</p><p>什么是POW</p><p>POW是在第一个区块链被创造之前就已经存在的一种机制。这是一项简单的技术，通过一定数量的计算来防止滥用。工作量是防止垃圾填充和篡改的关键。如果它需要大量的算力，那么填充垃圾就不再值得。</p><p>比特币通过要求hash以特定0的数目来实现POW。这也被称之为难度</p><p>不过等一下！一个区块的hash怎么可以改变呢？在比特币的场景下，一个区块包含有各种金融交易信息。我们肯定不希望为了获取正确的hash而混淆了那些数据。</p><p>为了解决这个问题，区块链添加了一个nonce值。Nonce是用来查找一个有效Hash的次数。而且，因为无法预测hash函数的输出，因此在获得满足难度条件的hash之前，只能大量组合尝试。寻找到一个有效的hash（创建一个新的区块）在圈内称之为挖矿。</p><p>在比特币的场景下，POW确保每10分钟只能添加一个区块。你可以想象垃圾填充者需要多大的算力来创造一个新区块，他们很难欺骗网络，更不要说篡改整个链。</p><p>实现POW</p><p>我们该如何实现呢？我们先来修改我们区块类并在其构造函数中添加Nonce变量。我会初始化它并将其值设置为0。</p><pre><code>constructor(index, timestamp, data, previousHash = &apos;&apos;) {    this.index = index;    this.previousHash = previousHash;    this.timestamp = timestamp;    this.data = data;    this.hash = this.calculateHash();    this.nonce = 0;  }  </code></pre><p>我们还需要一个新的方法来增加Nonce，直到我们获得一个有效hash。强调一下，这是由难度决定的。所以我们会收到作为参数的难度。</p><pre><code>mineBlock(difficulty) {      while (this.hash.substring(0, difficulty) !== Array(difficulty + 1).join(&quot;0&quot;)) {          this.nonce++;          this.hash = this.calculateHash();      }      console.log(&quot;BLOCK MINED: &quot; + this.hash);  }  </code></pre><p>最后，我们还需要更改一下calculateHash()函数。因为目前他还没有使用Nonce来计算hash。</p><pre><code>calculateHash() {    return SHA256(this.index +      this.previousHash +      this.timestamp +      JSON.stringify(this.data) +      this.nonce    ).toString();  }  </code></pre><p>将它们结合在一起，你会得到如下所示的区块类：</p><pre><code>class Block {    constructor(index, timestamp, data, previousHash = &apos;&apos;) {      this.index = index;      this.previousHash = previousHash;      this.timestamp = timestamp;      this.data = data;      this.hash = this.calculateHash();      this.nonce = 0;    }    calculateHash() {      return SHA256(this.index + this.previousHash + this.timestamp + JSON.stringify(this.data) + this.nonce).toString();    }    mineBlock(difficulty) {      while (this.hash.substring(0, difficulty) !== Array(difficulty + 1).join(&quot;0&quot;)) {        this.nonce++;        this.hash = this.calculateHash();      }      console.log(&quot;BLOCK MINED: &quot; + this.hash);    }  } </code></pre><p>修改区块链</p><p>现在，我们的区块已经拥有Nonce并且可以被开采了，我们还需要确保我们的区块链支持这种新的行为。让我们先在区块链中添加一个新的属性来跟踪整条链的难度。我会将它设置为2（这意味着区块的hash必须以2个0开头）。</p><pre><code>constructor() {    this.chain = [this.createGenesisBlock()];    this.difficulty = 2;  }  </code></pre><p>现在剩下要做的就是改变addBlock()方法，以便在将其添加到链中之前确保实际挖到该区块。下面我们将难度传给区块。</p><pre><code>addBlock(newBlock) {    newBlock.previousHash = this.getLatestBlock().hash;    newBlock.mineBlock(this.difficulty);    this.chain.push(newBlock);  }  </code></pre><p>大功告成！我们的区块链现在拥有了POW来抵御攻击了。</p><p>测试</p><p>现在让我们来测试一下我们的区块链，看看在POW下添加一个新区块会有什么效果。我将会使用之前的代码。我们将创建一个新的区块链实例然后往里添加2个区块。</p><pre><code>let savjeeCoin = new Blockchain();  console.log(&apos;Mining block 1&apos;);  savjeeCoin.addBlock(new Block(1, &quot;20/07/2017&quot;, { amount: 4 }));  console.log(&apos;Mining block 2&apos;);  savjeeCoin.addBlock(new Block(2, &quot;20/07/2017&quot;, { amount: 8 }));  </code></pre><p>如果你运行了上面的代码，你会发现添加新区块依旧非常快。这是因为目前的难度只有2（或者你的电脑性能非常好）。</p><p>如果你创建了一个难度为5的区块链实例，你会发现你的电脑会花费大概十秒钟来挖矿。随着难度的提升，你的防御攻击的保护程度越高。</p><p>免责声明</p><p>就像之前说的：这绝不是一个完整的区块链。它仍然缺少很多功能（像P2P网路）。这只是为了说明区块链的工作原理。</p><p>并且：由于单线程的原因，用JavaScript来挖矿并不快。</p><h2 id="Part3：交易与挖矿奖励"><a href="#Part3：交易与挖矿奖励" class="headerlink" title="Part3：交易与挖矿奖励"></a>Part3：交易与挖矿奖励</h2><p>在前面两部分我们创建了一个简单的区块链，并且加入了POW来抵御攻击。然而我们在途中也偷了懒：我们的区块链只能在一个区块中存储一笔交易，而且矿工没有奖励。现在，让我们解决这个问题！</p><p>重构区块类</p><p>现在一个区块拥有index,previousHash,timestamp,data,hash和nonce属性。这个index属性并不是很有用，事实上我甚至不知道为什么开始我要将它添加进去。所以我把它移除了，同时将data改名为transactions来更语义化。</p><pre><code>class Block{    constructor(timestamp, transactions, previousHash = &apos;&apos;) {      this.previousHash = previousHash;      this.timestamp = timestamp;      this.transactions = transactions;      this.hash = this.calculateHash();      this.nonce = 0;    }  } </code></pre><p>当我们改变区块类时，我们也必须更改calculateHash()函数。现在它还在使用老旧的index和data属性。</p><pre><code>calculateHash() {    return SHA256(this.previousHash + this.timestamp + JSON.stringify(this.transactions) + this.nonce).toString();  }  </code></pre><p>交易类</p><p>在区块内，我们将可以存储多笔交易。因此我们还需要定义一个交易类，一边我们可以锁定交易应当具有的属性：<br>代码</p><pre><code>class Transaction{    constructor(fromAddress, toAddress, amount){      this.fromAddress = fromAddress;      this.toAddress = toAddress;      this.amount = amount;    }  }  </code></pre><p>这个交易例子非常的简单，仅仅包含了发起方（fromAddress）和接受方（toAddress）以及数量。如果有需求，你也可以在里面加入更多字段，不过这个只是为了最小实现。</p><p>调整我们的区块链</p><p>当前的最大任务：调整我们的区块链来适应这些新变化。我们需要做的第一件事就是存储待处理交易的地方。</p><p>正如你所知道的，由于POW，区块链可以稳定的创建区块。在比特币的场景下，难度被设置成大约每10分钟创建一个新区块。但是，是可以在创造两个区块之间提交新的交易。</p><p>为了做到这一点，首先需要改变我们区块链的构造函数，以便他可以存储待处理的交易。我们还将创造一个新的属性，用于定义矿工获得多少钱作为奖励：</p><pre><code>class Blockchain{    constructor() {      this.chain = [this.createGenesisBlock()];      this.difficulty = 5;      // 在区块产生之间存储交易的地方      this.pendingTransactions = [];      // 挖矿回报      this.miningReward = 100;    }  } </code></pre><p>下一步，我们将调整我们的addBlock()方法。不过我的调整是指删掉并重写它！我们将不再允许人们直接为链上添加区块。相反，他们必须将交易添加至下一个区块中。而且我们将addBlock()更名为createTransaction()，这看起来更语义化：</p><pre><code>createTransaction(transaction) {    // 这里应该有一些校验!    // 推入待处理交易数组    this.pendingTransactions.push(transaction);  }  </code></pre><p>挖矿</p><p>人们现在可以将新的交易添加到待处理交易的列表中。但无论如何，我们需要将他们清理掉并移入实际的区块中。为此，我们来创建一个minePendingTransactions()方法。这个方法不仅会挖掘所有待交易的新区块，而且还会向采矿者发送奖励。</p><pre><code>minePendingTransactions(miningRewardAddress) {    // 用所有待交易来创建新的区块并且开挖..    let block = new Block(Date.now(), this.pendingTransactions);    block.mineBlock(this.difficulty);    // 将新挖的看矿加入到链上    this.chain.push(block);    // 重置待处理交易列表并且发送奖励    this.pendingTransactions = [        new Transaction(null, miningRewardAddress, this.miningReward)    ];  }  </code></pre><p>请注意，该方法采用了参数miningRewardAddress。如果你开始挖矿，你可以将你的钱包地址传递给此方法。一旦成功挖到矿，系统将创建一个新的交易来给你挖矿奖励（在这个栗子里是100枚币）。</p><p>有一点需要注意的是，在这个栗子中，我们将所有待处理交易一并添加到一个区块中。但实际上，由于区块的大小是有限制的，所以这是行不通的。在比特币里，一个区块的大小大概是2Mb。如果有更多的交易能够挤进一个区块，那么矿工可以选择哪些交易达成哪些交易不达成（通常情况下费用更高的交易容易获胜）。</p><p>地址的余额</p><p>在测试我们的代码钱让我们再做一件事！如果能够检查我们区块链上地址的余额将会更好。</p><pre><code>getBalanceOfAddress(address){    let balance = 0; // you start at zero!    // 遍历每个区块以及每个区块内的交易    for(const block of this.chain){      for(const trans of block.transactions){        // 如果地址是发起方 -&gt; 减少余额        if(trans.fromAddress === address){          balance -= trans.amount;        }        // 如果地址是接收方 -&gt; 增加余额        if(trans.toAddress === address){          balance += trans.amount;        }      }    }    return balance;  }  </code></pre><p>测试</p><p>好吧，我们已经完成并可以最终一切是否可以正常工作！为此，我们创建了一些交易：</p><pre><code>let savjeeCoin = new Blockchain();  console.log(&apos;Creating some transactions...&apos;);  savjeeCoin.createTransaction(new Transaction(&apos;address1&apos;, &apos;address2&apos;, 100));  savjeeCoin.createTransaction(new Transaction(&apos;address2&apos;, &apos;address1&apos;, 50));  </code></pre><p>这些交易目前都处于等待状态，为了让他们得到证实，我们必须开始挖矿：</p><pre><code>console.log(&apos;Starting the miner...&apos;);  savjeeCoin.minePendingTransactions(&apos;xaviers-address&apos;);  </code></pre><p>当我们开始挖矿，我们也会传递一个我们想要获得挖矿奖励的地址。在这种情况下，我的地址是xaviers-address（非常复杂！）。</p><p>之后，让我们检查一下xaviers-address的账户余额：</p><pre><code>console.log(&apos;Balance of Xaviers address is&apos;, savjeeCoin.getBalanceOfAddress(&apos;xaviers-address&apos;));  // 输出: 0</code></pre><p>我的账户输出竟然是0？！等等，为什么？难道我不应该得到我的挖矿奖励么？那么，如果你仔细观察代码，你会看到系统会创建一个交易，然后将您的挖矿奖励添加为新的待处理交易。这笔交易将会包含在下一个区块中。所以如果我们再次开始挖矿，我们将收到我们的100枚硬币奖励！</p><pre><code>console.log(&apos;Starting the miner again!&apos;);  savjeeCoin.minePendingTransactions(&quot;xaviers-address&quot;);  console.log(&apos;Balance of Xaviers address is&apos;, savjeeCoin.getBalanceOfAddress(&apos;xaviers-address&apos;));  // 输出: 100</code></pre><p>局限性与结论</p><p>现在我们的区块链已经可以在一个区块上存储多笔交易，并且可以为矿工带来回报。</p><p>不过，还是有一些不足：发送货币是，我们不检查发起人是否有足够的余额来实际进行交易。然而，这其实是一件容易解决的事情。我们也没有创建一个新的钱包和签名交易（传统上用公钥/私钥加密完成）。</p><p>免责声明 &amp; 源代码</p><p>我想指出的是，这绝不是一个完整的区块链实现！它仍然缺少很多功能。这只是为了验证一些概念来帮助您来了解区块链的工作原理。</p><p>该项目的源代码就放在我的<a href="https://link.zhihu.com/?target=https://github.com/SavjeeTutorials/SavjeeCoin" target="_blank" rel="noopener">GitHub</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
            <tag> POW </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Redis(三)：分布式锁的应用</title>
      <link href="/2018/06/15/about-redis-three-Distributed-lock/"/>
      <url>/2018/06/15/about-redis-three-Distributed-lock/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为平时工作中，线上服务器是分布式多台部署的，经常会遇到解决分布式场景下数据一致性的问题，这种情况就需要利用分布式锁解决这些问题。网上部分相关文章有误人子弟嫌疑，本文结合网上资料和个人实践得出，特此记录方便以后自己查阅，同时也希望能帮助他人。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="什么是锁"><a href="#什么是锁" class="headerlink" title="什么是锁"></a>什么是锁</h3><p>锁就是让我们的系统有序的去对共享资源进行操作，通过互斥来保持数据的一致性。</p><p>在单机时代，虽然不需要分布式锁，但也面临过类似的问题，只不过在单机的情况下，如果有多个线程要同时访问某个共享资源的时候，我们可以采用线程间加锁的机制，即当某个线程获取到这个资源后，就立即对这个资源进行加锁，当使用完资源之后，再解锁，其它线程就可以接着使用了。例如，比如Java中的synchronize和Lock。</p><p>但是到了分布式系统的时代，这种线程之间的锁机制，就没作用了，系统可能会有多份并且部署在不同的机器上，这些资源已经不是在线程之间共享了，而是属于进程之间共享的资源。</p><p>因此，为了解决这个问题，我们就必须引入了分布式锁。</p><p>分布式锁，是指在分布式的部署环境下，通过锁机制来让多客户端互斥的对共享资源进行访问。</p><h3 id="为什么需要分布式锁"><a href="#为什么需要分布式锁" class="headerlink" title="为什么需要分布式锁"></a>为什么需要分布式锁</h3><p>比如我们在网上抢商品时，点击购买后会先查询库存，库存大于1，才会下单，下单成功，库存减1。假设当前商品数为1，A进入之后查询数据库余量为1，因为网络或者业务原因，A的下单过程过慢，B进入时查询余量也为1，最后导致的结果就是A和B同时抢购成功，库存变为-1，此时就产生了脏数据，至于后果，不用多说，所以我们需要分布式锁来保证数据的一致性。</p><h3 id="需要什么样的锁"><a href="#需要什么样的锁" class="headerlink" title="需要什么样的锁"></a>需要什么样的锁</h3><ol><li>排他（互斥）性：在任意时刻，只有一个客户端能持有锁。</li><li>安全性：只有加锁的服务才能有解锁权限。</li><li>阻塞锁特性：即没有获取到锁，则继续等待获取锁。(根据业务需求)</li><li>非阻塞锁特性：即没有获取到锁，则直接返回获取锁失败。(根据业务需求)</li><li>锁失效机制：网络中断或宕机无法释放锁时，锁必须被删除，防止死锁。</li><li>可重入特性：一个线程中可以多次获取同一把锁，比如一个线程在执行一个带锁的方法，该方法中又调用了另一个需要相同锁的方法，则该线程可以直接执行调用的方法，而无需重新获得锁。</li></ol><p>注意：不管加锁还是解锁都要保证原子性。</p><h3 id="分布式锁有哪些实现方法"><a href="#分布式锁有哪些实现方法" class="headerlink" title="分布式锁有哪些实现方法"></a>分布式锁有哪些实现方法</h3><p>目前主流的有三种，从实现的复杂度上来看，从上往下难度依次增加：</p><ol><li>基于数据库实现（乐观锁 、悲观锁）</li><li>基于缓存实现（本文只讲非集群Redis）</li><li>基于ZooKeeper实现</li></ol><h2 id="分布式锁实现"><a href="#分布式锁实现" class="headerlink" title="分布式锁实现"></a>分布式锁实现</h2><h3 id="方法一：数据库（乐观锁）"><a href="#方法一：数据库（乐观锁）" class="headerlink" title="方法一：数据库（乐观锁）"></a>方法一：数据库（乐观锁）</h3><p>这个策略源于 mysql 的 mvcc 机制，使用这个策略其实本身没有什么问题，唯一的问题就是对数据表侵入较大，我们要为每个表设计一个版本号字段，然后写一条判断 sql 每次进行判断，增加了数据库操作的次数，在高并发的要求下，对数据库连接的开销也是无法忍受的。</p><blockquote><p>乐观锁通常实现基于数据版本(version)的记录机制实现的，比如有一张红包表（t_bonus），有一个字段(left_count)记录礼物的剩余个数，用户每领取一个奖品，对应的left_count减1，在并发的情况下如何要保证left_count不为负数，乐观锁的实现方式为在红包表上添加一个版本号字段（version），默认为0。</p></blockquote><p>异常实现流程</p><pre><code>-- 可能会发生的异常情况-- 线程1查询，当前left_count为1，则有记录select * from t_bonus where id = 10001 and left_count &gt; 0-- 线程2查询，当前left_count为1，也有记录select * from t_bonus where id = 10001 and left_count &gt; 0-- 线程1完成领取记录，修改left_count为0,update t_bonus set left_count = left_count - 1 where id = 10001-- 线程2完成领取记录，修改left_count为-1，产生脏数据update t_bonus set left_count = left_count - 1 where id = 10001</code></pre><p>通过乐观锁实现</p><pre><code>-- 添加版本号控制字段ALTER TABLE table ADD COLUMN version INT DEFAULT &apos;0&apos; NOT NULL AFTER t_bonus;-- 线程1查询，当前left_count为1，则有记录，当前版本号为1234select left_count, version from t_bonus where id = 10001 and left_count &gt; 0-- 线程2查询，当前left_count为1，有记录，当前版本号为1234select left_count, version from t_bonus where id = 10001 and left_count &gt; 0-- 线程1,更新完成后当前的version为1235，update状态为1，更新成功update t_bonus set version = 1235, left_count = left_count-1 where id = 10001 and version = 1234-- 线程2,更新由于当前的version为1235，udpate状态为0，更新失败，再针对相关业务做异常处理update t_bonus set version = 1235, left_count = left_count-1 where id = 10001 and version = 1234</code></pre><h3 id="方法二：基于缓存（Redis）"><a href="#方法二：基于缓存（Redis）" class="headerlink" title="方法二：基于缓存（Redis）"></a>方法二：基于缓存（Redis）</h3><p>依赖引入，直接用redis官网原生。</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;redis.clients&lt;/groupId&gt;    &lt;artifactId&gt;jedis&lt;/artifactId&gt;    &lt;version&gt;2.9.0&lt;/version&gt;&lt;/dependency&gt;</code></pre><h4 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h4><pre><code>@Resource    private JedisPool jedisPool;    private static final String LOCK_SUCCESS;    private static final String SET_IF_NOT_EXIST;    private static final String SET_WITH_EXPIRE_TIME;    private static final Long RELEASE_SUCCESS = 1L;    public static final String UNLOCK_LUA;    static {        StringBuilder sb = new StringBuilder();        sb.append(&quot;if redis.call(\&quot;get\&quot;,KEYS[1]) == ARGV[1] &quot;);        sb.append(&quot;then &quot;);        sb.append(&quot;    return redis.call(\&quot;del\&quot;,KEYS[1]) &quot;);        sb.append(&quot;else &quot;);        sb.append(&quot;    return 0 &quot;);        sb.append(&quot;end &quot;);        UNLOCK_LUA = sb.toString();        LOCK_SUCCESS = &quot;OK&quot;;        SET_IF_NOT_EXIST = &quot;NX&quot;;        SET_WITH_EXPIRE_TIME = &quot;PX&quot;;    }</code></pre><p>尝试获取分布式锁</p><pre><code>/**  * 尝试获取分布式锁  *  * @param lockKey    锁  * @param requestId  请求标识  * @param expireTime 超期时间  * @return 是否获取成功  */ public boolean tryGetLock(String lockKey, String requestId, long expireTime) {     Jedis jedis = getJedis();     try {         String result = jedis.set(lockKey, requestId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);         if (LOCK_SUCCESS.equals(result)) {             return true;         }         return false;     } catch (Exception e) {         logger.error(&quot;set redis occured an exception&quot;, e);     } finally {         returnJedis(jedis);     }     return false; }</code></pre><p>上述代码可以看出我们加锁就一行代码：<code>jedis.set(String key, String value, String nxxx, String expx, int time)</code>，这个set()方法一共有五个形参：</p><ol><li>第一个为key，我们使用key来当锁，因为key是唯一的。</li><li>第二个为value，我们传的是requestId，有人可能有疑问，有key作为锁不就够了吗，为什么还要用到value？原因就是我们在上面讲到安全性时，通过给value赋值为requestId，我们就知道这把锁是哪个请求加的了，在解锁的时候就可以有依据。requestId可以使用UUID.randomUUID().toString()方法生成。</li><li>第三个为nxxx，这个参数我们填的是NX，意思是SET IF NOT  EXIST，即当key不存在时，我们进行set操作；若key已经存在，则不做任何操作；</li><li>第四个为expx，这个参数我们传的是PX，意思是我们要给这个key加一个过期的设置，具体时间由第五个参数决定。</li><li>第五个为time，与第四个参数相呼应，代表key的过期时间。</li></ol><p>总的来说，执行上面的set()方法就只会导致两种结果：1. 当前没有锁（key不存在），那么就进行加锁操作，并对锁设置个有效期，同时value表示加锁的客户端。2. 已有锁存在，不做任何操作。</p><p>首先，set()加入了NX参数，可以保证如果已有key存在，则函数不会调用成功，也就是只有一个客户端能持有锁，满足互斥性。<br>其次，由于我们对锁设置了过期时间，即使锁的持有者后续发生崩溃而没有解锁，锁也会因为到了过期时间而自动解锁（即key被删除），不会发生死锁，也满足了锁失效机制。<br>最后，因为我们将value赋值为requestId，代表加锁的客户端请求标识，那么在客户端在解锁的时候就可以进行校验是否是同一个客户端。<br><strong>但是这里还是会有一个问题就是，网上很多文章都没有讲到，如果某些原因导致线程A执行的很慢很慢，过了30秒（过期时间）都没执行完，这时候锁过期自动释放，线程B得到了锁。怎么办呢？我们可以让获得锁的线程开启一个守护线程，用来给快要过期的锁“续航”，当过去了29秒，线程A还没执行完，这时候守护线程会执行expire指令，为这把锁“续命”20秒。守护线程从第29秒开始执行，每20秒执行一次。如果节点1 忽然断电，由于线程A和守护线程在同一个进程，守护线程也会停下。这把锁到了超时的时候，没人给它续命，也就自动释放了。</strong></p><p>由于我们只考虑Redis单机部署的场景，所以容错性我们暂不考虑。</p><p>错误示例1<br>比较常见的错误示例就是使用jedis.setnx()和jedis.expire()组合实现加锁，代码如下：</p><pre><code>public static void wrongGetLock1(Jedis jedis, String lockKey, String requestId, int expireTime) {    Long result = jedis.setnx(lockKey, requestId);    if (result == 1) {        // 若在这里程序突然崩溃，则无法设置过期时间，将发生死锁        jedis.expire(lockKey, expireTime);    }}</code></pre><p>setnx()方法作用就是SET IF NOT EXIST，expire()方法就是给锁加一个过期时间。乍一看好像和前面的set()方法结果一样，然而由于这是两条Redis命令，不具有原子性，如果程序在执行完setnx()之后突然崩溃，导致锁没有设置过期时间。那么将会发生死锁。网上之所以有人这样实现，是因为低版本的jedis并不支持多参数的set()方法。</p><p>错误示例2</p><pre><code>public static boolean wrongGetLock2(Jedis jedis, String lockKey, int expireTime) {    long expires = System.currentTimeMillis() + expireTime;    String expiresStr = String.valueOf(expires);    // 如果当前锁不存在，返回加锁成功    if (jedis.setnx(lockKey, expiresStr) == 1) {        return true;    }    // 如果锁存在，获取锁的过期时间    String currentValueStr = jedis.get(lockKey);    if (currentValueStr != null &amp;&amp; Long.parseLong(currentValueStr) &lt; System.currentTimeMillis()) {        // 锁已过期，获取上一个锁的过期时间，并设置现在锁的过期时间        String oldValueStr = jedis.getSet(lockKey, expiresStr);        if (oldValueStr != null &amp;&amp; oldValueStr.equals(currentValueStr)) {            // 考虑多线程并发的情况，只有一个线程的设置值和当前值相同，它才有权利加锁            return true;        }    }    // 其他情况，一律返回加锁失败    return false;}</code></pre><p>这一种错误示例就比较难以发现问题，而且实现也比较复杂。实现思路：使用jedis.setnx()命令实现加锁，其中key是锁，value是锁的过期时间。执行过程：1. 通过setnx()方法尝试加锁，如果当前锁不存在，返回加锁成功。2. 如果锁已经存在则获取锁的过期时间，和当前时间比较，如果锁已经过期，则设置新的过期时间，返回加锁成功。</p><p>那么这段代码问题在哪里？1. 由于是客户端自己生成过期时间，所以需要强制要求分布式下每个客户端的时间必须同步。 2. 当锁过期的时候，如果多个客户端同时执行jedis.getSet()方法，那么虽然最终只有一个客户端可以加锁，但是这个客户端的锁的过期时间可能被其他客户端覆盖。3. 锁不具备拥有者标识，即任何客户端都可以解锁。</p><h4 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h4><pre><code>/**     * 释放分布式锁     *     * @param lockKey   锁     * @param requestId 请求标识     * @return 是否释放成功     */    public boolean releaseLock(String lockKey, String requestId) {        // 释放锁的时候，有可能因为持锁之后方法执行时间大于锁的有效期，此时有可能已经被另外一个线程持有锁，所以不能直接删除        Jedis jedis = getJedis();        try {            List&lt;String&gt; keys = Collections.singletonList(lockKey);            List&lt;String&gt; args = Collections.singletonList(requestId);            // 使用lua脚本删除redis中匹配value的key，可以避免由于方法执行时间过长而redis锁自动过期失效的时候误删其他线程的锁            // spring自带的执行脚本方法中，集群模式直接抛出不支持执行脚本的异常，所以只能拿到原redis的connection来执行脚本            Long result = (Long) jedis.eval(UNLOCK_LUA, keys, args);            return RELEASE_SUCCESS.equals(result);        } catch (Exception e) {            logger.error(&quot;release lock occured an exception&quot;, e);        } finally {            returnJedis(jedis);        }        return false;    }</code></pre><p>可以看到，我们解锁只需要两行代码就搞定了！第一行代码，我们写了一个简单的Lua脚本代码，上一次见到这个编程语言还是在《黑客与画家》里，没想到这次居然用上了。第二行代码，我们将Lua代码传到jedis.eval()方法里，并使参数KEYS[1]赋值为lockKey，ARGV[1]赋值为requestId。eval()方法是将Lua代码交给Redis服务端执行。</p><p>那么这段Lua代码的功能是什么呢？其实很简单，首先获取锁对应的value值，检查是否与requestId相等，如果相等则删除锁（解锁）。那么为什么要使用Lua语言来实现呢？因为要确保上述操作是原子性的。关于非原子性会带来什么问题，可以阅读【解锁代码-错误示例2】 。那么为什么执行eval()方法可以确保原子性，源于Redis的特性，下面是官网对eval命令的部分解释：</p><blockquote><p>简单来说，就是在eval命令执行Lua代码的时候，Lua代码将被当成一个命令去执行，并且直到eval命令执行完成，Redis才会执行其他命令。</p></blockquote><p>错误示例1<br>最常见的解锁代码就是直接使用jedis.del()方法删除锁，这种不先判断锁的拥有者而直接解锁的方式，会导致任何客户端都可以随时进行解锁，即使这把锁不是它的。</p><pre><code>public static void wrongReleaseLock1(Jedis jedis, String lockKey) {    jedis.del(lockKey);}</code></pre><p>错误示例2<br>这种解锁代码乍一看也是没问题，甚至我之前也差点这样实现，与正确姿势差不多，唯一区别的是分成两条命令去执行，代码如下：</p><pre><code>public static void wrongReleaseLock2(Jedis jedis, String lockKey, String requestId) {    // 判断加锁与解锁是不是同一个客户端    if (requestId.equals(jedis.get(lockKey))) {        // 若在此时，这把锁突然不是这个客户端的，则会误解锁        jedis.del(lockKey);    }}</code></pre><p>如代码注释，问题在于如果调用jedis.del()方法的时候，这把锁已经不属于当前客户端的时候会解除他人加的锁。那么是否真的有这种场景？答案是肯定的，比如客户端A加锁，一段时间之后客户端A解锁，在执行jedis.del()之前，锁突然过期了，此时客户端B尝试加锁成功，然后客户端A再执行del()方法，则将客户端B的锁给解除了。</p><h3 id="方法三：ZooKeeper"><a href="#方法三：ZooKeeper" class="headerlink" title="方法三：ZooKeeper"></a>方法三：ZooKeeper</h3><p>后面有时间补充吧，太懒了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文<strong>主要</strong>介绍了如何使用Java代码正确实现Redis分布式锁，对于加锁和解锁也分别给出了两个比较经典的错误示例。被这两个错误示例坑惨了（小声哔哔），互联网虽然给我们带来了方便，但也不能失去应有的质疑精神，多想多验证。</p><p>如果你的项目中Redis是多机部署的，那么可以尝试使用Redisson实现分布式锁，这是Redis官方提供的Java组件。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> noSql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Redis(二)：Jedis与RedisTemplate</title>
      <link href="/2018/05/08/about-redis-two-Jedis-and-RedisTemplate/"/>
      <url>/2018/05/08/about-redis-two-Jedis-and-RedisTemplate/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Jedis与RedisTemplate都是面向Java操作Redis的客户端，刚开始一直傻傻分不清，特此记录一下。</p><h2 id="Jedis与RedisTemplate的出身"><a href="#Jedis与RedisTemplate的出身" class="headerlink" title="Jedis与RedisTemplate的出身"></a>Jedis与RedisTemplate的出身</h2><p>Jedis是Redis官方推荐的面向Java的操作Redis的客户端，而RedisTemplate是SpringDataRedis中对JedisApi的高度封装。<br>SpringDataRedis相对于Jedis来说可以方便地更换Redis的Java客户端，比Jedis多了自动管理连接池的特性，方便与其他Spring框架进行搭配使用如：SpringCache。</p><h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><h3 id="引入pom依赖"><a href="#引入pom依赖" class="headerlink" title="引入pom依赖"></a>引入pom依赖</h3><p>RedisTemplate 的依赖</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><p>Jedis依赖</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;redis.clients&lt;/groupId&gt;     &lt;artifactId&gt;jedis&lt;/artifactId&gt;     &lt;version&gt;2.9.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt;     &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;     &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;     &lt;version&gt;2.5.0&lt;/version&gt; &lt;/dependency&gt;</code></pre><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre><code>#Redis数据库索引（默认为0）  redis:    database: 0  # Redis服务器地址    host: 127.0.0.1  # Redis服务器连接端口    port: 6379  # Redis服务器连接密码（默认为空）    password: 123456    # 连接超时时间（毫秒）    timeout: 1000    # 连接池最大连接数（使用负值表示没有限制）    jedis:      pool:        max-active: 8      # 连接池最大阻塞等待时间（使用负值表示没有限制）        max-wait: -1      # 连接池中的最大空闲连接        max-idle: 10      # 连接池中的最小空闲连接        min-idle: 0</code></pre><h3 id="bean注入"><a href="#bean注入" class="headerlink" title="bean注入"></a>bean注入</h3><p>RedisTemplate 注入</p><pre><code>@Bean@SuppressWarnings(&quot;all&quot;)public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory factory) {    RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;String, Object&gt;();    template.setConnectionFactory(factory);    Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);    ObjectMapper om = new ObjectMapper();    om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);    om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);    jackson2JsonRedisSerializer.setObjectMapper(om);    StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();    // key采用String的序列化方式    template.setKeySerializer(stringRedisSerializer);    // hash的key也采用String的序列化方式    template.setHashKeySerializer(stringRedisSerializer);    // value序列化方式采用jackson    template.setValueSerializer(jackson2JsonRedisSerializer);    // hash的value序列化方式采用jackson    template.setHashValueSerializer(jackson2JsonRedisSerializer);    template.afterPropertiesSet();    return template;}</code></pre><p>JedisPool 注入</p><pre><code>@Value(&quot;${spring.redis.host}&quot;)   private String host;   @Value(&quot;${spring.redis.port}&quot;)   private int port;   @Value(&quot;${spring.redis.timeout}&quot;)   private int timeout;   @Value(&quot;${spring.redis.password}&quot;)   private String password;   @Value(&quot;${spring.redis.jedis.pool.max-active}&quot;)   private int maxActive;   @Value(&quot;${spring.redis.jedis.pool.max-idle}&quot;)   private int maxIdle;   @Value(&quot;${spring.redis.jedis.pool.min-idle}&quot;)   private int minIdle;   @Value(&quot;${spring.redis.jedis.pool.max-wait}&quot;)   private long maxWaitMillis;   @Bean   public JedisPool redisPoolFactory() {       JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();       jedisPoolConfig.setMaxIdle(maxIdle);       jedisPoolConfig.setMaxWaitMillis(maxWaitMillis);       jedisPoolConfig.setMaxTotal(maxActive);       jedisPoolConfig.setMinIdle(minIdle);       JedisPool jedisPool = new JedisPool(jedisPoolConfig, host, port, timeout, password);       return jedisPool;   }</code></pre><h3 id="帮助类"><a href="#帮助类" class="headerlink" title="帮助类"></a>帮助类</h3><p>RedisTemplate帮助类</p><pre><code>package com.zbsoft.common.util;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.stereotype.Component;import org.springframework.util.CollectionUtils;import javax.annotation.Resource;import java.util.List;import java.util.Map;import java.util.Set;import java.util.concurrent.TimeUnit;/** * Redis工具类 * * @author zhouhy * @date 2018年4月7日 */@Componentpublic class RedisUtil {    @Resource    private RedisTemplate&lt;String, Object&gt; redisTemplate;    /**     * 指定缓存失效时间     *     * @param key  键     * @param time 时间(秒)     * @return 30     */    public boolean expire(String key, long time) {        try {            if (time &gt; 0) {                redisTemplate.expire(key, time, TimeUnit.SECONDS);            }            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 根据key 获取过期时间     *     * @param key 键 不能为null     * @return 时间(秒) 返回0代表为永久有效     */    public long getExpire(String key) {        return redisTemplate.getExpire(key, TimeUnit.SECONDS);    }    /**     * 判断key是否存在     *     * @param key 键     * @return true 存在 false不存在     */    public boolean hasKey(String key) {        try {            return redisTemplate.hasKey(key);        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 删除缓存     *     * @param key 可以传一个值 或多个     */    @SuppressWarnings(&quot;unchecked&quot;)    public void del(String... key) {        if (key != null &amp;&amp; key.length &gt; 0) {            if (key.length == 1) {                redisTemplate.delete(key[0]);            } else {                redisTemplate.delete(CollectionUtils.arrayToList(key));            }        }    }    // ============================String=============================    /**     * 普通缓存获取     *     * @param key 键     * @return 值     */    public Object get(String key) {        return key == null ? null : redisTemplate.opsForValue().get(key);    }    /**     * 普通缓存放入     *     * @param key   键     * @param value 值     * @return true成功 false失败     */    public boolean set(String key, Object value) {        try {            redisTemplate.opsForValue().set(key, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 普通缓存放入并设置时间     *     * @param key   键     * @param value 值     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期     * @return true成功 false 失败     */    public boolean set(String key, Object value, long time) {        try {            if (time &gt; 0) {                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);            } else {                set(key, value);            }            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 递增     *     * @param key   键     * @param delta 要增加几(大于0)     * @return 134     */    public long incr(String key, long delta) {        if (delta &lt; 0) {            throw new RuntimeException(&quot;递增因子必须大于0&quot;);        }        return redisTemplate.opsForValue().increment(key, delta);    }    /**     * 递减     *     * @param key   键     * @param delta 要减少几(小于0)     * @return 147     */    public long decr(String key, long delta) {        if (delta &lt; 0) {            throw new RuntimeException(&quot;递减因子必须大于0&quot;);        }        return redisTemplate.opsForValue().increment(key, -delta);    }    // ================================Map=================================    /**     * HashGet     *     * @param key  键 不能为null     * @param item 项 不能为null     * @return 值     **/    public Object hget(String key, String item) {        return redisTemplate.opsForHash().get(key, item);    }    /**     * 获取hashKey对应的所有键值     *     * @param key 键     * @return 对应的多个键值     */    public Map&lt;Object, Object&gt; hmget(String key) {        return redisTemplate.opsForHash().entries(key);    }    /**     * HashSet     *     * @param key 键     * @param map 对应多个键值     * @return true 成功 false 失败     */    public boolean hmset(String key, Map&lt;String, Object&gt; map) {        try {            redisTemplate.opsForHash().putAll(key, map);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * HashSet 并设置时间     *     * @param key  键     * @param map  对应多个键值     * @param time 时间(秒)     * @return true成功 false失败     */    public boolean hmset(String key, Map&lt;String, Object&gt; map, long time) {        try {            redisTemplate.opsForHash().putAll(key, map);            if (time &gt; 0) {                expire(key, time);            }            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @return true 成功 false失败     */    public boolean hset(String key, String item, Object value) {        try {            redisTemplate.opsForHash().put(key, item, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @param time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间     * @return true 成功 false失败     */    public boolean hset(String key, String item, Object value, long time) {        try {            redisTemplate.opsForHash().put(key, item, value);            if (time &gt; 0) {                expire(key, time);            }            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 删除hash表中的值     *     * @param key  键 不能为null     * @param item 项 可以使多个 不能为null     */    public void hdel(String key, Object... item) {        redisTemplate.opsForHash().delete(key, item);    }    /**     * 判断hash表中是否有该项的值     *     * @param key  键 不能为null     * @param item 项 不能为null     * @return true 存在 false不存在     */    public boolean hHasKey(String key, String item) {        return redisTemplate.opsForHash().hasKey(key, item);    }    /**     * hash递增 如果不存在,就会创建一个 并把新增后的值返回     *     * @param key  键     * @param item 项     * @param by   要增加几(大于0)     * @return     */    public double hincr(String key, String item, double by) {        return redisTemplate.opsForHash().increment(key, item, by);    }    /**     * hash递减     *     * @param key  键     * @param item 项     * @param by   要减少记(小于0)     * @return     */    public double hdecr(String key, String item, double by) {        return redisTemplate.opsForHash().increment(key, item, -by);    }    // ============================set=============================    /**     * 根据key获取Set中的所有值     *     * @param key 键     * @return 295     */    public Set&lt;Object&gt; sGet(String key) {        try {            return redisTemplate.opsForSet().members(key);        } catch (Exception e) {            e.printStackTrace();            return null;        }    }    /**     * 根据value从一个set中查询,是否存在     *     * @param key   键     * @param value 值     * @return true 存在 false不存在     */    public boolean sHasKey(String key, Object value) {        try {            return redisTemplate.opsForSet().isMember(key, value);        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 将数据放入set缓存     *     * @param key    键     * @param values 值 可以是多个     * @return 成功个数     */    public long sSet(String key, Object... values) {        try {            return redisTemplate.opsForSet().add(key, values);        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }    /**     * 将set数据放入缓存     *     * @param key    键     * @param time   时间(秒)     * @param values 值 可以是多个     * @return 成功个数     */    public long sSetAndTime(String key, long time, Object... values) {        try {            Long count = redisTemplate.opsForSet().add(key, values);            if (time &gt; 0)                expire(key, time);            return count;        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }    /**     * 获取set缓存的长度     *     * @param key 键     * @return 358     */    public long sGetSetSize(String key) {        try {            return redisTemplate.opsForSet().size(key);        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }    /**     * 移除值为value的     *     * @param key    键     * @param values 值 可以是多个     * @return 移除的个数     */    public long setRemove(String key, Object... values) {        try {            Long count = redisTemplate.opsForSet().remove(key, values);            return count;        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }    // ===============================list=================================    /**     * 获取list缓存的内容     *     * @param key   键     * @param start 开始     * @param end   结束 0 到 -1代表所有值     * @return     */    public List&lt;Object&gt; lGet(String key, long start, long end) {        try {            return redisTemplate.opsForList().range(key, start, end);        } catch (Exception e) {            e.printStackTrace();            return null;        }    }    /**     * 获取list缓存的长度     *     * @param key 键     * @return     */    public long lGetListSize(String key) {        try {            return redisTemplate.opsForList().size(key);        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }    /**     * 通过索引 获取list中的值     *     * @param key   键     * @param index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推     * @return     */    public Object lGetIndex(String key, long index) {        try {            return redisTemplate.opsForList().index(key, index);        } catch (Exception e) {            e.printStackTrace();            return null;        }    }    /**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @return     */    public boolean lSet(String key, Object value) {        try {            redisTemplate.opsForList().rightPush(key, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return 453     */    public boolean lSet(String key, Object value, long time) {        try {            redisTemplate.opsForList().rightPush(key, value);            if (time &gt; 0)                expire(key, time);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @return     */    public boolean lSet(String key, List&lt;Object&gt; value) {        try {            redisTemplate.opsForList().rightPushAll(key, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */    public boolean lSet(String key, List&lt;Object&gt; value, long time) {        try {            redisTemplate.opsForList().rightPushAll(key, value);            if (time &gt; 0)                expire(key, time);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 根据索引修改list中的某条数据     *     * @param key   键     * @param index 索引     * @param value 值     * @return     */    public boolean lUpdateIndex(String key, long index, Object value) {        try {            redisTemplate.opsForList().set(key, index, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 移除N个值为value     *     * @param key   键     * @param count 移除多少个     * @param value 值     * @return 移除的个数     */    public long lRemove(String key, long count, Object value) {        try {            Long remove = redisTemplate.opsForList().remove(key, count, value);            return remove;        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }}</code></pre><p>Jedis 帮助类</p><pre><code>import redis.clients.jedis.Jedis;import java.util.Set;public class RedisUtils {    /**     * 获取hash表中所有key     * @param name     * @return     */    public static Set&lt;String&gt; getHashAllKey(String name){        Jedis jedis = null;        try {            jedis = MyJedisPool.getReadJedisObject();            return jedis.hkeys(name);        }catch (Exception e){            e.printStackTrace();        }finally {            MyJedisPool.returnJedisOjbect(jedis);        }        return null;    }    /**     * 从redis hash表中获取     * @param hashName     * @param key     * @return     */    public static String getHashKV(String hashName,String key){        Jedis jedis = null;        try {            jedis = MyJedisPool.getReadJedisObject();            return jedis.hget(hashName, key);        }catch (Exception e){            e.printStackTrace();        }finally {            MyJedisPool.returnJedisOjbect(jedis);        }        return null;    }    /**     * 删除hash表的键值对     * @param hashName     * @param key     */    public static Long delHashKV(String hashName,String key){        Jedis jedis = null;        try {            jedis = MyJedisPool.getWriteJedisObject();            return jedis.hdel(hashName,key);        }catch (Exception e){            e.printStackTrace();        }finally {            MyJedisPool.returnJedisOjbect(jedis);        }        return null;    }    /**     * 存放hash表键值对     * @param hashName     * @param key     * @param value     */    public static Long setHashKV(String hashName,String key,String value){        Jedis jedis = null;        try {            jedis = MyJedisPool.getWriteJedisObject();            return jedis.hset(hashName,key,value);        }catch (Exception e){            e.printStackTrace();        }finally {            MyJedisPool.returnJedisOjbect(jedis);        }        return null;    }    /**     * 删除键值对     * @param k     * @return     */    public static Long delKV(String k){        Jedis jedis = null;        try {            jedis = MyJedisPool.getWriteJedisObject();            return jedis.del(k);        }catch (Exception e){            e.printStackTrace();        }finally {            MyJedisPool.returnJedisOjbect(jedis);        }        return null;    }    /**     * 放键值对     * 永久     * @param k     * @param v     */    public static String setKV(String k, String v)    {        Jedis jedis = null;        try {            jedis = MyJedisPool.getWriteJedisObject();            return jedis.set(k, v);        }catch (Exception e){            e.printStackTrace();        }finally {            MyJedisPool.returnJedisOjbect(jedis);        }        return null;    }    /**     * 放键值对     *     * @param k     * @param v     */    public static String setKV(String k,int second, String v)    {        Jedis jedis = null;        try {            jedis = MyJedisPool.getWriteJedisObject();            return jedis.setex(k,second, v);        }catch (Exception e){            e.printStackTrace();        }finally {            MyJedisPool.returnJedisOjbect(jedis);        }        return null;    }    /**     * 根据key取value     *     * @param k     * @return     */    public static String getKV(String k)    {        Jedis jedis = null;        try {            jedis = MyJedisPool.getReadJedisObject();            return jedis.get(k);        }catch (Exception e){            e.printStackTrace();        }finally {            MyJedisPool.returnJedisOjbect(jedis);        }        return null;    }}</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Jedis的帮助类写的比较简单，因为快下班了，哈哈，其实网上都有，自己写也没什么难度。此处注意不能通过RedisTemplate拿到Jedis对象，所以Jedis的setNX方法RedisTemplate用不了，也不能用来执行Lua脚本。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jedis </tag>
            
            <tag> RedisTemplate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Redis(一)：基本概念与常见问题</title>
      <link href="/2018/04/15/about-redis-one-redis-basics/"/>
      <url>/2018/04/15/about-redis-one-redis-basics/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库（本文主要讲Redis）的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。</p><h2 id="redis-基本概念"><a href="#redis-基本概念" class="headerlink" title="redis 基本概念"></a>redis 基本概念</h2><h3 id="redis-是什么"><a href="#redis-是什么" class="headerlink" title="redis 是什么"></a>redis 是什么</h3><p>redis是一种NoSql非关系型数据库，它支持Key-Value等多种数据结构的存储系统。可用于缓存，事件发布或订阅，高速队列等场景。该数据库使用ANSI C语言编写，支持网络，提供字符串，哈希，列表，队列，集合结构直接存取，基于内存，可持久化。</p><h3 id="redis-有哪些优点"><a href="#redis-有哪些优点" class="headerlink" title="redis 有哪些优点"></a>redis 有哪些优点</h3><ol><li><strong>速度快</strong>，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)</li><li><strong>支持丰富数据类型</strong>，支持string，list，set，sorted set，hash</li><li><strong>支持事务</strong>，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行</li><li><strong>丰富的特性</strong>，可用于缓存，消息，按key设置过期时间，过期后将会自动删除</li></ol><h3 id="redis-支持哪些数据类型"><a href="#redis-支持哪些数据类型" class="headerlink" title="redis 支持哪些数据类型"></a>redis 支持哪些数据类型</h3><p><strong>Redis</strong>一共支持五种数据类：string（字符串），hash（哈希），list（列表），set（集合）和zset（sorted set有序集合）。</p><h2 id="Redis与Memcached的区别"><a href="#Redis与Memcached的区别" class="headerlink" title="Redis与Memcached的区别"></a>Redis与Memcached的区别</h2><ol><li>Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。memcache支持简单的数据类型，String。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li><li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用,而Memecache把数据全部存在内存之中</li><li>redis的速度比memcached快很多</li><li>Memcached是多线程，非阻塞IO复用的网络模型；Redis使用单线程的IO复用模型。</li></ol><table><thead><tr><th>对比参数</th><th>Redis</th><th>Memcached</th></tr></thead><tbody><tr><td>类型</td><td>1.支持内存 2.非关系型数据库</td><td>1.支持内存 2.key-value键值对形式 3.缓存系统</td></tr><tr><td>数据存储类型</td><td>String、List、Set、Hash、Sort Set</td><td>文本型、二进制</td></tr><tr><td>查询操作</td><td>1.批量 2.伪事务 3.CRUD</td><td>1.CRUD 2.少量其他命令</td></tr><tr><td>附加功能</td><td>1.发布/订阅模式 2.主从分区 3.序列化支持 4,脚本支持（Lua）</td><td>多线程服务支持</td></tr><tr><td>网络IO模型</td><td>单进程模式</td><td>多线程非阻塞IO模式</td></tr><tr><td>事件库</td><td>自封装简易时间库AeEvent</td><td>贵族血统的LibEvent事件库</td></tr><tr><td>持久化支持</td><td>1.RDB 2.AOF</td><td>不支持</td></tr><tr><td>Value大小</td><td>1GB</td><td>1MB</td></tr></tbody></table><p>如果想要更详细了解的话，可以查看慕课网上的这篇手记（非常推荐） ：<a href="https://www.imooc.com/article/23549" target="_blank" rel="noopener">《脚踏两只船的困惑 - Memcached与Redis》</a></p><h2 id="Redis的持久化"><a href="#Redis的持久化" class="headerlink" title="Redis的持久化"></a>Redis的持久化</h2><p>redis持久有两种方式：快照（快照），仅附加文件（AOF）</p><p>快照（快照）</p><ol><li>将存储在内存的数据以快照的方式写入二进制文件中，如默认dump.rdb中</li><li>保存900 1 </li></ol><p>＃900秒内如果超过1个Key被修改，则启动快照保存</p><ol start="3"><li>保存300 10</li></ol><p>＃300秒内如果超过10个Key被修改，则启动快照保存</p><ol start="4"><li>保存60 10000</li></ol><p>＃60秒内如果超过10000个重点被修改，则启动快照保存</p><p>仅附加文件（AOF）</p><ol><li>使用AOF持久时，服务会将每个收到的写命令通过写函数追加到文件中（appendonly.aof）</li><li><p>AOF持久化存储方式参数说明</p><p>＃开启AOF持久化存储方式<br>appendonly yes  </p><p>＃收到写命令后就立即写入磁盘，效率最差，效果最好<br>appendfsync always </p><p> ＃每秒写入磁盘一次，效率与效果居中<br>appendfsync everysec</p><p>＃完全依赖操作系统，效率最佳，效果没法保证<br>appendfsync no </p></li></ol><h2 id="redis-使用场景"><a href="#redis-使用场景" class="headerlink" title="redis 使用场景"></a>redis 使用场景</h2><h3 id="1-会话缓存（Session-Cache）"><a href="#1-会话缓存（Session-Cache）" class="headerlink" title="1.会话缓存（Session Cache）"></a>1.会话缓存（Session Cache）</h3><p>最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。当维护一个不是严格要求一致性的缓存时，如果用户的购物车信息全部丢失，大部分人都会不高兴的，现在，他们还会这样吗？</p><p>幸运的是，随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。</p><h3 id="2-全页缓存（FPC）"><a href="#2-全页缓存（FPC）" class="headerlink" title="2.全页缓存（FPC）"></a>2.全页缓存（FPC）</h3><p>除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。</p><p>再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。</p><p>此外，对WordPress的用户来说，Pantheon有一个非常好的插件  wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。</p><h3 id="3-队列"><a href="#3-队列" class="headerlink" title="3.队列"></a>3.队列</h3><p>Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push/pop 操作。</p><p>如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。</p><h3 id="4-排行榜-计数器"><a href="#4-排行榜-计数器" class="headerlink" title="4.排行榜/计数器"></a>4.排行榜/计数器</h3><p>Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。所以，我们要从排序集合中获取到排名最靠前的10个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可：</p><p>当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数，你需要这样执行：</p><p>ZRANGE user_scores 0 10 WITHSCORES</p><p>Agora Games就是一个很好的例子，用Ruby实现的，它的排行榜就是使用Redis来存储数据的，你可以在这里看到。</p><h3 id="5-发布-订阅"><a href="#5-发布-订阅" class="headerlink" title="5.发布/订阅"></a>5.发布/订阅</h3><p> 最后（但肯定不是最不重要的）是Redis的发布/订阅功能。发布/订阅的使用场景确实非常多。我已看见人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用Redis的发布/订阅功能来建立聊天系统！（不，这是真的，你可以去核实）。</p><p>Redis提供的所有特性中，我感觉这个是喜欢的人最少的一个，虽然它为用户提供如果此多功能。</p><h2 id="Redis-淘汰策略"><a href="#Redis-淘汰策略" class="headerlink" title="Redis 淘汰策略"></a>Redis 淘汰策略</h2><p> MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据<br> 相关知识：redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。redis 提供 6种数据淘汰策略：</p><ol><li>voltile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li><li>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li><li>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li><li>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</li><li>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</li><li>no-enviction（驱逐）：禁止驱逐数据</li></ol><h2 id="Redis-性能的优化"><a href="#Redis-性能的优化" class="headerlink" title="Redis 性能的优化"></a>Redis 性能的优化</h2><ol><li>Master写内存快照，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以Master最好不要写内存快照。</li><li>Master AOF持久化，如果不重写AOF文件，这个持久化方式对性能的影响是最小的，但是AOF文件会不断增大，AOF文件过大会影响Master重启的恢复速度。Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化,如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。</li><li>Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。</li><li>尽量避免在压力很大的主库上增加从库</li><li>Redis主从复制的性能问题，为了主从复制的速度和连接的稳定性，Slave和Master最好在同一个局域网内</li><li>主从复制不要用图状结构，用单向链表结构更为稳定，即：Master &lt;- Slave1 &lt;- Slave2 &lt;- Slave3…<br>这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。</li></ol><h2 id="Redis的并发竞争问题"><a href="#Redis的并发竞争问题" class="headerlink" title="Redis的并发竞争问题"></a>Redis的并发竞争问题</h2><p>Redis为单进程单线程模式，采用队列模式将并发访问变为串行访问。Redis本身没有锁的概念，Redis对于多个客户端连接并不存在竞争，但是在Jedis客户端对Redis进行并发访问时会发生连接超时、数据转换错误、阻塞、客户端关闭连接等问题，这些问题均是由于客户端连接混乱造成。对此有2种解决方法：</p><ol><li>客户端角度，为保证每个客户端间正常有序与Redis进行通信，对连接进行池化，同时对客户端读写Redis操作采用内部锁synchronized。</li><li>服务器角度，利用setnx实现锁。</li></ol><p>注：对于第一种，需要应用程序自己处理资源的同步，可以使用的方法比较通俗，可以使用synchronized也可以使用lock；第二种需要用到Redis的setnx命令，但是需要注意一些问题。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> noSql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux环境MySQL数据库定时备份</title>
      <link href="/2018/03/20/linux-mysql-dump-script-cron-backup/"/>
      <url>/2018/03/20/linux-mysql-dump-script-cron-backup/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>备份是容灾的基础，是指为防止系统出现操作失误或系统故障导致数据丢失，而将全部或部分数据集合从应用主机的硬盘或阵列复制到其它的存储介质的过程。而对于一些网站、系统来说，数据库就是一切，所以做好数据库的备份是至关重要的！</p><h2 id="MySQL数据备份"><a href="#MySQL数据备份" class="headerlink" title="MySQL数据备份"></a>MySQL数据备份</h2><h3 id="mysqldump命令备份数据"><a href="#mysqldump命令备份数据" class="headerlink" title="mysqldump命令备份数据"></a>mysqldump命令备份数据</h3><p>在MySQL中提供了命令行导出数据库数据以及文件的一种方便的工具<code>mysqldump</code>,我们可以通过命令行直接实现数据库内容的导出dump,首先我们简单了解一下<code>mysqldump</code>命令用法:</p><pre><code>#MySQLdump常用mysqldump -u root -p --databases 数据库1 数据库2 &gt; xxx.sql</code></pre><h3 id="mysqldump常用操作示例"><a href="#mysqldump常用操作示例" class="headerlink" title="mysqldump常用操作示例"></a>mysqldump常用操作示例</h3><p>1.备份全部数据库的数据和结构</p><pre><code>mysqldump -uroot -p123456 -A &gt; /data/mysqlDump/mydb.sql</code></pre><p>2.备份全部数据库的结构（加 -d 参数）</p><pre><code>mysqldump -uroot -p123456 -A -d &gt; /data/mysqlDump/mydb.sql</code></pre><p>3.备份全部数据库的数据(加 -t 参数)</p><pre><code>mysqldump -uroot -p123456 -A -t &gt; /data/mysqlDump/mydb.sql</code></pre><p>4.备份单个数据库的数据和结构(,数据库名mydb)</p><pre><code>mysqldump -uroot-p123456 mydb &gt; /data/mysqlDump/mydb.sql</code></pre><p>5.备份单个数据库的结构</p><pre><code>mysqldump -uroot -p123456 mydb -d &gt; /data/mysqlDump/mydb.sql</code></pre><p>6.备份单个数据库的数据</p><pre><code>mysqldump -uroot -p123456 mydb -t &gt; /data/mysqlDump/mydb.sql</code></pre><p>7.备份多个表的数据和结构（数据，结构的单独备份方法与上同）</p><pre><code>mysqldump -uroot -p123456 mydb t1 t2 &gt; /data/mysqlDump/mydb.sql</code></pre><p>8.一次备份多个数据库</p><pre><code>mysqldump -uroot -p123456 --databases db1 db2 &gt; /data/mysqlDump/mydb.sql</code></pre><h3 id="还原mysql备份内容"><a href="#还原mysql备份内容" class="headerlink" title="还原mysql备份内容"></a>还原mysql备份内容</h3><p>有两种方式还原，第一种是在MySQL命令行中，第二种是使用SHELL行完成还原</p><p>1.在系统命令行中，输入如下实现还原：</p><pre><code>mysql -uroot -p123456 &lt; /data/mysqlDump/mydb.sql</code></pre><p>2.在登录进入mysql系统中,通过source指令找到对应系统中的文件进行还原：</p><pre><code>mysql&gt; source /data/mysqlDump/mydb.sql</code></pre><h2 id="编写脚本维护备份的数据库文件"><a href="#编写脚本维护备份的数据库文件" class="headerlink" title="编写脚本维护备份的数据库文件"></a>编写脚本维护备份的数据库文件</h2><p>在linux中，通常使用BASH脚本对需要执行的内容进行编写，加上定时执行命令crontab实现日志自动化生成。</p><p>以下代码功能就是针对mysql进行备份，配合crontab，实现备份的内容为近一个月（31天）内的每天的mysql数据库记录。</p><h3 id="编写BASH维护固定数量备份文件"><a href="#编写BASH维护固定数量备份文件" class="headerlink" title="编写BASH维护固定数量备份文件"></a>编写BASH维护固定数量备份文件</h3><p>在Linux中，使用vi或者vim编写脚本内容并命名为：mysql_dump_script.sh</p><pre><code>#!/bin/bash#保存备份个数，备份31天数据number=31#备份保存路径backup_dir=/home/was/database/backup#日期dd=`date +%Y-%m-%d-%H-%M-%S`#备份工具tool=mysqldump#用户名username=root#密码password=1qaz2wsx#将要备份的数据库database_name=eab#如果文件夹不存在则创建if [ ! -d $backup_dir ]; then         mkdir -p $backup_dir; fiecho &quot;导出数据库文件中...&quot;#简单写法  mysqldump -u root -p123456 users &gt; /root/mysqlbackup/users-$filename.sql$tool -u $username -p$password $database_name &gt; $backup_dir/$database_name-$dd.sqlecho &quot;数据库文件导出完成&quot;echo &quot;写创建备份日志&quot;echo &quot;create $backup_dir/$database_name-$dd.dupm&quot; &gt;&gt; $backup_dir/log.txt#找出需要删除的备份delfile=`ls -l -crt  $backup_dir/*.sql | awk &apos;{print $9 }&apos; | head -1`#判断现在的备份数量是否大于$numbercount=`ls -l -crt  $backup_dir/*.sql | awk &apos;{print $9 }&apos; | wc -l`if [ $count -gt $number ]then  #删除最早生成的备份，只保留number数量的备份  rm $delfile  #写删除文件日志  echo &quot;delete $delfile&quot; &gt;&gt; $backup_dir/log.txtfi</code></pre><p>如果担心占用空间过多还可以同gzip压缩备份文件。</p><p>如上代码主要含义如下：</p><p>1.首先设置各项参数，例如number最多需要备份的数目，备份路径，用户名，密码等。</p><p>2.执行mysqldump命令保存备份文件，并将操作打印至同目录下的log.txt中标记操作日志。</p><p>3.定义需要删除的文件：通过ls命令获取第九列，即文件名列，再通过</p><pre><code>head -1</code></pre><p>实现定义操作时间最晚的那个需要删除的文件。</p><p>4.定义备份数量：通过ls命令加上</p><pre><code>wc -l</code></pre><p>统计以sql结尾的文件的行数。</p><p>5.如果文件超出限制大小，就删除最早创建的sql文件</p><h2 id="使用crontab定期执行备份脚本"><a href="#使用crontab定期执行备份脚本" class="headerlink" title="使用crontab定期执行备份脚本"></a>使用crontab定期执行备份脚本</h2><p>在LINUX中，周期执行的任务一般由cron这个守护进程来处理<code>[ps -ef|grep cron]</code>。cron读取一个或多个配置文件，这些配置文件中包含了命令行及其调用时间。<br>cron的配置文件称为“crontab”，是“cron table”的简写。</p><h3 id="cron服务"><a href="#cron服务" class="headerlink" title="cron服务"></a>cron服务</h3><p>cron是一个linux下 的定时执行工具，可以在无需人工干预的情况下运行作业。</p><pre><code>service crond start    //启动服务service crond stop     //关闭服务service crond restart  //重启服务service crond reload   //重新载入配置service crond status   //查看服务状态 </code></pre><h3 id="crontab语法"><a href="#crontab语法" class="headerlink" title="crontab语法"></a>crontab语法</h3><p>crontab命令用于安装、删除或者列出用于驱动cron后台进程的表格。用户把需要执行的命令序列放到crontab文件中以获得执行。每个用户都可以有自己的crontab文件。/var/spool/cron下的crontab文件不可以直接创建或者直接修改。该crontab文件是通过crontab命令创建的。<br>在crontab文件中如何输入需要执行的命令和时间。该文件中每行都包括六个域，其中前五个域是指定命令被执行的时间，最后一个域是要被执行的命令。<br>每个域之间使用空格或者制表符分隔。格式如下： </p><pre><code>minute hour day-of-month month-of-year day-of-week commands #合法值 00-59 00-23 01-31 01-12 0-6 (0 is sunday) </code></pre><p><strong>除了数字还有几个个特殊的符号就是”<em>“、”/“和”-“、”,”，</em>代表所有的取值范围内的数字，”/“代表每的意思,”/5”表示每5个单位，”-“代表从某个数字到某个数字,”,”分开几个离散的数字。</strong></p><p><strong>-l 在标准输出上显示当前的crontab。<br>-r 删除当前的crontab文件。<br>-e 使用VISUAL或者EDITOR环境变量所指的编辑器编辑当前的crontab文件。当结束编辑离开时，编辑后的文件将自动安装。</strong> </p><h3 id="创建cron脚本"><a href="#创建cron脚本" class="headerlink" title="创建cron脚本"></a>创建cron脚本</h3><p>第一步：写cron脚本文件,命名为mysqlRollBack.cron。</p><pre><code>15,30,45,59 * * * * echo &quot;xgmtest.....&quot; &gt;&gt; xgmtest.txt  表示，每隔15分钟，执行打印一次命令 </code></pre><p>第二步：添加定时任务。执行命令 <code>“crontab crontest.cron”</code>。搞定<br>第三步：”<code>crontab -l</code>“ 查看定时任务是否成功或者检测/var/spool/cron下是否生成对应cron脚本</p><p>注意：这操作是直接替换该用户下的crontab，而不是新增</p><p>定期执行编写的定时任务脚本（记得先给shell脚本执行权限）</p><pre><code>0 2 * * * /root/mysql_backup_script.sh</code></pre><p>随后使用crontab命令定期指令编写的定时脚本</p><pre><code>crontab mysqlRollback.cron</code></pre><p>再通过命令检查定时任务是否已创建：</p><pre><code>crontab -l</code></pre><p><strong>附crontab的使用示例：</strong></p><p>1.每天早上6点 </p><pre><code>0 6 * * * echo &quot;Good morning.&quot; &gt;&gt; /tmp/test.txt //注意单纯echo，从屏幕上看不到任何输出，因为cron把任何输出都email到root的信箱了。</code></pre><p>2.每两个小时 </p><pre><code>0 */2 * * * echo &quot;Have a break now.&quot; &gt;&gt; /tmp/test.txt  </code></pre><p>3.晚上11点到早上8点之间每两个小时和早上八点 </p><pre><code>0 23-7/2，8 * * * echo &quot;Have a good dream&quot; &gt;&gt; /tmp/test.txt</code></pre><p>4.每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点 </p><pre><code>0 11 4 * 1-3 command line</code></pre><p>5.1月1日早上4点 </p><pre><code>0 4 1 1 * command line SHELL=/bin/bash PATH=/sbin:/bin:/usr/sbin:/usr/bin MAILTO=root //如果出现错误，或者有数据输出，数据作为邮件发给这个帐号 HOME=/ </code></pre><p>6.每小时执行/etc/cron.hourly内的脚本</p><pre><code>01 * * * * root run-parts /etc/cron.hourly</code></pre><p>7.每天执行/etc/cron.daily内的脚本</p><pre><code>02 4 * * * root run-parts /etc/cron.daily </code></pre><p>8.每星期执行/etc/cron.weekly内的脚本</p><pre><code>22 4 * * 0 root run-parts /etc/cron.weekly </code></pre><p>9.每月去执行/etc/cron.monthly内的脚本 </p><pre><code>42 4 1 * * root run-parts /etc/cron.monthly </code></pre><p>注意: “<strong>run-parts</strong>“这个参数了，如果去掉这个参数的话，后面就可以写要运行的某个脚本名，而不是文件夹名。 　 </p><p>10.每天的下午4点、5点、6点的5 min、15 min、25 min、35 min、45 min、55 min时执行命令。 </p><pre><code>5，15，25，35，45，55 16，17，18 * * * command</code></pre><p>11.每周一，三，五的下午3：00系统进入维护状态，重新启动系统。</p><pre><code>00 15 * * 1，3，5 shutdown -r +5</code></pre><p>12.每小时的10分，40分执行用户目录下的innd/bbslin这个指令： </p><pre><code>10，40 * * * * innd/bbslink</code></pre><p>13.每小时的1分执行用户目录下的bin/account这个指令： </p><pre><code>1 * * * * bin/account</code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MySQL </tag>
            
            <tag> crontab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10自带VPN配置(L2TP/IpSec)</title>
      <link href="/2018/02/18/win10-use-ca-L2TP-OR-IPSEC-vpn-config/"/>
      <url>/2018/02/18/win10-use-ca-L2TP-OR-IPSEC-vpn-config/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>VPN(虚拟专用网)发展至今已经不在是一个单纯的经过加密的访问隧道了，它已经融合了访问控制、传输管理、加密、路由选择、可用性管理等多种功能，并在全球的信息安全体系中发挥着重要的作用。</p></blockquote><p>以前连接内网VPN时需要使用VPN厂家提供的软件，一般这种VPN软件极其古老，兼容性差，易掉线等各种问题，我以前用Win10系统时会在VM中装一个Win XP系统来配合使用，非常繁琐。本文介绍Win 10自带的VPN的配置。</p><p>Win10 自带的VPN 隧道协议：PPTP（点对点隧道协议）、L2TP（第2层隧道协议）、IPSec、SSLVPN。</p><p><a href="http://zhouhy.top/2019/11/22/linux-deepin-l2tp-config/">Linux-Deepin篇跳转链接</a></p><h2 id="L2TP-IpSec-配置"><a href="#L2TP-IpSec-配置" class="headerlink" title="L2TP/IpSec 配置"></a>L2TP/IpSec 配置</h2><p>1.设置 <code>-&gt;</code> 网络和Internet <code>-&gt;</code> VPN <code>-&gt;</code> 添加VPN连接<br><img src="/2018/02/18/win10-use-ca-L2TP-OR-IPSEC-vpn-config/1.png" alt=""><br>2.1.设置 <code>-&gt;</code> 网络和Internet <code>-&gt;</code> VPN <code>-&gt;</code> 更改设配器选项<br><img src="/2018/02/18/win10-use-ca-L2TP-OR-IPSEC-vpn-config/2.png" alt=""><br>3.选择刚才新建的VPN右键 <code>-&gt;</code> 属性<br><img src="/2018/02/18/win10-use-ca-L2TP-OR-IPSEC-vpn-config/3.png" alt=""><br><img src="/2018/02/18/win10-use-ca-L2TP-OR-IPSEC-vpn-config/4.png" alt=""><br><img src="/2018/02/18/win10-use-ca-L2TP-OR-IPSEC-vpn-config/5.png" alt=""><br><img src="/2018/02/18/win10-use-ca-L2TP-OR-IPSEC-vpn-config/6.png" alt=""><br><img src="/2018/02/18/win10-use-ca-L2TP-OR-IPSEC-vpn-config/7.png" alt=""><br><img src="/2018/02/18/win10-use-ca-L2TP-OR-IPSEC-vpn-config/8.png" alt=""></p><p>###连接失败解决方法 ### </p><p>错误描述：“L2TP连接尝试失败，因为安全层在初始化与远程计算机的协商时遇到了一个处理错误”</p><p>解决办法：<br>    1、Windows + r（ 即开始运行） 在框中输入 regedit ， 打开注册表</p><pre><code>2、找到\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\RasMan\Parameters位置3、新建  DWORD ，在键的位置输入ProhibitIpSec ，并修改其数值数据为14、修改 键 AllowL2TPWeakCrypto 的 数值数据 为 1 5、重启电脑</code></pre>]]></content>
      
      
      <categories>
          
          <category> VPN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
            <tag> Win10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于跨域问题中Session会话丢失问题</title>
      <link href="/2017/12/13/about-cross-domain-session-missing/"/>
      <url>/2017/12/13/about-cross-domain-session-missing/</url>
      
        <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>目前使用前后端分离的模式开发，后端提供跨域接口、前端json调用，绑定数据，以此解决跨域问题。</p><p>而Tomcat使用cookie中jsessionid来区分客户端session会话</p><p>跨域请求接口恰恰有时候响应回来会改变该站点下的jsessionid值，导致服务器每次判断都是一个新的会话。</p><p>所以就造成了后台每次接受到的都是一个新的Session,也就是标题说的Session丢失的问题。</p><p>可以通过后台打印jsessionid或者网站F12看set-cookie直观的看出问题，这里就补贴图了。</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>一般在网站登录模块，用户登录后，服务器会在Session中设置相应的属性来记录用户的登录信息（比如此时的jsessionid是A），避免其他的接口重复登录。</p><pre><code>//设置request.getSession().setAttribute(&quot;user&quot;, stageUser);</code></pre><p>当登录成功后调用下一个业务接口，会在过滤器或者拦截器从Session中取出用户的登录信息，进行跨域时，每一次请求都没有将sessinId带过去，服务器就认为是一个没有登录的新请求，都会在cookie里set一个新的sessionId，所以之前存的值永远也取不到,这就是所谓的Session丢失。</p><pre><code>//获取登录信息StageUser user = (StageUser) request.getSession().getAttribute(&quot;user&quot;);</code></pre><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>使用的标准是CORS，即跨域资源共享。CORS是一个W3C标准，全称是”跨域资源共享”(Cross-origin resource sharing)。</p><p>它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了只能同源使用的限制。</p><p>ajax请求设置为如下：</p><pre><code>$.ajax({        type:&apos;POST&apos;,        url:url,        async:isAsynchronous,        data:param,        dataType:&apos;json&apos;,        timeout:outTime,      // 超时45秒        contentType: &quot;application/json&quot;,        //加上 xhrFields及crossDomain        xhrFields: {             withCredentials: true//允许带上凭据        },        crossDomain: true,        success:function(data){        }});</code></pre><p>默认情况下，跨源请求不提供凭据(cookie、HTTP认证及客户端SSL证明等)。通过将withCredentials属性设置为true，可以指定某个请求应该发送凭据。如果服务器接收带凭据的请求，会用下面的HTTP头部来响应。</p><p>虽然设置了widthCredentials为true的请求中会包含远程域的所有cookie，但这些cookie仍然遵循同源策略，所以外域是访问不了这些cookie的，现在我们就可以安全地跨域访问啦。</p><p>后台统一添加</p><pre><code>response.setHeader(&quot;Access-Control-Allow-Origin&quot;, request.getHeader(&quot;Origin&quot;));//处理跨域response.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);//表示是否允许发送Cookie</code></pre><p>在一开始解决跨域时，我采用的是 response.setHeader(“Access-Control-Allow-Origin”, “<em>“) 处理跨域，表示接受任意域名的请求。但是设置了response.setHeader(“Access-Control-Allow-Credentials”, “true”)后，就不能使用“</em>”，不过要处理好跨域，可以直接设置允许请求的域名：response.setHeader(“Access-Control-Allow-Origin”, “域名名称”)，我在这里直接取出当前域名，又设置允许，同“*”作用相同。</p>]]></content>
      
      
      <categories>
          
          <category> Cross-domain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Session </tag>
            
            <tag> Cross-domain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC：Response获取Body问题</title>
      <link href="/2017/11/03/SpringMVC-Response-get-Body/"/>
      <url>/2017/11/03/SpringMVC-Response-get-Body/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><hr><p>现在开发的项目是基于SpringBoot的maven项目，拦截器的使用很多时候是必不可少的，当你需要对请求的body与返回的body进行记录的时候，在<code>afterCompletion</code>中从response中获取流，读取body入库后，你会发现前端获取不到后端传过去的body。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><hr><p>这个问题跟requst 一模一样，情况在<a href="http://zhouhy.top/2018/03/02/Request%E8%8E%B7%E5%8F%96Body%E9%97%AE%E9%A2%98/">上篇博客</a>中有详细的说明</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><hr><p>IO流关闭只能读取一次，所以需要解决流只能读取一次的问题，让它可以被多次重复读取，这里只需要重写Response缓存一下流中的数据就好了。</p><h3 id="引包"><a href="#引包" class="headerlink" title="引包"></a>引包</h3><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;    &lt;artifactId&gt;tomcat-embed-core&lt;/artifactId&gt;    &lt;version&gt;8.5.15&lt;/version&gt;&lt;/dependency&gt;</code></pre><h3 id="新建类Response包装类"><a href="#新建类Response包装类" class="headerlink" title="新建类Response包装类"></a>新建类Response包装类</h3><p>新建BodyCachingHttpServletResponseWrapper（防止流丢失）</p><pre><code>import lombok.AllArgsConstructor;import lombok.Data;import javax.servlet.ServletOutputStream;import javax.servlet.WriteListener;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpServletResponseWrapper;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.OutputStreamWriter;import java.io.PrintWriter;/** * @author * @date 2018/10/1 */public class BodyCachingHttpServletResponseWrapper extends HttpServletResponseWrapper {    private ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();    private HttpServletResponse response;    public BodyCachingHttpServletResponseWrapper(HttpServletResponse response) {        super(response);        this.response = response;    }    //获取包装前的response    public HttpServletResponse getNativeResponse(){        return this.response;    }    public byte[] getBody() {        return byteArrayOutputStream.toByteArray();    }    @Override    public ServletOutputStream getOutputStream() {        return new ServletOutputStreamWrapper(this.byteArrayOutputStream , this.response);    }    @Override    public PrintWriter getWriter() throws IOException {        return new PrintWriter(new OutputStreamWriter(this.byteArrayOutputStream , this.response.getCharacterEncoding()));    }    @Data    @AllArgsConstructor    private static class ServletOutputStreamWrapper extends ServletOutputStream {        private ByteArrayOutputStream outputStream;        private HttpServletResponse response;        @Override        public boolean isReady() {            return true;        }        @Override        public void setWriteListener(WriteListener listener) {        }        @Override        public void write(int b) throws IOException {            this.outputStream.write(b);        }        @Override        public void flush() throws IOException {            if (! this.response.isCommitted()) {                byte[] body = this.outputStream.toByteArray();                ServletOutputStream outputStream = this.response.getOutputStream();                outputStream.write(body);                outputStream.flush();            }        }    }}</code></pre><h3 id="新建过滤器"><a href="#新建过滤器" class="headerlink" title="新建过滤器"></a>新建过滤器</h3><p>新建HttpServletResponseReplacedFilter(过滤器)</p><pre><code>import javax.servlet.*;import javax.servlet.annotation.WebFilter;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebFilter(urlPatterns = &quot;/*&quot;, filterName = &quot;channelFilter&quot;)public class HttpServletRequestReplacedFilter implements Filter {    @Override    public void destroy() {    }    @Override    public void doFilter(ServletRequest request, ServletResponse response,                         FilterChain chain) throws IOException, ServletException {        BodyCachingHttpServletResponseWrapper responseWrapper = null;        if (response instanceof HttpServletResponse){            responseWrapper  = new BodyCachingHttpServletResponseWrapper((HttpServletResponse) response);        }        //获取请求中的流如何，将取出来的字符串，再次转换成流，然后把它放入到新request对象中。        // 在chain.doFiler方法中传递新的request对象        //此处response包装为responseWrapper 后 通过response.getWriter().print(str);传值是 前台无法接收        if (requestWrapper == null &amp;&amp; responseWrapper != null){            chain.doFilter(request, responseWrapper);        }    }    @Override    public void init(FilterConfig arg0) throws ServletException {    }}</code></pre><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><hr><p>如下代码即可在拦截其中获取body且保证了controller中依旧可以再次获取</p><pre><code>byte[] body = ((BodyCachingHttpServletResponseWrapper) res).getBody();java.lang.String string = new java.lang.String(body);</code></pre><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><hr><p>在拦截器的<code>preHandle</code>方法中返回true的请求，会进入到对应的Controller，在Controller中返回的对象有Spring Boot框架自动转换为JSON，放入response的body中，这个步骤是没有问题的。</p><p>但是当在拦截器中<code>preHandle</code>方法中返回false的请求,不会经由Controller赋予返回值，应该由程序员手动赋值。<br>常用的方法如下：</p><pre><code>PrintWriter writer = response.getWriter();writer.print(JSON.toJSONString(Result.create(MsgConstant.NOT_LOGIN)));writer.flush();writer.close();</code></pre><p>实际上，此时的response是经过包装后的，它的实际类型还是<code>BodyCachingHttpServletResponseWrapper</code>，这个方式前端是接收不到值的。需要把BodyCachingHttpServletResponseWrapper 转化为HttpServletResponse，<strong>而不是父类引用指向子类对象</strong>。</p><p>我在<code>BodyCachingHttpServletResponseWrapper</code>中写了如下方法，目的就是获取HttpServletResponse类型的response</p><pre><code>//获取包装前的responsepublic HttpServletResponse getNativeResponse(){    return this.response;}</code></pre><p>此处返回值的代码如下：</p><pre><code>response = ((BodyCachingHttpServletResponseWrapper)response).getNativeResponse();PrintWriter writer = response.getWriter();writer.print(JSON.toJSONString(Result.create(MsgConstant.JSON_INVALID_FORMAT)));writer.flush();writer.close();</code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Response </tag>
            
            <tag> HttpServletResponseWrapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC：Request获取Body问题</title>
      <link href="/2017/10/22/SpringMVC-Request-get-Body/"/>
      <url>/2017/10/22/SpringMVC-Request-get-Body/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>现在开发的项目是基于<code>SpringBoot</code>的<code>maven</code>项目，拦截器的使用很多时候是必不可少的，当有需要你对请求体（request.body）中的值进行校验，例如加密验签、防重复提交、内容校验等等。<br>当你开开心心的在拦截器中通过<code>request.getInputStream();</code>获取到body中的信息后，你会发现你在<code>controller</code>中使用了<code>@RequestBody</code>注解获取参数报如下错误:</p><pre><code>I/O error while reading input message; nested exception is java.io.IOException: Stream closedorg.springframework.http.converter.HttpMessageNotReadableException: I/O error while reading input message; nested exception is java.io.IOException: Stream closed    at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.readWithMessageConverters(AbstractMessageConverterMethodArgumentResolver.java:229)    at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters(RequestResponseBodyMethodProcessor.java:150)    at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:128)    at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)    at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:158)    at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:128)    at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)    at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)    at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)    at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)    at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)    at org.springframework.boot.web.filter.ApplicationContextHeaderFilter.doFilterInternal(ApplicationContextHeaderFilter.java:55)    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)    at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96)    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)    at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:110)    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</code></pre><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>我们希望从请求Request中获取输入流，解析里面的内容，但是<code>InputStream</code>只能被读取一次。为什么呢？看InputStream源码发现注释说的很清楚：</p><blockquote><p>public int read(byte[] b,int off, int len)<br>　　　Reads up to len bytes of data into an array of bytes from this input stream. Ifpos equals count, then -1 is returned to<br>　　　indicate end of file. Otherwise, the number k of bytes read is equal to the smaller of len and count-pos.If k<br>　　　is positive, then bytes buf[pos] through buf[pos+k-1] are copied into b[off] through b[off+k-1] in the manner performed by<br>　　　System.arraycopy. The value k is added into pos and k is returned. </p></blockquote><p>　　</p><blockquote><p>注释的大概意思是说：在InputStream读取的时候，会有一个pos 指针，它指示每次读取之后下一次要读取的起始位置。在每次读取后会更新pos的值，当你下次再来读取的时候是从pos的位置开始的，而不是从头开始，所以第二次获取String中的值的时候是不全的。如果第一次全部读取完了，pos就指向流的末尾，第二次就读取不到内容，API中提供了一个解决办法：reset()。<code>request、response中根本不起作用</code>。提示 mark/reset not supported 。意思是只有重写过markSupported()方法的IO流才可以用。所以一般我们使用inputStream，最好在一次内处理完所有逻辑。</p></blockquote><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>IO流关闭只能读取一次，所以需要解决流只能读取一次的问题，让它可以被多次重复读取，这里只需要重写Request缓存一下流中的数据就好了。</p><h3 id="引包"><a href="#引包" class="headerlink" title="引包"></a>引包</h3><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;    &lt;artifactId&gt;tomcat-embed-core&lt;/artifactId&gt;    &lt;version&gt;8.5.15&lt;/version&gt;&lt;/dependency&gt;</code></pre><h3 id="新建帮助类"><a href="#新建帮助类" class="headerlink" title="新建帮助类"></a>新建帮助类</h3><p>新建HttpUtil类 从流中读取body<br>public class HttpUtil {</p><pre><code>public static String getBodyString(HttpServletRequest request) throws IOException {    StringBuilder sb = new StringBuilder();    InputStream inputStream = null;    BufferedReader reader = null;    try {        inputStream = request.getInputStream();        reader = new BufferedReader(new InputStreamReader(inputStream, Charset.forName(&quot;UTF-8&quot;)));        String line = &quot;&quot;;        while ((line = reader.readLine()) != null) {            sb.append(line);        }    } catch (IOException e) {        e.printStackTrace();    } finally {        if (inputStream != null) {            try {                inputStream.close();            } catch (IOException e) {                e.printStackTrace();            }        }        if (reader != null) {            try {                reader.close();            } catch (IOException e) {                e.printStackTrace();            }        }    }    return sb.toString();}</code></pre><h3 id="新建类Request包装类"><a href="#新建类Request包装类" class="headerlink" title="新建类Request包装类"></a>新建类Request包装类</h3><p>新建RequestReaderHttpServletRequestWrapper（防止流丢失）</p><pre><code>import com.zbsoft.common.util.HttpUtil;import java.io.BufferedReader;import java.io.ByteArrayInputStream;import java.io.IOException;import java.io.InputStreamReader;import java.nio.charset.Charset;import javax.servlet.ReadListener;import javax.servlet.ServletInputStream;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletRequestWrapper;public class RequestReaderHttpServletRequestWrapper extends HttpServletRequestWrapper {private final byte[] body;public RequestReaderHttpServletRequestWrapper(HttpServletRequest request) throws IOException {    super(request);    body = HttpUtil.getBodyString(request).getBytes(Charset.forName(&quot;UTF-8&quot;));}@Overridepublic BufferedReader getReader() throws IOException {    return new BufferedReader(new InputStreamReader(getInputStream()));}@Overridepublic ServletInputStream getInputStream() throws IOException {    final ByteArrayInputStream bais = new ByteArrayInputStream(body);    return new ServletInputStream() {        @Override        public int read() throws IOException {            return bais.read();        }        @Override        public boolean isFinished() {            return false;        }        @Override        public boolean isReady() {            return false;        }        @Override        public void setReadListener(ReadListener readListener) {        }    };}</code></pre><p>}</p><h3 id="新建过滤器"><a href="#新建过滤器" class="headerlink" title="新建过滤器"></a>新建过滤器</h3><p>新建HttpServletRequestReplacedFilter(过滤器)</p><pre><code>import javax.servlet.*;import javax.servlet.annotation.WebFilter;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebFilter(urlPatterns = &quot;/*&quot;, filterName = &quot;channelFilter&quot;)public class HttpServletRequestReplacedFilter implements Filter {    @Override    public void destroy() {    }    @Override    public void doFilter(ServletRequest request, ServletResponse response,                         FilterChain chain) throws IOException, ServletException {        ServletRequest requestWrapper = null;                  if (request instanceof HttpServletRequest) {            requestWrapper = new RequestReaderHttpServletRequestWrapper((HttpServletRequest) request);        }        //获取请求中的流如何，将取出来的字符串，再次转换成流，然后把它放入到新request对象中。        // 在chain.doFiler方法中传递新的request对象        if (requestWrapper != null &amp;&amp; responseWrapper == null){            chain.doFilter(requestWrapper, response);        }    }    @Override    public void init(FilterConfig arg0) throws ServletException {    }}</code></pre><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>如下代码即可在拦截其中获取body且保证了controller中依旧可以再次获取</p><pre><code>HttpUtil.getBodyString(request);</code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Request </tag>
            
            <tag> HttpServletRequestWrapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC：拦截器的工作流程</title>
      <link href="/2017/10/08/SpringMVC-Interceptor-workflow/"/>
      <url>/2017/10/08/SpringMVC-Interceptor-workflow/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SpringWebMVC的处理器拦截器，类似于Servlet开发中的过滤器Filter，用于处理器进行预处理和后处理。它提供了一种机制可以使开发者可以定义在一个action执行的前后执行的代码，也可以在一个action执行前阻止其执行，同时也提供了一种可以提取action中可重用部分的方式。在AOP（Aspect-Oriented Programming）中拦截器用于在某个方法或字段被访问之前，进行拦截然后在之前或之后加入某些操作。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>1、日志记录，可以记录请求信息的日志，以便进行信息监控、信息统计等。<br>2、权限检查：如登陆检测，进入处理器检测是否登陆，如果没有直接返回到登陆页面。<br>3、性能监控：典型的是慢日志。</p><h2 id="HandlerInterceptor"><a href="#HandlerInterceptor" class="headerlink" title="HandlerInterceptor"></a>HandlerInterceptor</h2><p><strong>拦截器</strong><br>    public interface HandlerInterceptor {</p><pre><code>   /**     * 预处理回调方法，实现处理器的预处理（如检查登陆），第三个参数为响应的处理器，自定义Controller     * 返回值：true表示继续流程（如调用下一个拦截器或处理器）；false表示流程中断（如登录检查失败），不会继续调用其他的拦截器或处理器，此时我们需要通过response来产生响应；   */    boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)            throws Exception;   /**     * 后处理回调方法，实现处理器的后处理（但在渲染视图之前），此时我们可以通过modelAndView（模型和视图对象）对模型数据进行处理或对视图进行处理，modelAndView也可能为null。   */    void postHandle(            HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)            throws Exception;   /**    * 整个请求处理完毕回调方法，即在视图渲染完毕时回调，如性能监控中我们可以在此记录结束时间并输出消耗时间，还可以进行一些资源清理，类似于try-catch-finally中的finally，但仅调用处理器执行链中   */    void afterCompletion(            HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)            throws Exception;}</code></pre><h2 id="HandlerInterceptorAdapter"><a href="#HandlerInterceptorAdapter" class="headerlink" title="HandlerInterceptorAdapter"></a>HandlerInterceptorAdapter</h2><p><strong>拦截器适配器</strong><br>有时候我们可能只需要实现三个回调方法中的某一个，如果实现HandlerInterceptor接口的话，三个方法必须实现，不管你需不需要，此时spring提供了一个HandlerInterceptorAdapter适配器（种适配器设计模式的实现），允许我们只实现需要的回调方法。</p><pre><code>public abstract class HandlerInterceptorAdapter implements AsyncHandlerInterceptor {    /**     * 默认是true     */    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)            throws Exception {        return true;    }    /**     * This implementation is empty.     */    @Override    public void postHandle(            HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)            throws Exception {    }    /**     * This implementation is empty.     */    @Override    public void afterCompletion(            HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)            throws Exception {    }    /**     * 不是HandlerInterceptor的接口实现，是AsyncHandlerInterceptor的，AsyncHandlerInterceptor实现了HandlerInterceptor     */    @Override    public void afterConcurrentHandlingStarted(            HttpServletRequest request, HttpServletResponse response, Object handler)            throws Exception {    }}</code></pre><p>这样在我们业务中比如要记录系统日志，日志肯定是在afterCompletion之后记录的，否则中途失败了，也记录了，那就扯淡了。一定是程序正常跑完后，我们记录下那些对数据库做个增删改的操作日志进数据库。所以我们只需要继承HandlerInterceptorAdapter，并重写afterCompletion一个方法即可，因为preHandle默认是true。</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="/2017/10/08/SpringMVC-Interceptor-workflow/拦截器流程图.png" alt="运行流程图"></p><p>运行流程总结如下：</p><p><strong>1、拦截器执行顺序是按照Spring配置文件中定义的顺序而定的。<br>2、会先按照顺序执行所有拦截器的preHandle方法，一直遇到return false为止，比如第二个preHandle方法是return false，则第三个以及以后所有拦截器都不会执行。若都是return true，则按顺序加载完preHandle方法。<br>3、然后执行主方法（自己的controller接口），若中间抛出异常，则跟return false效果一致，不会继续执行postHandle，只会倒序执行afterCompletion方法。<br>4、在主方法执行完业务逻辑（页面还未渲染数据）时，按倒序执行postHandle方法。若第三个拦截器的preHandle方法return false，则会执行第二个和第一个的postHandle方法和afterCompletion（postHandle都执行完才会执行这个，也就是页面渲染完数据后，执行after进行清理工作）方法。（postHandle和afterCompletion都是倒序执行）</strong></p><h2 id="拦截器Demo"><a href="#拦截器Demo" class="headerlink" title="拦截器Demo"></a>拦截器Demo</h2><h3 id="拦截器1"><a href="#拦截器1" class="headerlink" title="拦截器1"></a>拦截器1</h3><pre><code>import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class SyslogInterceptor implements HandlerInterceptor {    /**     * 预处理回调方法，实现处理器的预处理（如检查登陆），第三个参数为响应的处理器，自定义Controller     * 返回值：true表示继续流程（如调用下一个拦截器或处理器）；false表示流程中断（如登录检查失败），不会继续调用其他的拦截器或处理器，此时我们需要通过response来产生响应；     */    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)            throws Exception {        System.out.println(&quot;==========================================1================================================&quot;);        return true;    }    /**     * 后处理回调方法，实现处理器的后处理（但在渲染视图之前），此时我们可以通过modelAndView（模型和视图对象）对模型数据进行处理或对视图进行处理，modelAndView也可能为null。     */    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,            ModelAndView modelAndView) throws Exception {        System.out.println(&quot;==========================================post1================================================&quot;);    }    /**     * 整个请求处理完毕回调方法，即在视图渲染完毕时回调，如性能监控中我们可以在此记录结束时间并输出消耗时间，还可以进行一些资源清理，类似于try-catch-finally中的finally，但仅调用处理器执行链中     */    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)            throws Exception {        System.out.println(&quot;==========================================after1================================================&quot;);    }}</code></pre><h3 id="拦截器2"><a href="#拦截器2" class="headerlink" title="拦截器2"></a>拦截器2</h3><pre><code>import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class SyslogInterceptor2 implements HandlerInterceptor {    /**     * 预处理回调方法，实现处理器的预处理（如检查登陆），第三个参数为响应的处理器，自定义Controller     * 返回值：true表示继续流程（如调用下一个拦截器或处理器）；false表示流程中断（如登录检查失败），不会继续调用其他的拦截器或处理器，此时我们需要通过response来产生响应；     */    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)            throws Exception {        System.out.println(&quot;==========================================2================================================&quot;);        return true;    }    /**     * 后处理回调方法，实现处理器的后处理（但在渲染视图之前），此时我们可以通过modelAndView（模型和视图对象）对模型数据进行处理或对视图进行处理，modelAndView也可能为null。     */    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,            ModelAndView modelAndView) throws Exception {        System.out.println(&quot;==========================================post2================================================&quot;);    }    /**     * 整个请求处理完毕回调方法，即在视图渲染完毕时回调，如性能监控中我们可以在此记录结束时间并输出消耗时间，还可以进行一些资源清理，类似于try-catch-finally中的finally，但仅调用处理器执行链中     */    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)            throws Exception {        System.out.println(&quot;==========================================after2================================================&quot;);    }}</code></pre><h3 id="拦截器3"><a href="#拦截器3" class="headerlink" title="拦截器3"></a>拦截器3</h3><pre><code>import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class SyslogInterceptor3 implements HandlerInterceptor {    /**     * 预处理回调方法，实现处理器的预处理（如检查登陆），第三个参数为响应的处理器，自定义Controller     * 返回值：true表示继续流程（如调用下一个拦截器或处理器）；false表示流程中断（如登录检查失败），不会继续调用其他的拦截器或处理器，此时我们需要通过response来产生响应；     */    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)            throws Exception {        System.out.println(&quot;==========================================3================================================&quot;);        return true;    }    /**     * 后处理回调方法，实现处理器的后处理（但在渲染视图之前），此时我们可以通过modelAndView（模型和视图对象）对模型数据进行处理或对视图进行处理，modelAndView也可能为null。     */    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,            ModelAndView modelAndView) throws Exception {        System.out.println(&quot;==========================================post3================================================&quot;);    }    /**     * 整个请求处理完毕回调方法，即在视图渲染完毕时回调，如性能监控中我们可以在此记录结束时间并输出消耗时间，还可以进行一些资源清理，类似于try-catch-finally中的finally，但仅调用处理器执行链中     */    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)            throws Exception {        System.out.println(&quot;==========================================after3================================================&quot;);    }}</code></pre><h3 id="拦截器配置"><a href="#拦截器配置" class="headerlink" title="拦截器配置"></a>拦截器配置</h3><p><code>&lt;mvc:mapping path=&quot;/**&quot;/&gt;</code>需要拦截的路径，这里匹配所有。这里的配置顺序将是拦截器执行顺序。</p><pre><code>&lt;mvc:interceptors&gt;        &lt;mvc:interceptor&gt;            &lt;mvc:mapping path=&quot;/**&quot;/&gt;            &lt;bean class=&quot;com.bshf.recipe.demo.syslog.SyslogInterceptor&quot; /&gt;        &lt;/mvc:interceptor&gt;        &lt;mvc:interceptor&gt;            &lt;mvc:mapping path=&quot;/**&quot;/&gt;            &lt;bean class=&quot;com.bshf.recipe.demo.syslog.SyslogInterceptor2&quot; /&gt;        &lt;/mvc:interceptor&gt;        &lt;mvc:interceptor&gt;            &lt;mvc:mapping path=&quot;/**&quot;/&gt;            &lt;bean class=&quot;com.bshf.recipe.demo.syslog.SyslogInterceptor3&quot; /&gt;        &lt;/mvc:interceptor&gt;&lt;/mvc:interceptors&gt;</code></pre><h3 id="Demo输出结果"><a href="#Demo输出结果" class="headerlink" title="Demo输出结果"></a>Demo输出结果</h3><pre><code>==========================================1==========================================================================================2==========================================================================================3==========================================================================================post3==========================================================================================post2==========================================================================================post1==========================================================================================after3==========================================================================================after2==========================================================================================after1================================================</code></pre><p>从结果可以看出来post和after是倒序的！！！！</p><p>中断流程Demo<br>将SyslogInterceptor3的preHandle方法返回false。其他不变，再看输出结果</p><pre><code>==========================================1==========================================================================================2==========================================================================================3==========================================================================================after2==========================================================================================after1================================================</code></pre><p>发现没有了post，post方法一个都没有输出。不仅如此，你的主程序代码（xxx.controller的一个接口）都不会被执行，所以只要遇到return false，则直接进行after清理工作，post和自己主程序代码都将被略过。</p>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HandlerInterceptor </tag>
            
            <tag> 拦截器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC：拦截器和过滤器的区别</title>
      <link href="/2017/09/28/SpringMVC-The-difference-between-interceptors-and-filters/"/>
      <url>/2017/09/28/SpringMVC-The-difference-between-interceptors-and-filters/</url>
      
        <content type="html"><![CDATA[<p>aaaaaaaaaaaaaa<br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拦截器 </tag>
            
            <tag> 过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程调试(一)：在IDEA中远程调试Jar包</title>
      <link href="/2017/08/21/remote-debugging-one-remotely-debugging-the-Jar-package-in-IDEA/"/>
      <url>/2017/08/21/remote-debugging-one-remotely-debugging-the-Jar-package-in-IDEA/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>因为现在用Spring Boot 的工程多了起来，有时候用Spring Boot写的小脚本部署在服务器上出现独有的错误（开发环境正常）时，并不是那么好定位，所以用了一下远程调试Jar包，发现意外的好用，所以记录一下过程。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="配置IDEA"><a href="#配置IDEA" class="headerlink" title="配置IDEA"></a>配置IDEA</h3><p>点击<code>+</code> —&gt;选择<code>Remote</code><br><img src="/2017/08/21/remote-debugging-one-remotely-debugging-the-Jar-package-in-IDEA/new-remote.jpg" alt="新建Remote配置"><br>配置远程服务器的ip与端口号，因为我的Jar是在本地启动的，所以是localhost<br><img src="/2017/08/21/remote-debugging-one-remotely-debugging-the-Jar-package-in-IDEA/config.jpg" alt="配置"></p><h3 id="启动Jar"><a href="#启动Jar" class="headerlink" title="启动Jar"></a>启动Jar</h3><p><code>address</code> 是远程服务的端口，也就是刚才配置的8081，<code>xxxxxx.jar</code> Jar包名字</p><pre><code>java -Xdebug -Xrunjdwp:transport=dt_socket,address=8081,server=y,suspend=y -jar xxxxxx.jar</code></pre><p>启动后，会在以下界面卡住，此时正在监听8081端口，等待IDEA启动调试。</p><pre><code>E:\Run&gt;java -Xdebug -Xrunjdwp:transport=dt_socket,address=8081,server=y,suspend=y -jar gateway.jar --spring.profiles.active=proListening for transport dt_socket at address: 8081</code></pre><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p><img src="/2017/08/21/remote-debugging-one-remotely-debugging-the-Jar-package-in-IDEA/start-debug.jpg" alt="启动调试"><br>启动调试后，服务器启动Jar界面会出现 ，项目启动日志，如果没有，说明没有监听到。</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>请求一下接口，发现打的断点生效了。<br><img src="/2017/08/21/remote-debugging-one-remotely-debugging-the-Jar-package-in-IDEA/res.jpg" alt="效果"></p>]]></content>
      
      
      <categories>
          
          <category> 远程调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Remote </tag>
            
            <tag> IEAD </tag>
            
            <tag> DEBUG </tag>
            
            <tag> Jar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏辅助（四）：基于Java的内存修改器（CE）</title>
      <link href="/2017/07/21/game-assist-four-Java-based-memory-modifier/"/>
      <url>/2017/07/21/game-assist-four-Java-based-memory-modifier/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记得初中玩游戏作弊就是用的<code>八门神器</code>，大学玩天天跑酷用<code>烧饼修改器</code>，毕业玩荒野之息用的是<code>CE</code>，这些工具说白的就是内存修改器，通过内存中的值不断的变化，不断的搜索，不断的定位到内存中的值对应的游戏属性，通过修改它达到作弊的效果。前面几篇博客主要是讲外设的模拟，窗口的绑定，都是属于辅助的范围，本文讲的内存修改器应该算是达到了外挂的范畴。</p><h2 id="嗯？"><a href="#嗯？" class="headerlink" title="嗯？"></a>嗯？</h2><p>先挖个坑，有时间再填。</p>]]></content>
      
      
      <categories>
          
          <category> 游戏辅助 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CE </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏辅助（三）：基于C绑定句柄</title>
      <link href="/2017/07/20/game-assist-Based-on-C-binding-handle/"/>
      <url>/2017/07/20/game-assist-Based-on-C-binding-handle/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面几篇介绍了用Java调用第三方插件去进行驱动级别的外设模拟，至于基于Java的以图找图，以色定位就不多说了，Robot就可以满足，本文讲的是通过Java操作句柄（实际上还是通过C），Java本身的定位并不适合写辅助，这篇博客只是娱乐一下，研究为主。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><strong>首先导入xnx3.jar</strong>,以寻仙窗口句柄为例。</p><pre><code>import com.xnx3.microsoft.Com;import com.xnx3.microsoft.Mouse;import com.xnx3.microsoft.Press;import com.xnx3.microsoft.Sleep;import com.xnx3.microsoft.Window;    /**     * 寻仙游戏模拟操作     */    public class XunXianTest {        public static void main(String[] args) {            //所有辅助的，模拟进行某种操作(键盘、鼠标、..)要先创建此类,在new Com()时，会自动检测运行环境是否符合、部署、注册Dll            Com com=new Com();            //返回创建Com()的结果，如果自检过程中发现异常，创建Com失败，则调用此会返回false            if(!com.isCreateSuccess()){                return;            }            //创建window窗口操作对象            Window window=new Window(com.getActiveXComponent());            //查找当前运行的程序中标题包含“寻仙 -”三个字的窗口句柄，            int hwnd=window.findWindow(0, null, &quot;寻仙 -&quot;);            //如果找到了寻仙这个游戏窗口了，确定是有这个程序存在，那么可以继续以下操作            if(hwnd&gt;0){                        /*                         * 对找到的寻仙这个窗口进行绑定，绑定完毕后，那么所有的鼠标、键盘、图色等操作就是都是对这个窗口（寻仙游戏）操作的，完全后台的~~，窗口可以被遮挡、点击葫芦隐藏，但是不可以最小化                         * 寻仙的就是这种模式绑定，只需要传入窗口句柄就可                         * 其他游戏的请自行组合测试绑定模式,使用： com.bind(hwnd, display, mouse, key, mode) 自行测试                         */                if(com.bind(hwnd)){                    /**                     * 绑定完毕，对游戏的操作全在这里                     */                    Press press=new Press(com.getActiveXComponent());        //创建模拟按键对象                    Mouse mouse=new Mouse(com.getActiveXComponent());        //创建模拟鼠标对象                    Sleep sleep=new Sleep();                                                        //创建延迟等待对象                    /***************以下来模拟按wasd四个方向键转三圈，然后结束软件退出运行***************/                    int i=0;                    while(i++&lt;3){                        press.keyPressTime(Press.W, 300);        //模拟按下W键0.3秒钟                        press.keyPressTime(Press.A, 300);                        press.keyPressTime(Press.S, 300);                        press.keyPressTime(Press.D, 300);                    }                    System.out.println(&quot;执行完毕&quot;);                }else{                    System.out.println(&quot;窗口绑定失败&quot;);                }            }else{                System.out.println(&quot;没有发现寻仙窗口&quot;);            }            //用完后一定要记得释放，释放内存，无论是否绑定了窗口、绑定是否成功，都可以直接调用此函数释放            com.unbind();        }    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> 游戏辅助 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xnx3 </tag>
            
            <tag> 句柄 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏辅助（二）：基于C的驱动级外设模拟</title>
      <link href="/2017/07/11/game-assist-C-based-driver-level-peripheral-simulation/"/>
      <url>/2017/07/11/game-assist-C-based-driver-level-peripheral-simulation/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要对外设的输入层次、模拟层次的介绍，以及通过基于C的dll插件实现自动执行外设的输入，达到解放双手、提高（外设）输入速度、频率或者高操作的效果。</p><h3 id="输入层次介绍"><a href="#输入层次介绍" class="headerlink" title="输入层次介绍"></a>输入层次介绍</h3><p>1、当按下键后，键盘或鼠标产生扫描码（不同芯片的键盘产生扫描码不一样）。</p><p>2、扫描码被送给相应硬件的驱动，驱动将扫描码转换成虚拟码（就是以  vk_  打头的，其实就是byte大小的数了，不同语言的虚拟码不全一样）。</p><p>3、虚拟码插入消息队列，等待被传给相应程序。然后就是程序处理的事了。</p><h3 id="模拟层次介绍"><a href="#模拟层次介绍" class="headerlink" title="模拟层次介绍"></a>模拟层次介绍</h3><p>1、局部模拟：用程序生成虚拟码，将虚拟码直接发给程序。</p><p>其一：Java自带的Robot就是这么干的。处理普通程序还有效，游戏就不用想了。</p><p>其二：jna的自带platform中，User32类 的sendMessage、postMessage方法。处理普通程序还有效，游戏就不用想了。</p><p>2、全局模拟：将扫描码、虚拟码插入到消息队列，然后就不管了。</p><p>其一：jna的自带platform中，User32类 的keybd_event方法。处理普通程序还有效，游戏就不用想了。</p><p>其二：键盘钩子。没试过，C语言还停留在大学水平，听说改键是这么做的。</p><p>3、驱动级模拟：用程序模仿键盘端口给系统发送扫描码。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>驱动级模拟，本来准备用jna + winio试一下的。后来发现网上不少说winio太出名了，游戏会针对性防范，再加上winio64位版还要签名，所以没试，然后因为种种原因DM插件也没能使用。</p><p>后来万能的吧友提供了一个AHK的脚本可以使用，破解后发现底层还是调用的DLL。于是有了本文，用Java调用DDxoft实现驱动级模拟。</p><h3 id="加载Dll"><a href="#加载Dll" class="headerlink" title="加载Dll"></a>加载Dll</h3><pre><code>import com.sun.jna.Library;import com.sun.jna.Native;public interface DdXoft extends Library {    DdXoft INSTANCE = (DdXoft) Native.loadLibrary(UnifyEnum.DDXOFT64.v(), DdXoft.class);    //64位JAVA调用*64.dll, 32位调用*32.dll 。与系统本身位数无关。、    int DD_mov(int x, int y);//绝对移动    int DD_movR(int dx, int dy);//相对移动    int DD_btn(int btn);//鼠标    int DD_whl(int whl); //滑轮    int DD_key(int ddcode, int flag);//键盘    int DD_str(String s);//字符串}</code></pre><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><p>位置判断还是用的Robot</p><pre><code>/** * 判断某点颜色是否相同 相同则按下 * * @return */public static boolean existPressKey(Robot robot, Entry entry, int ddCode) {    if (isEquals(robot, entry)) {        return pressKey(robot, entry, ddCode);    }    return false;}</code></pre><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>直接调用DDxoft,一些底层的东西还是C靠谱</p><pre><code>/** * 直接按下某键 */public static boolean pressKey(Robot robot, Entry entry, int ddCode) {    //robot.keyPress(keyCode);    DdXoft.INSTANCE.DD_key(ddCode, 1);    robot.delay(entry.press);    //robot.keyRelease(keyCode);    DdXoft.INSTANCE.DD_key(ddCode, 2);    robot.delay(entry.release);    System.out.println(&quot;{&quot; + entry.skill + &quot;}&quot; +            SkillEnum.PRESS.v() + &quot;:&quot; + entry.press + SkillEnum.MS.v() +            SkillEnum.RELEASE.v() + &quot;:&quot; + entry.release + SkillEnum.MS.v());    return true;}</code></pre><p>完整的程序 在我的github上，界面使用JavaFx，<a href="https://github.com/yibierusi/blade-and-bns-macro" target="_blank" rel="noopener">剑灵灵剑卡刀脚本</a></p>]]></content>
      
      
      <categories>
          
          <category> 游戏辅助 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ddxoft </tag>
            
            <tag> dll </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏辅助（一）：基于Java的软件级外设模拟</title>
      <link href="/2017/07/05/game-assist-one-Java-based-software-level-peripheral-simulation/"/>
      <url>/2017/07/05/game-assist-one-Java-based-software-level-peripheral-simulation/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在打副本的时候发现长时间大量重复的操作，非常影响游戏体验，并且达不到卡刀效果，无法有效的解除技能衔接之间的前后摇，使输出无法最大化，于是决定写一个脚本优化这一现象。前后试了很多方法，比如按键精灵，易语言，AHK，不是刚一登陆游戏就被检测出来了，就是一登陆游戏按键事件就失效了。</p><p>本文介绍的是Java的Robot 相比之前Java版本的按键模拟更加强大,但仍然属于软件级模拟，部分游戏仍然会被检测出来，下一篇博客会介绍驱动级的键盘模拟。</p><p>官方JavaDocsApi: j<a href="https://docs.oracle.com/javase/8/docs/api/java/awt/Robot.html" target="_blank" rel="noopener">ava.awt.Robot</a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Robot，机器人。此类用于为测试自动化、自运行演示程序和其他需要控制鼠标和键盘的应用程序生成本机系统输入事件。Robot 的主要目的是便于 Java 平台实现自动测试。</p><p>Robot 可以模拟鼠标和键盘的输入，相当于 Java 版的按键精灵。</p><h3 id="Robot-构造方法"><a href="#Robot-构造方法" class="headerlink" title="Robot 构造方法"></a>Robot 构造方法</h3><pre><code>// 在基本屏幕坐标系中构造一个 Robot 对象, 如果平台不支持 Robot, 将抛出异常Robot()// 为给定屏幕设备创建一个 Robot（用于同时使用多个显示设备的情况）Robot(GraphicsDevice screen)</code></pre><h3 id="模拟鼠标"><a href="#模拟鼠标" class="headerlink" title="模拟鼠标"></a>模拟鼠标</h3><pre><code>// 将鼠标指针移动到指定屏幕坐标void mouseMove(int x, int y)/** * 按下/释放一个或多个鼠标按钮, 参数说明: *     buttons: 鼠标按钮掩码, 一个或多个以下标志的组合: *     InputEvent.BUTTON1_MASK 鼠标左键 *     InputEvent.BUTTON2_MASK 鼠标中键 *     InputEvent.BUTTON3_MASK 鼠标右键 */    void mousePress(int buttons)    void mouseRelease(int buttons)    // 在配有滚轮的鼠标上旋转滚轮    void mouseWheel(int wheelAmt)</code></pre><h3 id="模拟键盘"><a href="#模拟键盘" class="headerlink" title="模拟键盘"></a>模拟键盘</h3><pre><code>/** * 按下/释放键盘按键, 参数说明: *     keycode: 键盘键值常量, 定义在 KeyEvent.VK_XXX 中 */    void keyPress(int keycode)    void keyRelease(int keycode)</code></pre><h3 id="屏幕相关"><a href="#屏幕相关" class="headerlink" title="屏幕相关"></a>屏幕相关</h3><pre><code>// 获取指定屏幕坐标处的像素颜色Color getPixelColor(int x, int y)// 截屏, 截取指定的矩形区域BufferedImage createScreenCapture(Rectangle screenRect)</code></pre><h3 id="控制类"><a href="#控制类" class="headerlink" title="控制类"></a>控制类</h3><pre><code>// 睡眠指定的时间, 相当于 Thread.sleep(long ms)void delay(int ms)// 在处理完当前事件队列中的所有事件之前, 一直等待void waitForIdle()// 设置此 Robot 在生成一个事件后是否自动调用 waitForIdle()// 设置为 true, 表示添加的事件逐个按顺序执行（执行完一个再执行下一个）void setAutoWaitForIdle(boolean isOn)boolean isAutoWaitForIdle()// 设置此 Robot 每在生成一个事件后自动睡眠的毫秒数void setAutoDelay(int ms)int getAutoDelay()</code></pre><h3 id="模拟鼠标事件"><a href="#模拟鼠标事件" class="headerlink" title="模拟鼠标事件"></a>模拟鼠标事件</h3><pre><code>package com.xiets.robot;import java.awt.*;import java.awt.event.InputEvent;public class Main {    public static void main(String[] args) throws AWTException {        // 创建 Robot 实例        Robot robot = new Robot();        // 执行完一个事件后再执行下一个        robot.setAutoWaitForIdle(true);        // 移动鼠标到指定屏幕坐标        robot.mouseMove(100, 100);        // 按下鼠标左键        robot.mousePress(InputEvent.BUTTON1_MASK);        // 延时100毫秒        robot.delay(100);        // 释放鼠标左键（按下后必须要释放, 一次点击操作包含了按下和释放）        robot.mouseRelease(InputEvent.BUTTON1_MASK);    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 游戏辅助 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
            <tag> Robot </tag>
            
            <tag> JavaFX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo系列（七）：提交搜索引擎</title>
      <link href="/2017/05/28/hexo-seven-submit-search-engine/"/>
      <url>/2017/05/28/hexo-seven-submit-search-engine/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>到了这一步，就博客的搭建基本已经完成了，细心的人就会发现一个问题，搭建的博客在<code>baidu</code>和<code>google</code>上搜索不到，这个问题真的是忍不了啊，完全不能愉快的装逼了，本文教大家做一下简单的SEO。</p><h2 id="查看收录情况"><a href="#查看收录情况" class="headerlink" title="查看收录情况"></a>查看收录情况</h2><hr><p>在站点前面输入<code>site:</code>可以查看搜索引擎对该站点的收录情况。<br><img src="/2017/05/28/hexo-seven-submit-search-engine/baidu_site.png" alt="百度收录情况"><br><img src="/2017/05/28/hexo-seven-submit-search-engine/google_site.png" alt="谷歌收录情况"><br>从图中可以看出<code>baidu</code>和<code>google</code>对我的网站没有收录任何一个路径。</p><h2 id="验证网站"><a href="#验证网站" class="headerlink" title="验证网站"></a>验证网站</h2><p>首先要确认网站是你本人所有，可以通过一下方式验证</p><blockquote><p><a href="https://ziyuan.baidu.com/linksubmit/url" target="_blank" rel="noopener">百度搜索引擎入口</a><br><a href="https://ziyuan.baidu.com/college/courseinfo?id=267&amp;page=1#h2_article_title3" target="_blank" rel="noopener">为什么要验证网站</a>　　<br>站长平台推荐站长添加主站（您网站的链接也许会使用www 和非 www 两种网址，建议添加用户能够真实访问到的网址），添加并验证后，可证明您是该域名的拥有者，可以快捷批量添加子站点，查看所有子站数据，无需再一一验证您的子站点。<br><a href="https://ziyuan.baidu.com/college/courseinfo?id=267&amp;page=1#h2_article_title13" target="_blank" rel="noopener">如何验证网站</a><br>首先如果您的网站已使用了百度统计，您可以使用统计账号登录平台，或者绑定站长平台与百度统计账号，站长平台支持您批量导入百度统计中的站点，您不需要再对网站进行验证。<br>百度站长平台为未使用百度统计的站点提供三种验证方式：文件验证、html标签验证、CNAME验证。<br>　　1.文件验证：您需要下载验证文件，将文件上传至您的服务器，放置于域名根目录下。<br>　　2.html标签验证：将html标签添加至网站首页html代码的标签与标签之间。<br>　　3.CNAME验证：您需要登录域名提供商或托管服务提供商的网站，添加新的DNS记录。<br>验证完成后，我们将会认为您是网站的拥有者。为使您的网站一直保持验证通过的状态，请保留验证的文件、html标签或CNAME记录，我们会去定期检查验证记录。<br><img src="/2017/05/28/hexo-seven-submit-search-engine/google验证" alt="验证"></p></blockquote><p>不管谷歌还是百度都要先添加域名，然后验证网站，这里统一都使用文件验证，就是下载对应的html文件，放到域名根目录下，也就收博客根目录下的source下面，当执行<code>hexo g</code>后会自动打包到<code>public</code>下面<br><img src="/2017/05/28/hexo-seven-submit-search-engine/验证文件位置.jpg" alt="验证文件位置"></p><p>然后部署到服务器,输入地址：<a href="https://zhouhy.top/baidu_verify_zn1b0ZTy80.html">https://zhouhy.top/baidu_verify_zn1b0ZTy80.html</a> 能访问到就可以点验证按钮。<br><img src="/2017/05/28/hexo-seven-submit-search-engine/验证页面.jpg" alt="验证页面"></p><h2 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h2><blockquote><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p></blockquote><p>我们要先安装一下，打开hexo博客根目录，分别用下面两个命令来安装针对谷歌和百度的插件</p><pre><code>npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save</code></pre><p>在博客目录的_config.yml中添加如下代码</p><pre><code># 自动生成sitemapsitemap:path: sitemap.xml</code></pre><p>编译你的博客</p><pre><code>hexo g</code></pre><p>如果你在你的博客根目录的public下面发现生成了<code>sitemap.xml</code>就表示成功了。<br><strong>注意：</strong>github禁止了百度爬虫，提交了百度也是不会访问的。</p><p>部署后访问<br><a href="http://zhouhy.top/sitemap.xml">http://zhouhy.top/sitemap.xml</a><br>效果如下图：<br><img src="/2017/05/28/hexo-seven-submit-search-engine/site_page.jpg" alt="sitemap.xml"><br>为了本地md文件容易阅读，我的md文件名字为中文，所以我的路径中也出现了中文（路径最好不要出现中文），类似：<code>http://yibierusi.github.io/2017/02/28/Hexo%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E6%8F%90%E4%BA%A4%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</code></p><h2 id="网站提交方式"><a href="#网站提交方式" class="headerlink" title="网站提交方式"></a>网站提交方式</h2><blockquote><p>如何选择链接提交方式<br>1、主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。<br>2、自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。<br>3、sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。<br>4、手动提交：一次性提交链接给百度，可以使用此种方式。</p></blockquote><p>一般主动提交比手动提交效果好。</p><p>从效率上来说：</p><blockquote><p>主动推送 &gt; 自动推送 &gt; sitemap</p></blockquote><blockquote><p>为什么自动推送可以更快的将页面推送给百度搜索？基于自动推送的实现原理问题，当新页面每次被浏览时，页面URL会自动推送给百度，无需站长汇总URL再进行主动推送操作。<br>借助用户的浏览行为来触发推送动作，省去了站长人工操作的时间。<br>自动推送和链接提交有什么区别？已经在使用链接提交的网站还需要再部署自动推送代码吗？<br>二者之间互不冲突，互为补充。已经使用主动推送的站点，依然可以部署自动推送的JS代码，二者一起使用。<br>什么样的网站更适合使用自动推送？自动推送由于实现便捷和后续维护成本低的特点，适合技术能力相对薄弱，无能力支持全天候实时主动推送程序的站长。<br>站长仅需一次部署自动推送JS代码的操作，就可以实现新页面被浏览即推送的效果，低成本实现链接自动提交。<br>同时，我们也支持主动推送和自动推送代码配合使用，二者互不影响。</p></blockquote><h2 id="谷歌收录"><a href="#谷歌收录" class="headerlink" title="谷歌收录"></a>谷歌收录</h2><h3 id="sitemap"><a href="#sitemap" class="headerlink" title="sitemap"></a>sitemap</h3><p>谷歌操作比较简单，就是向<a href="https://www.google.com/webmasters/tools" target="_blank" rel="noopener">Google站长工具</a>提交<code>sitemap</code></p><p>登录Google账号，添加了站点验证通过后，选择站点，<code>抓取</code>—&gt;<code>站点地图</code>—&gt;<code>添加/测试站点地图</code>，提交自己的<code>sitemap</code>就可以了<br>谷歌收录网站的效率非常高，提交上去一天左右就能搜索到了。</p><h2 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h2><p>谷歌很好搞定，百度就很麻烦了，流程复杂，耗时长，收录效果差。<br>正常情况，是要等百度爬虫来爬到网站，才会被收录。<br>但是github屏蔽了百度爬虫目前，所以不能被动的等着百度来爬取，我们自己把网站提交给百度。<br>这就要使用到<a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度站长平台</a></p><h3 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h3><p>自动推送很简单，就是在你代码里面嵌入自动推送JS代码，在页面被访问时，页面URL将立即被推送给百度<br>代码如下：</p><pre><code>&lt;script&gt;    (function(){        var bp = document.createElement(&apos;script&apos;);        bp.src = &apos;//push.zhanzhang.baidu.com/push.js&apos;;        var s = document.getElementsByTagName(&quot;script&quot;)[0];        s.parentNode.insertBefore(bp, s);    })();&lt;/script&gt;</code></pre><p>我是放在\themes\yelee\layout_partial\after_footer.ejs中，添加到下面就行。</p><h3 id="sitemap-1"><a href="#sitemap-1" class="headerlink" title="sitemap"></a>sitemap</h3><p><code>sitemap</code>的提交流程跟上面<code>google</code>一样，直接提交<a href="http://zhouhy.top/sitemap.xml">http://zhouhy.top/sitemap.xml</a> 就行，注意sitemap中的路径，如果是github的路径百度是无法爬取的，需要改为zhouhy.top,这个就会自动跳转到coding的路径。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> baidu </tag>
            
            <tag> google </tag>
            
            <tag> seo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo系列（六）：添加评论功能</title>
      <link href="/2017/04/22/hexo-six-add-comment-function/"/>
      <url>/2017/04/22/hexo-six-add-comment-function/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>博客评论功能的重要性不言而喻，拥有了评论功能就相当于拥有了一批志同道合的良师益友，可以指出文章中的错误得到提高，可以讨论加深理解与认同。</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>yelee</code>主题目前支持 Disqus，多说 及 友言评论，把 <code>#on: true</code> 改为 <code>on: true</code> 即启用对应评论系统<br>但是多说已经关闭，友言是基于Web的，Disqus在手机上展示不出来，发现还需要翻墙，那实在对用户太不友好了，于是我选择使用<a href="https://www.livere.com/" target="_blank" rel="noopener">来必力</a>评论系统。<br><img src="/2017/04/22/hexo-six-add-comment-function/来必力官网首页.jpg" alt="来必力官网首页"></p><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>注册后可以查看详细的评论数据分析。<br><img src="/2017/04/22/hexo-six-add-comment-function/数据分析.jpg" alt="数据分析"></p><h3 id="获取data-uid"><a href="#获取data-uid" class="headerlink" title="获取data-uid"></a>获取data-uid</h3><p>代码管理，我们需要用到这个<code>data-uid</code><br><img src="/2017/04/22/hexo-six-add-comment-function/代码.jpg" alt="代码"></p><h3 id="添加data-uid"><a href="#添加data-uid" class="headerlink" title="添加data-uid"></a>添加data-uid</h3><p>打开<code>theme/yelee/_config.yml</code>，添加配置信息</p><pre><code>livere:    on: true    livere_uid: Your uid</code></pre><h3 id="创建ejs文件"><a href="#创建ejs文件" class="headerlink" title="创建ejs文件"></a>创建ejs文件</h3><p>在<code>themes/yelee/layout/_partial/comments</code>文件夹创建<code>livere.ejs</code>文件，将代码拷贝进去，将你注册后的代码拷贝到<code>&lt;section&gt;&lt;/section</code>&gt;里面。</p><pre><code>&lt;section class=&quot;livere&quot; id=&quot;comments&quot;&gt;    &lt;!-- 来必力City版安装代码 --&gt;    &lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;Your uid&quot;&gt;    &lt;script type=&quot;text/javascript&quot;&gt;   (function(d, s) {       var j, e = d.getElementsByTagName(s)[0];       if (typeof LivereTower === &apos;function&apos;) { return; }       j = d.createElement(s);       j.src = &apos;https://cdn-city.livere.com/js/embed.dist.js&apos;;       j.async = true;       e.parentNode.insertBefore(j, e);       })(document, &apos;script&apos;);    &lt;/script&gt;    &lt;noscript&gt; 为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;    &lt;/div&gt;    &lt;!-- City版安装代码已完成 --&gt;&lt;/section&gt;</code></pre><h3 id="追加逻辑判断"><a href="#追加逻辑判断" class="headerlink" title="追加逻辑判断"></a>追加逻辑判断</h3><p>打开<code>themes/yelee/layout/_partial/article.ejs</code>，在下图位置插入下面的逻辑判断代码</p><pre><code>else if (theme.livere.on) { %&gt;    &lt;%- partial(&apos;comments/livere&apos;) %&gt;&lt;% } </code></pre><p><img src="/2017/04/22/hexo-six-add-comment-function/插入位置.jpg" alt="插入位置"></p><p>到这一步就完成了，集成评论。<br><img src="/2017/04/22/hexo-six-add-comment-function/评论.jpg" alt="评论"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> comment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo系列（五）：站内搜索与文章统计</title>
      <link href="/2017/04/16/hexo-five-site-search-and-article-statistics/"/>
      <url>/2017/04/16/hexo-five-site-search-and-article-statistics/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本来想用百度站内搜索，但是没成功，然后改用swiftype，但是swiftype需要注册账号并且只能用30天所以也放弃了，本文就简单的介绍一些yelee自带的站内搜索以及文章字数与阅读时长统计。</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><p>使用搜索需先安装对应插件，用于生成索引数据</p><blockquote><p>插件主页: <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a></p></blockquote><p><code>#on: true</code> 改为 <code>on: true</code>即为启用搜索</p><pre><code>search:   on: true  onload: false</code></pre><p><code>onload: true</code> : 索引数据 <code>search.xml</code> 随页面一起加载 [效率优先]</p><p><code>onload: false</code> : 当激活搜索框时再下载索引数据 [按需加载]<br><img src="/2017/04/16/hexo-five-site-search-and-article-statistics/站内搜索.jpg" alt="本地搜索效果"></p><h3 id="文章统计"><a href="#文章统计" class="headerlink" title="文章统计"></a>文章统计</h3><p><code>next</code>主题是已经集成这个功能的，但是<code>yelee</code>就需要我们自己配置了，可以看下官网对<a href="https://www.npmjs.com/package/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>的介绍</p><h4 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h4><blockquote><p>安装hexo-wordcount</p></blockquote><pre><code>npm i --save hexo-wordcount</code></pre><h4 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h4><blockquote><p>在yelee/layout/_partial/post下创建word.ejs文件：</p></blockquote><pre><code>&lt;div style=&quot;margin-top:10px;&quot;&gt;    &lt;span class=&quot;post-time&quot;&gt;      &lt;span class=&quot;post-meta-item-icon&quot;&gt;        &lt;i class=&quot;fa fa-keyboard-o&quot;&gt;&lt;/i&gt;        &lt;span class=&quot;post-meta-item-text&quot;&gt;  字数统计: &lt;/span&gt;        &lt;span class=&quot;post-count&quot;&gt;&lt;%= wordcount(post.content) %&gt;字&lt;/span&gt;      &lt;/span&gt;    &lt;/span&gt;    &lt;span class=&quot;post-time&quot;&gt;      &amp;nbsp; | &amp;nbsp;      &lt;span class=&quot;post-meta-item-icon&quot;&gt;        &lt;i class=&quot;fa fa-hourglass-half&quot;&gt;&lt;/i&gt;        &lt;span class=&quot;post-meta-item-text&quot;&gt;  阅读时长: &lt;/span&gt;        &lt;span class=&quot;post-count&quot;&gt;&lt;%= min2read(post.content) %&gt;分&lt;/span&gt;      &lt;/span&gt;    &lt;/span&gt;&lt;/div&gt;</code></pre><blockquote><p>然后添加逻辑判断</p></blockquote><p>打开 themes/yelee/layout/_partial/article.ejs</p><pre><code>&lt;% if(theme.word_count &amp;&amp; !post.no_word_count){ %&gt;    &lt;%- partial(&apos;post/word&apos;) %&gt;&lt;% } %&gt;</code></pre><p>在下图位置添加<br><img src="/2017/04/16/hexo-five-site-search-and-article-statistics/插入位置.jpg" alt="插入位置"><br><code>word_count</code> 是主题<code>_config.yml</code>中配置是否需要添加字数统计功能控制 flag，</p><p><code>no_word_count</code>即配置文章是否需要显示字数统计的功能。</p><pre><code># 是否开启字数统计#不需要使用，直接设置值为false，或注释掉word_count: trueno_word_count: true</code></pre><p>如果统计与标签重合或者位置不对，可以在<code>yelee/layout/_partial/post</code> 下面的的<code>word.ejs</code>与<code>tag.ejs</code> 设置<code>margin</code>属性</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo系列（四）：主题下载以及配置</title>
      <link href="/2017/04/09/hexo-four-yelee-theme-download-and-config/"/>
      <url>/2017/04/09/hexo-four-yelee-theme-download-and-config/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>之前搭建的博客基本功能已经实现了，新搭建的博客的默认主题都是<code>landscape</code>，略显简单，我的主题是基于<code>yelee</code>风格的，作者也是在<code>hexo-theme-yilia</code>的基础上进行的修改。具体的使用可以参考<a href="http://moxfive.coding.me/yelee/" target="_blank" rel="noopener">官方API</a></p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>CD到 <code>themes</code> 路径下执行clone命令下载主题</p><pre><code>git clone https://github.com/MOxFIVE/hexo-theme-yelee.git</code></pre><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>打开项目目录下的<code>_config.yml</code>文件</p><p>主题更改，注意的是在<code>yelee</code>前面有个空格，主题<code>yml</code>格式可以自行百度</p><pre><code>theme: yelee</code></pre><h3 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h3><pre><code>cd themes/yeleegit pull</code></pre><blockquote><p><strong>注意</strong>：请先备份你的<code>_config.yml</code>文件后再升级</p></blockquote><p>更新好后，本地启动起来效果</p><pre><code>hexo server -g  #生成加预览</code></pre><p><img src="/2017/04/09/hexo-four-yelee-theme-download-and-config/1.jpg" alt="主题预览效果"></p><h3 id="主题的-config-yml配置"><a href="#主题的-config-yml配置" class="headerlink" title="主题的_config.yml配置"></a>主题的_config.yml配置</h3><p>配置文件<code>_config.yml</code>位于主题根目录下,下面贴出我的配置</p><pre><code># Theme Version | 当前版本Yelee: &quot;3.5&quot;# &gt;&gt;&gt; Basic Setup | 基础设置 &lt;&lt;&lt;# Header | 主菜单## About Page: `hexo new page about`## Tags Cloud Page: `hexo new page tags`menu:  主页: /  所有文章: /archives/  #随笔: /tags/随笔  标签云: /tags/  关于我: /about/# Link to your avatar | 填写头像地址avatar: /img/avatar.png# Small icon of Your site | 站点小图标地址favicon: /favicon.png# Internationalization | 主题语言## Change Language in SITE&apos;s _config.yml | 在站点配置中切换语言## https://hexo.io/docs/internationalization.html## Available Languages: en, zh-Hans, zh-Hant-TW, zh-Hant-HK# Subdirectory | 子目录## If your site&apos; url is &apos;http://yoursite.com/blog&apos;, set root_url as &apos;/blog/&apos;## 网站若存放在子目录，请按上面格式填写## https://hexo.io/docs/configuration.html#URLroot_url: # Year of Site Creation | 网站成立年份since: 2016# Social info. Bar | 社交信息展示## Keep &quot;mailto:&quot; in Email | 设置 Email 时保留 &quot;mailto:&quot;## Encrypt email 加密邮件地址 http://ctrlq.org/encode/## RSS requires a plugin to take effect | 使用 RSS 需先安装对应插件## https://github.com/hexojs/hexo-generator-feed#社交subnav:  Email: &quot;mailto:zhouhy1205@aliyun.com&quot;  #新浪微博: &quot;sina weibo&quot;  GitHub: &quot;https://github.com/yibierusi&quot;  #V2EX: &quot;#&quot;  RSS: &quot;/atom.xml&quot;  #知乎: &quot;zhihu&quot;  #豆瓣: &quot;douban&quot;  #简书: &quot;jianshu&quot;  #SegmentFault: &quot;&quot;  #博客园: &quot;cnblogs&quot;  #CSDN: &quot;&quot;  #Coding: &quot;&quot;  网易云音乐: &quot;https://music.163.com/#/user/home?id=110939435&quot;  #虾米音乐: &quot;xiami&quot;  #bilibili: &quot;&quot;  #AcFun: &quot;&quot;  #niconico: &quot;&quot;  #Quora: &quot;&quot;  #Facebook: &quot;#&quot;  #Google: &quot;#&quot;  #Twitter: &quot;#&quot;  #LinkedIn: &quot;#&quot;  #QQ: &quot;4670049&quot;  #微信: &quot;zy4670049&quot;  #PayPal: &quot;#&quot;  #StackOverflow: &quot;#&quot;  #CodePen: &quot;&quot;  #Plunker: &quot;&quot;  #Instagram: &quot;#&quot;  #LOFTER: &quot;&quot;  #Flickr: &quot;#&quot;  #reddit: &quot;&quot;  #Medium: &quot;&quot;  #TiddlyWiki: &quot;&quot;  #Tumblr: &quot;&quot;  #_500px: &quot;&quot;# &gt;&gt;&gt; Conments 评论系统 &lt;&lt;&lt;# Chose ONE as your comment system and keep others disable.# 选一个作为网站评论系统，其他保持禁用。preload_comment: true## false: 当点击评论条等区域时再加载评论模块## false: load comment&apos;s section until u click/hover on the bar/iconshow_count: true## 是否在主页文章标题旁显示评论数（多说、Disqus）## Add comment count after article title#来必力    livere:  on: true  livere_uid: MTAyMC80MjA0MC8xODU4Nw==disqus:   #on: true  shortname:   # https://help.disqus.com/customer/en/portal/articles/466208-what-s-a-shortname-  # It is unnecessary to enable disqus here if   # you have set &quot;disqus_shortname&quot; in your site&apos;s &quot;_config.yml&quot; duoshuo:   #on: true  domain:   # 是否开启多说评论，http://duoshuo.com/create-site/  # 使用上面网址登陆你的多说，然后创建站点，在 domain 中填入你设定的域名前半部分  # http://&lt;要填的部分&gt;.duoshuo.com (domain只填上&lt;&gt;里的内容，不要填整个网址)youyan:  #on: true  id:   # 是否开启友言评论，http://www.uyan.cc/index.php  # id 中填写你的友言用户数字ID，注册后进入后台管理即可查看  # 友言服务在 Web 环境下运行，普通本地环境无法查看，请部署后在线上测试。# &gt;&gt;&gt; Style Customisation 样式自定义 &lt;&lt;&lt;# Background | 背景## &quot;5&quot;: show images form bg-1.jpg to bg-5.jpg in `/yelee/source/background/`## &quot;5&quot;: 显示`/yelee/source/background/`文件夹中 bg-1.jpg 到 bg-5.jpg 这5张图片## &quot;0&quot;: white-gray background | 淳朴灰白背景background_image: 5# Base Font Size | 字号调节base_font_size: 16  #px, 16 - 24## General Color Scheme | 主题配色方案 ## 可用值 Value: yiliacolor_scheme: yiliahighlight_style:  #on: true  inline_code: 1  # Value: 0 - 9 可选  code_block: 1  # Value: 0 - 4   # Set inline_code to style highlight text  # Chose a highlight theme for code block  # 通过 inline_code 切换内置文本高亮样式  # 通过 code_block 切换内置代码高亮配色主题blockquote_style:  #on: true  blockquote: 1  # Value: 0 - 7 可选  # 自定义文章「引用部分」的样式# Headings Style | 标题风格## 0-Yelee, 1-Yilia, 2-GitHubheading_style: 0 # Value: 0 - 2## List style type (ul) | 无序列表项标记样式list_style: 0  # value: 0 - 12 可选# 左边栏宽度 pxleft_col_width: 300# Copyright info. of post | 文末版权信息copyright: true# Table of contents | 文章目录toc:  on: true  list_number: true # 目录序号  max_depth: 3  # 1 - 6 (h1-h6) 目录最大级数  nowrap: false # Keep title on same line | 目录标题不换行# 是否开启主页及加载头像时的动画效果# Animation in Homepage and Loading avataranimate: true# Load jQuery UI to style tooltips# 工具提示框样式美化jquery_ui: true# Max width of right cloumn | 限制右侧内容的宽带 limit_article_width:   on: false  max_width: 60 # em# &gt;&gt;&gt; Small features | 小功能设置 &lt;&lt;&lt;# 是否开启边栏多标签切换# Birdhouse button in left columntagcloud: true# Blogroll, Link exchange | 友情链接friends:  Hexo: https://hexo.io  GitHub: https://pages.github.com/  MOxFIVE: http://moxfive.xyz/#friends: false#是否开启“关于我”。aboutme: 专注于前端#aboutme: false# Open link in a new tab | 是否在新窗口打开链接## `global` 0: Set separately, 1: Open all in new 2: Open all in current## `global` 0: 分开设置, 1: 全部在新标签打开, 2: 全部在&quot;当前&quot;标签打开open_in_new:  global: 0 # 0-2  title: false # article title in homepage 主页文章标题  post: false # link within post/page 正文中的链接  tags: false # 标签  categories: false # 分类  article_nav: false # 导航  archives: true # 归档  mini_archives: true # 迷你归档  menu: false # 边栏菜单  friends: true  # 友情链接  socail: true # 社交图标# Customize feed link 自定义订阅地址rss: /atom.xml# Update Reminder for IE6/7/8# 针对 IE6/7/8 的升级浏览器提示ie_updater:  on: true  link: //outdatedbrowser.com/  ## http://browsehappy.com/  ## http://outdatedbrowser.com/# Tab Title Change | 标签页标题切换tab_title_change:   on: false  left_tab_title: &apos;(つェ⊂) 我藏好了哦~ &apos;  return_tab_title: &apos;(*´∇｀*) 被你发现啦~ &apos;# &gt;&gt;&gt; Vendors | 第三方工具 &amp; 服务 &lt;&lt;&lt;# Local Site Search | 本地站内搜索## Insatall below plugin to take effect | 使用搜索需先安装对应插件## https://github.com/PaicHyperionDev/hexo-generator-searchsearch:   #on: true  onload: true  ## true: get search.xml file when the page has loaded  ## false: get the file when search box gets focus# images viewer | 图片浏览器## http://www.fancyapps.com/fancybox/fancybox: true# Display Math(LaTeX, MathML...) | 数学公式支持## https://www.mathjax.org/mathjax: false# Socail Share | 是否开启分享share:   on: true  baidu: true  addthis: false  addthis_pubid: &quot;ra-56ff76c972fc0cf9&quot;  ## Go to www.addthis.com/dashboard to get your pubid (in src of Code)  ## and customize AddThis share buttons# 百度、谷歌站长验证。填写 HTML 标签 content# Site Verification for Google and Baidu. HTML label content.baidu_site: google_site: # Fill in Google Analytics tracking ID, #e.g. UA-XXXXX-Xgoogle_analytics: # 百度统计 http://sitecenter.baidu.com/sc-web/# 查看代码，填入 //hm.baidu.com/hm.js? 之后的内容baidu_tongji: # 不蒜子网站计数设置# http://ibruce.info/2015/04/04/busuanzi/visit_counter:  on: true  site_visit: true  page_visit: true# GitHub Repo Widget# https://github.com/hustcc/GitHub-Repo-Widget.jsgithub_widget: false# Progress Bar | 页面加载进度条# Demo: http://github.hubspot.com/pace/docs/welcome/# type: barber-shop|big-counter|bounce|center-atom|center-circle|#       center-radar|center-simple|corner-indicator|flash|flat-top|#       loading-bar|mac-osx|minimal# color: black|blue|green|orange|pink|purple|red|silver|white|yellow|progressBar:  on: true  type: &quot;minimal&quot;  # Keep Quotes | 保留引号避免出错  color: blueCDN:  jquery: //cdn.bootcss.com/jquery/2.2.4/jquery.min.js  require: //cdn.bootcss.com/require.js/2.2.0/require.min.js  fontawesome: //cdn.bootcss.com/font-awesome/4.6.3/css/font-awesome.min.css  fancybox_js: //cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.js  fancybox_css: //cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css  animate_css: //cdn.bootcss.com/animate.css/3.5.1/animate.min.css  jquery_ui_js: //cdn.bootcss.com/jqueryui/1.10.4/jquery-ui.min.js  jquery_ui_css: //cdn.bootcss.com/jqueryui/1.10.4/css/jquery-ui.min.css  pace_js: //cdn.bootcss.com/pace/1.0.2/pace.min.js  clipboard: //cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js  mathjax: //cdn.bootcss.com/mathjax/2.6.1/MathJax.js  scrollreveal: //cdn.bootcss.com/scrollReveal.js/3.1.4/scrollreveal.min.js</code></pre><h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><blockquote><p>草稿相当于很多博客都有的“私密文章”功能。</p></blockquote><p>会在source/_drafts目录下生成一个<code>new-draft.md</code>文件。但是这个文件不被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到<code>_drafts</code>目录之中。</p><pre><code>$ hexo new draft &quot;new draft&quot;</code></pre><p>如果你希望强行预览草稿，更改配置文件：</p><pre><code>render_drafts: true</code></pre><p>或者，如下方式启动server：</p><pre><code>$ hexo server --drafts</code></pre><p>下面这条命令可以把草稿变成文章，或者页面：</p><pre><code>$ hexo publish [layout] &lt;filename&gt;</code></pre><h3 id="md模板"><a href="#md模板" class="headerlink" title="md模板"></a>md模板</h3><blockquote><p>新建md文章时候会有默认的模板。修改默认的模板</p></blockquote><p>其中<code>layout</code>是可选参数，默认值为<code>post</code>。有哪些<code>layout</code>呢，请到<code>scaffolds</code>目录下查看，这些文件名称就是<code>layout</code>名称。当然你可以添加自己的<code>layout</code>，方法就是添加一个文件即可，同时你也可以编辑现有的<code>layout</code>，比如post的<code>layout</code>默认是<code>hexo\scaffolds\post.md</code></p><pre><code>title: { { title } }date: { { date } }tags:</code></pre><p>修改为：</p><pre><code>title: json520博客001 #文章标题date: 2015-02-05 12:47:44 #文章生成时间categories: 必须写 #文章分类目录 可以省略tags: 必须写 #文章标签 可以省略description: 问题描述必须写 #你对本页的描述 可以省略</code></pre><p>这样每次新建都不用手动添加属性了</p><h3 id="标签云"><a href="#标签云" class="headerlink" title="标签云"></a>标签云</h3><p>menu 默认没有启用 /tags 和 /categories页面，如果需要使用 Hexo 命令新建一个名为 <code>tags</code>，<code>categories</code> 的页面即可<code>hexo new page tags</code>，<code>hexo new page categories</code> 因为主题中已经内置了这两个页面的模板，所以他们会被正确的解析出来。</p><h3 id="个人头像"><a href="#个人头像" class="headerlink" title="个人头像"></a>个人头像</h3><p>默认头像存储于 <code>yelee/source/img/avatar.png</code></p><p>配置中对应填写 <code>/img/avatar.png</code>，可替换图片或指定新地址</p><p><code>themes/yelee/_config.yml</code> 背景参数:</p><pre><code>avatar: /img/avatar.png</code></pre><h3 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h3><p>目前主题可使用两种方式在首页显示文章摘要而不是全文。</p><p><strong>方法一</strong>: <code>&lt;!-- more --&gt;</code><br>注：之前最好不要有空格等字符；</p><pre><code>title: Hello Worlddate: 2017-12-03 00:00:00---&lt;Excerpt in index | 首页摘要&gt; &lt;!-- more --&gt;&lt;The rest of contents | 余下全文&gt;</code></pre><p><strong>方法二</strong>: <code>description</code> in <strong>Front-matter</strong></p><pre><code>title: Hello Worlddate: 2015-12-03 00:00:00description: &quot;Welcome to Hexo! This is your very first post.&quot;---&lt;Contents&gt;</code></pre><p>通过 <code>description</code> 添加的摘要只能为纯文本；</p><p><code>description</code> 中的内容加引号，可以避免一些程序错误，例如当内容里包含英文冒号时。</p><h3 id="网页背景图"><a href="#网页背景图" class="headerlink" title="网页背景图"></a>网页背景图</h3><p>背景图文件所在路径:</p><pre><code>/yelee/source/background/</code></pre><p><code>themes/yelee/_config.yml</code> 背景参数:</p><pre><code>background_image: 5</code></pre><p>默认值为5，可按需修改</p><p>“5”: 设置/yelee/source/background/文件夹中 bg-1.jpg 到 bg-5.jpg 这5张图片为背景</p><p>“0”: 取消网页背景图，使用淳朴的灰白主题</p><h3 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h3><p>通过 <code>code_block</code> 切换内置代码高亮配色主题，目前额外提供 4 种搭配</p><pre><code>## 移除 `#` 后自定义样式生效highlight_style:  #on: true  code_block: 1  # Value: 0 - 4</code></pre><h3 id="文本高亮"><a href="#文本高亮" class="headerlink" title="文本高亮"></a>文本高亮</h3><p>通过 <code>inline_code</code> 切换内置文本高亮样式，目前额外提供 9 种样式</p><pre><code>## 移除 `#` 后自定义样式生效highlight_style:  #on: true  inline_code: 1  # Value: 0 - 9</code></pre><p>部分样式图示：<br><img src="/2017/04/09/hexo-four-yelee-theme-download-and-config/2.jpg" alt="文本高亮"></p><h3 id="引用区"><a href="#引用区" class="headerlink" title="引用区"></a>引用区</h3><p>可自定义文章「引用部分」的样式，目前额外提供 7 种样式</p><pre><code>blockquote_style:  on: true  blockquote: 1  # Value: 0 - 7 可选</code></pre><p>部分样式图示：<br><img src="/2017/04/09/hexo-four-yelee-theme-download-and-config/5.jpg" alt="引用"></p><h3 id="404-页面"><a href="#404-页面" class="headerlink" title="404 页面"></a>404 页面</h3><p>使用 Hexo 命令新建一个名为 404 的页面</p><pre><code>hexo new page 404</code></pre><p>/source/404/index.md 文件中添加 <code>permalink: /404</code></p><pre><code>title: 404 Not Found：该页无法显示toc: falsecomments: falsepermalink: /404---</code></pre><p> 404 页面显示效果可以在本地查看 <a href="http://localhost:4000/404.html" target="_blank" rel="noopener">http://localhost:4000/404.html</a></p><p> 无效网址自动跳转 404 页面则必须在线上测试</p><p> <a href="http://moxfive.xyz/2015/10/16/hexo-404-page/" target="_blank" rel="noopener">在 Hexo 中创建匹配主题的404页面</a><br><img src="/2017/04/09/hexo-four-yelee-theme-download-and-config/3.jpg" alt="404"></p><h3 id="左边栏鸟屋"><a href="#左边栏鸟屋" class="headerlink" title="左边栏鸟屋"></a>左边栏鸟屋</h3><p><img src="/2017/04/09/hexo-four-yelee-theme-download-and-config/4.jpg" alt="边栏鸟屋"><br>关闭鸟屋</p><pre><code># 边栏多标签切换tagcloud: false</code></pre><h3 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h3><pre><code>## 编辑友链friends:  Hexo: https://hexo.io  GitHub: https://pages.github.com/  MOxFIVE: http://moxfive.xyz/## 关闭友链friends: false</code></pre><h3 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h3><pre><code># 是否开启“关于我”。aboutme: 专注于前端# 关闭“关于我”aboutme: false</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yelee </tag>
            
            <tag> themes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo系列（三）：上传资源到博客</title>
      <link href="/2017/04/01/hexo-three-uploading-resources-to-blog/"/>
      <url>/2017/04/01/hexo-three-uploading-resources-to-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用Hexo+Github搭建博客的初衷就是不想去购买服务器，备案，搭建服务等，所以也不存在文件上传的问题。那么博客中有时需要用到的图片，这里的图片就是静态图片。</p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>cd到博客根目录下 查看<code>_config.yml</code>文件 查找 <code>post_asset_folder</code> 字段，将post_asset_folder 设置为true ， <code>post_asset_folder:true</code>。</p><p>当设置 <code>post_asset_folder</code> 参数为<code>true</code>，在建立文件时，Hexo 会自动建立一个与文章同名的文件夹，可以把与该文章相关的所有资源都放到此文件夹内，这样就可以更方便的使用资源。</p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>到博客的根目录下执行 <code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code> 命令来进行插件的安装。</p><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><p>然后创建一文章 <code>hexo new &quot;test&quot;</code> 然后查看博客的 ../source/_posts 目录下的文件，会看到存在一个test 文件夹 和 test.md 文件<br><img src="/2017/04/01/hexo-three-uploading-resources-to-blog/1.jpg" alt=""></p><h3 id="添加资源"><a href="#添加资源" class="headerlink" title="添加资源"></a>添加资源</h3><p>将所需要的图片资源放到test 文件夹 内 目录结构如下：<br><img src="/2017/04/01/hexo-three-uploading-resources-to-blog/2.jpg" alt=""></p><h3 id="使用资源"><a href="#使用资源" class="headerlink" title="使用资源"></a>使用资源</h3><p>书写文章使用test文件内 的图片<br><img src="/2017/04/01/hexo-three-uploading-resources-to-blog/3.jpg" alt=""></p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>1.使用<code>hexo s</code> 命令运行本地博客即可看到效果</p><p>2.使用<code>hexo clean</code> <code>，hexo g</code> ，<code>hexo d</code>将本地博客推送到远程，即可看到文章中的图片</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> static pages </tag>
            
            <tag> Resources </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo系列（二）：远程仓库托管博客</title>
      <link href="/2017/03/12/hexo-two-remote-repository-hosting-blog/"/>
      <url>/2017/03/12/hexo-two-remote-repository-hosting-blog/</url>
      
        <content type="html"><![CDATA[<!-- # Hexo：Github上发布博客（二）--><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇博客介绍了怎么搭建本地的静态博客，本文内容是将本地的博客通过GitHub Pages发布，使外网可以访问,coding上同理，本文只介绍Github。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>发布前的准备：</p><ul><li>注册Github账号</li></ul><h3 id="创建Github-仓库"><a href="#创建Github-仓库" class="headerlink" title="创建Github 仓库"></a>创建Github 仓库</h3><p>注册完成之后,点击头像左侧的<code>+</code>号, —&gt;<code>New repository</code>，创建新仓库<br><img src="/2017/03/12/hexo-two-remote-repository-hosting-blog/1.jpg" alt=""></p><p>因为创建的是个人网站，所以仓库的名称需要安装GitHub个人网站项目的规定来写。<br>规则就是：</p><pre><code>username.github.io</code></pre><p>比如我的GitHub用户名是<code>yibierusi</code>，那我就要填写 <code>yibierusi.github.io</code>。然后选择<code>Public</code>模式，接着点击<code>创建仓库</code>按钮,因为我的已经创建了，所以这里会提示已经存在。<br><img src="/2017/03/12/hexo-two-remote-repository-hosting-blog/2.jpg" alt=""></p><h3 id="推送部署"><a href="#推送部署" class="headerlink" title="推送部署"></a>推送部署</h3><p>在根目录下的<code>_config.yml</code>中添加git信息，之后在cmd下通过 <code>hexo d</code> 一键推送本地代码并部署。<br>单个仓库配置：</p><pre><code>deploy:  type: git  repository: git@github.com:yibierusi/yibierusi.github.io.git  branch: master</code></pre><p>多个仓库配置：</p><pre><code>deploy:  type: git  repo:      github: git@github.com:yibierusi/yibierusi.github.io.git,master      coding: git@git.coding.net:zhouhy1205/blog.git,master</code></pre><h3 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h3><p>代码推送成功后，进入新仓库，点击<code>Settings</code>，找到<code>GitHub Pages</code> 设置主题，并且绑定自定义域名<br><img src="/2017/03/12/hexo-two-remote-repository-hosting-blog/3.jpg" alt=""><br>第一个红框是选择分支<br>第二个红框是选择主题<br>第三个红框是自定义域名，没有就访问<code>username.github.io</code>，如果有域名需要在域名供应上处解析，并设置第三个红框，否则404，我用的是阿里云的域名。解析配置如下图：<br><img src="/2017/03/12/hexo-two-remote-repository-hosting-blog/4.jpg" alt=""></p><p>绑定自定义域名后会生成一个<code>CNAME</code>文件，文件内容就是刚刚绑定的域名<code>zhouhy.top</code>。到了这一步，我们已经完成了个人博客的创建，稍等一两分钟就可以通过域名访问自己的博客了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文只介绍了<code>github</code>托管，但是最好在<code>coding</code>上同时托管一份代码，步骤同<code>github</code>一样，因为后面会涉及到百度收录网站的问题，<code>github</code>是禁止百度爬取的，所以需要走<code>coding</code>的路线。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo系列（一）：个人博客搭建</title>
      <link href="/2017/03/08/hexo-one-blog-building/"/>
      <url>/2017/03/08/hexo-one-blog-building/</url>
      
        <content type="html"><![CDATA[<!-- # Hexo：个人博客搭建（一）--><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大学的时候就有写技术博客的习惯，那时在CSDN。毕业后比较忙，没时间去审词酌句写一篇完整的博客，大部分心得体会都写在有道云笔记中。但记笔记的效果是完全不能跟写博客相比的。一直想写一个自己的个人博客项目，但是没找到满意的前段模板也不想写大量的CSS，再加上备案也麻烦，一直搁浅到现在。无意间发现Hexo这个优秀的静态博客框架，所以写个博客记录一下搭建的过程，也给想搭建Hexo博客的朋友多一点参考。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>操作系统：Windwos 10</p><p>需要安装的软件：Node.js。用来创建hexo博客框架的，我当前安装版本为node-v5.6.0-x64。</p><p>Node.js的安装配置教程参照：<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在CMD下，利用 npm 命令即可安装。</p><p>输入安装hexo命令：</p><pre><code>npm install -g hexo</code></pre><p>或者</p><pre><code>npm install hexo-cli -g</code></pre><p>安装完成后，在你想要搭建的路径下（如D:\hexo），执行以下指令(在D:\hexo下调用CMD，或者CMD下cd到D:\hexo)，Hexo 即会自动在目标文件夹建立网站所需要的所有文件<br><img src="/2017/03/08/hexo-one-blog-building/1.jpg" alt=""></p><pre><code>hexo init</code></pre><p>安装所需依赖包：</p><pre><code>npm install</code></pre><p>安装后之后执行以下命令，#后为注释，不用输入</p><pre><code>hexo g #用于生成静态文件hexo s #用于启动服务器，主要用来本地预览</code></pre><p>此时访问路径<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ，就可以看到一个搭建完成的hexo博客了，当前博客为本地预览版，外网不能访问。</p><h3 id="Hexo常用的命令"><a href="#Hexo常用的命令" class="headerlink" title="Hexo常用的命令"></a>Hexo常用的命令</h3><p>介绍几个hexo常用的命令,通过<code>hexo n</code>生成md（生成的md文件位置D:\hexo\source_posts\）。</p><p>然后通过Markdown编辑器（这里推荐Markdownpad2编辑器）可以对博客进行编写，编写之后通过<code>hexo g</code>命令生成静态文件。</p><p>执行<code>hexo s</code>用于启动服务器，主要用来本地预览。</p><p>预览没问题之后通过<code>hexo d</code>将本地文件发布到你的github或者coding上。</p><h4 id="命令缩写"><a href="#命令缩写" class="headerlink" title="命令缩写"></a>命令缩写</h4><pre><code>hexo g #完整命令为hexo generate,用于生成静态文件hexo s #完整命令为hexo server,用于启动服务器，主要用来本地预览hexo d #完整命令为hexo deploy,用于将本地文件发布到github或者coding上hexo n #完整命令为hexo new,用于新建一篇文章</code></pre><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><pre><code>hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #将.deploy目录部署到GitHub</code></pre><h4 id="复合命令"><a href="#复合命令" class="headerlink" title="复合命令"></a>复合命令</h4><pre><code>hexo deploy -ghexo server -g</code></pre><ol start="6"><li>常用复合命令：<br>hexo deploy -g<br>hexo server -g</li></ol><h3 id="hexo文目录"><a href="#hexo文目录" class="headerlink" title="hexo文目录"></a>hexo文目录</h3><p>_<strong>config.yml</strong>:网站的 配置 信息，您可以在此配置大部分的参数。</p><p><strong>package.json</strong>:应用程序的信息。</p><p><strong>scaffolds</strong>:模版文件夹。当您新建文章时，Hexo会根据scaffold 来建立文件。</p><p><strong>source</strong>:资源文件夹是存放用户资源的地方。除posts文件夹之外，开头命名为(下划线)的文件/文件夹和隐藏的文件将会被忽略。Markdown和HTML文件会被解析并放到public文件夹，而其他文件会被拷贝过去。</p><p><strong>themes</strong>:主题 文件夹。Hexo会根据主题来生成静态页面。</p><h3 id="hexo的-config-yml配置"><a href="#hexo的-config-yml配置" class="headerlink" title="hexo的_config.yml配置"></a>hexo的_config.yml配置</h3><pre><code># Hexo Configuration# Docs: https://hexo.io/docs/configuration.html# Source: https://github.com/hexojs/hexo/# Site  网站title: zhouhy                                                              #网站标题subtitle: 勤学如春起之苗，不见其增，日有所长；辍学如磨刀之石，不见其损，日有所亏。  #网站副标题description: description                                                   #网站描述keywords:author: zhouhy                                                             #名字language: zh_CN                                                            #网站使用的语言timezone:                                                                  #网站时区。Hexo 默认使用您电脑的时区# URL 网址## 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。url: http://zhouhy.toproot: /permalink: :year/:month/:day/:title/permalink_defaults:# Directory 目录配置source_dir: source          #源文件夹，这个文件夹用来存放内容。public_dir: public         #公共文件夹，这个文件夹用于存放生成的站点文件。tag_dir: tags              #标签文件夹archive_dir: archives     #归档文件夹category_dir: categories #分类文件夹code_dir: downloads/code #nclude code 文件夹i18n_dir: :lang              #国际化（i18n）文件夹skip_render:              #跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。# Writing 文章new_post_name: :title.md # 新建文章默认文件名default_layout: post     # 默认布局titlecase: false          # Transform title into titlecaseexternal_link: true      # 在新标签中打开一个外部链接，默认为truefilename_case: 0         #转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。render_drafts: false       #是否渲染_drafts目录下的文章，默认为falsepost_asset_folder: false #启动 Asset 文件夹relative_link: false     #把链接改为与根目录的相对位址，默认falsefuture: true             #显示未来的文章，默认falsehighlight:                 #代码块的设置  enable: true  line_number: true  auto_detect: false  tab_replace:# Category &amp; Tag 分类和标签的设置default_category: uncategorized        #默认分类category_map:                        #分类别名tag_map:                            #标签别名# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Home page setting# path: Root path for your blogs index page. (default = &apos;&apos;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator:  path: &apos;&apos;  per_page: 10        order_by: -date# Pagination## Set per_page to 0 to disable paginationper_page: 10            #每页显示的文章量 (0 = 关闭分页功能)pagination_dir: page    #分页目录# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape        #主题（皮肤）# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo:         #github: git@github.com:yibierusi/zhou.github.io.git,master        coding: git@git.coding.net:zhouhy1205/blog.git,master</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
