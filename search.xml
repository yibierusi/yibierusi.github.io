<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SSR搭建属于自己的梯子</title>
      <link href="/2019/01/08/SSR/"/>
      <url>/2019/01/08/SSR/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SSR梯子切勿用于非法用途，主要是用来学习交流使用。<br>之前一直在google的蓝灯翻墙，但是后来因为部分原因时好时坏的所以决定自己研究一下梯子的搭建。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>SSTAP：链接: <a href="https://pan.baidu.com/s/1tfuR5gsUnmTNxurvn_fFNA" target="_blank" rel="noopener">https://pan.baidu.com/s/1tfuR5gsUnmTNxurvn_fFNA</a>  密码:67zb<br>Windows客户端代理工具：链接: <a href="https://pan.baidu.com/s/1pqtpMnrHRk89lWDe-IOmFQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1pqtpMnrHRk89lWDe-IOmFQ</a> 密码:fqkt<br>服务器一台：推荐使用vultr地址：<a href="http://www.vuvps.com/vultr.php" target="_blank" rel="noopener">http://www.vuvps.com/vultr.php</a><br>最后一个xShell远程终端，用来连接你的服务器，链接: <a href="https://pan.baidu.com/s/1ab2GYTH7YyLCl0qfAxp5Hg" target="_blank" rel="noopener">https://pan.baidu.com/s/1ab2GYTH7YyLCl0qfAxp5Hg</a>  密码:meeu ，只需要用一次就行了，就是SSR搭建后之后，你就可以把它卸载了。<br>准备支付宝。</p><h3 id="服务器选购"><a href="#服务器选购" class="headerlink" title="服务器选购"></a>服务器选购</h3><p>1.进入到Vultr首页，填写你的邮箱地址和登陆密码（密码需要数字+大写+小写字母），然后点击“CreateAccount”注册账号，注册成功之后,Service一栏里面，需要验证一下自己的邮箱。<br><img src="/2019/01/08/SSR/1.png" alt=""></p><p>2.购买服务器需要最低充值10美金，使用支付宝付款，服务器按小时计费。</p><p>充值流程：【Billing】-【Alipay】-【Pay withAlipay】-【完成支付】<br><img src="/2019/01/08/SSR/2.png" alt=""></p><p>3.支付完成后，接着选择服务器，本着最便宜的原则来购买（一般纽约为2.5美元一个月）</p><p>【Server Location】<br><img src="/2019/01/08/SSR/3.png" alt=""><br>【ServerType】 选择Centos 6x64（默认是Centos 7，如果没选6也没关系）<br><img src="/2019/01/08/SSR/4.png" alt=""><br>【ServerSize】反正选最便宜的。<br><img src="/2019/01/08/SSR/5.png" alt=""><br>剩下的默认，最后点击右下角“DeployNow”完成购买。</p><p>PS:主机创建的时候需要等两分钟再执行下一步SSR部署</p><h3 id="SSR部署"><a href="#SSR部署" class="headerlink" title="SSR部署"></a>SSR部署</h3><p>1.下载xShell,上面有链接，vps信息在你刚刚购买的面板里面可以看到。</p><p>打开xshell，新建链接，填写主机ip，端口号，钩选重新链接，然后点连接。<br><img src="/2019/01/08/SSR/6.png" alt=""><br>弹出“SSR安全警告”，选择“接受并保存”，用户名root（记得钩选记住用户名），密码在你的vultr里面去看，<br><img src="/2019/01/08/SSR/7.png" alt=""><br>出现下图（root@vultr）代表成功<br><img src="/2019/01/08/SSR/8.png" alt=""></p><h3 id="SSR安装"><a href="#SSR安装" class="headerlink" title="SSR安装"></a>SSR安装</h3><p>执行以下命令（密码建议修改，port可以默认）</p><pre><code>wget --no-check-certificate https://freed.ga/github/shadowsocksR.sh; bash shadowsocksR.sh</code></pre><p><img src="/2019/01/08/SSR/9.png" alt=""><br><img src="/2019/01/08/SSR/10.png" alt=""></p><p>出现提示“Shadowsocksr安装完成”就可以继续下一步，锐速安装（图片保存一下）。</p><h3 id="锐速安装"><a href="#锐速安装" class="headerlink" title="锐速安装"></a>锐速安装</h3><p>1.执行更换内核脚本</p><pre><code>wget -N --no-check-certificate https://freed.ga/kernel/ruisu.sh&amp;&amp; bash ruisu.sh</code></pre><p>执行之后，脚本会自动断开服务器，假如你钩选了记住用户名和密码，它会自动重连，如果没钩选也没关系，Xshel左上角【File】-【重新连接】，然后执行锐速安装脚本。</p><p>2.锐速安装脚本</p><pre><code>wget -N --no-check-certificatehttps://github.com/91yun/serverspeeder/raw/master/serverspeeder.sh&amp;&amp; bash serverspeeder.sh</code></pre><p>备用脚本(一般是centos7系统需要用到，6系统不需要执行这个)</p><pre><code>wget -N --no-check-certificatehttps://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh&amp;&amp; bash serverspeeder-all.sh</code></pre><p>如果出现版本不匹配，会出现一个选项，直接选个1就行了，直至出现下图，恭喜你，拥有了一个属于自己的SSR梯子。<br><img src="/2019/01/08/SSR/11.png" alt=""></p><h3 id="SStap配置"><a href="#SStap配置" class="headerlink" title="SStap配置"></a>SStap配置</h3><p>下载SStap,安装并填写SSR信息，下载链接在上面。</p><p>你只需要填写服务器IP、端口号、密码，其他信息照着下图抄就行了。<br><img src="/2019/01/08/SSR/12.png" alt=""><br>最后给个Google一张<br><img src="/2019/01/08/SSR/13.png" alt=""><br>SSR各平台下载地址=》 <a href="http://www.vuvps.com/?p=112" target="_blank" rel="noopener">极光SSR各平台客户端操作软件</a></p>]]></content>
      
      
      <categories>
          
          <category> Vpn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssr </tag>
            
            <tag> vps </tag>
            
            <tag> vpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用JavaScript写一个区块链</title>
      <link href="/2018/07/08/%E7%94%A8JavaScript%E5%86%99%E4%B8%80%E4%B8%AA%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
      <url>/2018/07/08/%E7%94%A8JavaScript%E5%86%99%E4%B8%80%E4%B8%AA%E5%8C%BA%E5%9D%97%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>本文是由Savjee.be发布，JeLewine翻译。版权归原作者所有，如有侵权，请与我联系删除</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>原文：<a href="https://link.zhihu.com/?target=https://www.savjee.be/2017/07/Writing-tiny-blockchain-in-JavaScript/" target="_blank" rel="noopener">Writing a tiny blockchain in JavaScript</a><br>作者：Savjee.be<br>译者：JeLewine</p><p>几乎每个人都听说过像比特币和以太币这样的加密货币，但是只有极少数人懂得隐藏在它们背后的技术。在这篇博客中，我将会用JavaScript来创建一个简单的区块链来演示它们的内部究竟是如何工作的。我将会称之为SavjeeCoin！</p><p>全文分为三个部分：<br>part1：实现一个基本的区块链<br>part2：实现POW<br>part3：交易与挖矿奖励</p><h2 id="Part1：实现一个基本的区块链"><a href="#Part1：实现一个基本的区块链" class="headerlink" title="Part1：实现一个基本的区块链"></a>Part1：实现一个基本的区块链</h2><p>区块链</p><p>区块链是由一个个任何人都可以访问的区块构成的公共数据库。这好像没什么特别的，不过它们有一个有趣的属性：它们是不可变的。一旦一个区块被添加到区块链中，除非让剩余的其余区块失效，否则它是不会再被改变的。</p><p>这就是为什么加密货币是基于区块链的原因。你肯定不希望人们在交易完成后再变更交易！</p><p>创造一个区块</p><p>区块链是由许许多多的区块链接在一起的（这听上去好像没毛病..）。链上的区块通过某种方式允许我们检测到是否有人操纵了之前的任何区块。</p><p>那么我们如何确保数据的完整性呢？每个区块都包含一个基于其内容计算出来的hash。同时也包含了前一个区块的hash。</p><p>下面是一个区块类用JavaScript写出来大致的样子：</p><pre><code>const SHA256 = require(&quot;crypto-js/sha256&quot;);  class Block {    constructor(index, timestamp, data, previousHash = &apos;&apos;) {      this.index = index;      this.previousHash = previousHash;      this.timestamp = timestamp;      this.data = data;      this.hash = this.calculateHash();    }    calculateHash() {      return SHA256(this.index + this.previousHash + this.timestamp + JSON.stringify(this.data)).toString();    }  }  </code></pre><p>因为JavaScript中并不支持sha256所以我引入了crypto-js库。然后我定义了一个构造函数来初始化我区块的属性。每一个区块上都被赋予了index属性来告知我们这个区块在整个链上的位置。我们同时也生成了一个时间戳，以及需要在区块里存储的一些数据。最后是前一个区块的hash。</p><p>创造一个链</p><p>现在我们可以在Blockchain类中将区块链接起来了！下面是用JavaScript实现的代码：</p><pre><code>class Blockchain{    constructor() {          this.chain = [this.createGenesisBlock()];    }    createGenesisBlock() {          return new Block(0, &quot;01/01/2017&quot;, &quot;Genesis block&quot;, &quot;0&quot;);    }    getLatestBlock() {          return this.chain[this.chain.length - 1];    }    addBlock(newBlock) {          newBlock.previousHash = this.getLatestBlock().hash;          newBlock.hash = newBlock.calculateHash();          this.chain.push(newBlock);    }    isChainValid() {      for (let i = 1; i &lt; this.chain.length; i++){            const currentBlock = this.chain[i];            const previousBlock = this.chain[i - 1];            if (currentBlock.hash !== currentBlock.calculateHash()) {                      return false;            }            if (currentBlock.previousHash !== previousBlock.hash) {                  return false;            }      }          return true;    }  }  </code></pre><p>在构造函数里，我通过创建一个包含创世块的数组来初始化整个链。第一个区块是特殊的，因为它不能指向前一个区块。我还添加了下面两个方法：<br>getLatestBlock()返回我们区块链上最新的区块。<br>addBlock()负责将新的区块添加到我们的链上。为此，我们将前一个区块的hash添加到我们新的区块中。这样我们就可以保持整个链的完整性。因为只要我们变更了最新区块的内容，我们就需要重新计算它的hash。当计算完成后，我将把这个区块推进链里（一个数组）。<br>最后，我创建一个isChainValid()来确保没有人篡改过区块链。它会遍历所有的区块来检查每个区块的hash是否正确。它会通过比较previousHash来检查每个区块是否指向正确的上一个区块。如果一切都没有问题它会返回true否则会返回false。</p><p>使用区块链</p><p>我们的区块链类已经写完啦，可以真正的开始使用它了！</p><pre><code>let savjeeCoin = new Blockchain();  savjeeCoin.addBlock(new Block(1, &quot;20/07/2017&quot;, { amount: 4 }));  savjeeCoin.addBlock(new Block(2, &quot;20/07/2017&quot;, { amount: 8 }));  </code></pre><p>在这里我仅仅是创建了一个区块链的实例，并且命名它为SavjeeCoin！之后我在链上添加了一些区块。区块里可以包含任何你想要放的数据，不过在上面的代码里，我选择添加了一个带有amount属性的对象。</p><p>试着操作吧！</p><p>在介绍里我曾说过区块链是不可变的。一旦添加，区块就不可能再变更了。让我们试一下！</p><pre><code>// 检查是否有效(将会返回true)  console.log(&apos;Blockchain valid? &apos; + savjeeCoin.isChainValid());  // 现在尝试操作变更数据  savjeeCoin.chain[1].data = { amount: 100 };  // 再次检查是否有效 (将会返回false)  console.log(&quot;Blockchain valid? &quot; + savjeeCoin.isChainValid());  </code></pre><p>我会在一开始通过运行isChainValid()来验证整个链的完整性。我们操作过任何区块，所以它会返回true。</p><p>之后我将链上的第一个（索引为1）区块的数据进行了变更。之后我再次检查整个链的完整性，发现它返回了false。我们的整个链不再有效了。</p><p>结论</p><p>这个小栗子还远未达到完成的程度。它还没有实现POW（工作量证明机制）或P2P网络来与其它矿工来进行交流。</p><p>但他确实证明了区块链的工作原理。许多人认为原理会非常复杂，但这篇文章证明了区块链的基本概念是非常容易理解和实现的。</p><h2 id="Part2：实现POW-proof-of-work-工作量证明"><a href="#Part2：实现POW-proof-of-work-工作量证明" class="headerlink" title="Part2：实现POW(proof-of-work:工作量证明)"></a>Part2：实现POW(proof-of-work:工作量证明)</h2><p>在part1中我们用JavaScript创建了一个简单的区块链来演示区块链的工作原理。不过这个实现并不完整，很多人发现依旧可以篡改该系统。没错！我们的区块链需要另一种机制来抵御攻击。那么让我们来看看我们该如何做到这一点！</p><p>问题</p><p>现在我们可以很快的创造区块然后非常迅速的将它们添加进我们的区块链中。不过这导致了三个问题：<br>第一：人们可以快速创建区块然后在我们的链里塞满垃圾。大量的区块会导致我们区块链过载并让其无法使用。<br>第二：因为创建一个有效的区块太容易了，人们可以篡改链中的某一个区块，然后重新计算所有区块的hash。即使它们已经篡改了区块，他们仍然可以以有效的区块来作为结束。<br>第三：你可以通过结合上述两个破绽来有效控制区块链。区块链由p2p网络驱动，其中节点会将区块添加到可用的最长链中。所以你可以篡改区块，然后计算所有其他的区块，最后添加多任意你想要添加的区块。你最后会得到一个最长的链，所有的其它节点都会接受它然后往上添加自己的区块。<br>显然我们需要一个方案来解决这些问题：POW。</p><p>什么是POW</p><p>POW是在第一个区块链被创造之前就已经存在的一种机制。这是一项简单的技术，通过一定数量的计算来防止滥用。工作量是防止垃圾填充和篡改的关键。如果它需要大量的算力，那么填充垃圾就不再值得。</p><p>比特币通过要求hash以特定0的数目来实现POW。这也被称之为难度</p><p>不过等一下！一个区块的hash怎么可以改变呢？在比特币的场景下，一个区块包含有各种金融交易信息。我们肯定不希望为了获取正确的hash而混淆了那些数据。</p><p>为了解决这个问题，区块链添加了一个nonce值。Nonce是用来查找一个有效Hash的次数。而且，因为无法预测hash函数的输出，因此在获得满足难度条件的hash之前，只能大量组合尝试。寻找到一个有效的hash（创建一个新的区块）在圈内称之为挖矿。</p><p>在比特币的场景下，POW确保每10分钟只能添加一个区块。你可以想象垃圾填充者需要多大的算力来创造一个新区块，他们很难欺骗网络，更不要说篡改整个链。</p><p>实现POW</p><p>我们该如何实现呢？我们先来修改我们区块类并在其构造函数中添加Nonce变量。我会初始化它并将其值设置为0。</p><pre><code>constructor(index, timestamp, data, previousHash = &apos;&apos;) {    this.index = index;    this.previousHash = previousHash;    this.timestamp = timestamp;    this.data = data;    this.hash = this.calculateHash();    this.nonce = 0;  }  </code></pre><p>我们还需要一个新的方法来增加Nonce，直到我们获得一个有效hash。强调一下，这是由难度决定的。所以我们会收到作为参数的难度。</p><pre><code>mineBlock(difficulty) {      while (this.hash.substring(0, difficulty) !== Array(difficulty + 1).join(&quot;0&quot;)) {          this.nonce++;          this.hash = this.calculateHash();      }      console.log(&quot;BLOCK MINED: &quot; + this.hash);  }  </code></pre><p>最后，我们还需要更改一下calculateHash()函数。因为目前他还没有使用Nonce来计算hash。</p><pre><code>calculateHash() {    return SHA256(this.index +      this.previousHash +      this.timestamp +      JSON.stringify(this.data) +      this.nonce    ).toString();  }  </code></pre><p>将它们结合在一起，你会得到如下所示的区块类：</p><pre><code>class Block {    constructor(index, timestamp, data, previousHash = &apos;&apos;) {      this.index = index;      this.previousHash = previousHash;      this.timestamp = timestamp;      this.data = data;      this.hash = this.calculateHash();      this.nonce = 0;    }    calculateHash() {      return SHA256(this.index + this.previousHash + this.timestamp + JSON.stringify(this.data) + this.nonce).toString();    }    mineBlock(difficulty) {      while (this.hash.substring(0, difficulty) !== Array(difficulty + 1).join(&quot;0&quot;)) {        this.nonce++;        this.hash = this.calculateHash();      }      console.log(&quot;BLOCK MINED: &quot; + this.hash);    }  } </code></pre><p>修改区块链</p><p>现在，我们的区块已经拥有Nonce并且可以被开采了，我们还需要确保我们的区块链支持这种新的行为。让我们先在区块链中添加一个新的属性来跟踪整条链的难度。我会将它设置为2（这意味着区块的hash必须以2个0开头）。</p><pre><code>constructor() {    this.chain = [this.createGenesisBlock()];    this.difficulty = 2;  }  </code></pre><p>现在剩下要做的就是改变addBlock()方法，以便在将其添加到链中之前确保实际挖到该区块。下面我们将难度传给区块。</p><pre><code>addBlock(newBlock) {    newBlock.previousHash = this.getLatestBlock().hash;    newBlock.mineBlock(this.difficulty);    this.chain.push(newBlock);  }  </code></pre><p>大功告成！我们的区块链现在拥有了POW来抵御攻击了。</p><p>测试</p><p>现在让我们来测试一下我们的区块链，看看在POW下添加一个新区块会有什么效果。我将会使用之前的代码。我们将创建一个新的区块链实例然后往里添加2个区块。</p><pre><code>let savjeeCoin = new Blockchain();  console.log(&apos;Mining block 1&apos;);  savjeeCoin.addBlock(new Block(1, &quot;20/07/2017&quot;, { amount: 4 }));  console.log(&apos;Mining block 2&apos;);  savjeeCoin.addBlock(new Block(2, &quot;20/07/2017&quot;, { amount: 8 }));  </code></pre><p>如果你运行了上面的代码，你会发现添加新区块依旧非常快。这是因为目前的难度只有2（或者你的电脑性能非常好）。</p><p>如果你创建了一个难度为5的区块链实例，你会发现你的电脑会花费大概十秒钟来挖矿。随着难度的提升，你的防御攻击的保护程度越高。</p><p>免责声明</p><p>就像之前说的：这绝不是一个完整的区块链。它仍然缺少很多功能（像P2P网路）。这只是为了说明区块链的工作原理。</p><p>并且：由于单线程的原因，用JavaScript来挖矿并不快。</p><h2 id="Part3：交易与挖矿奖励"><a href="#Part3：交易与挖矿奖励" class="headerlink" title="Part3：交易与挖矿奖励"></a>Part3：交易与挖矿奖励</h2><p>在前面两部分我们创建了一个简单的区块链，并且加入了POW来抵御攻击。然而我们在途中也偷了懒：我们的区块链只能在一个区块中存储一笔交易，而且矿工没有奖励。现在，让我们解决这个问题！</p><p>重构区块类</p><p>现在一个区块拥有index,previousHash,timestamp,data,hash和nonce属性。这个index属性并不是很有用，事实上我甚至不知道为什么开始我要将它添加进去。所以我把它移除了，同时将data改名为transactions来更语义化。</p><pre><code>class Block{    constructor(timestamp, transactions, previousHash = &apos;&apos;) {      this.previousHash = previousHash;      this.timestamp = timestamp;      this.transactions = transactions;      this.hash = this.calculateHash();      this.nonce = 0;    }  } </code></pre><p>当我们改变区块类时，我们也必须更改calculateHash()函数。现在它还在使用老旧的index和data属性。</p><pre><code>calculateHash() {    return SHA256(this.previousHash + this.timestamp + JSON.stringify(this.transactions) + this.nonce).toString();  }  </code></pre><p>交易类</p><p>在区块内，我们将可以存储多笔交易。因此我们还需要定义一个交易类，一边我们可以锁定交易应当具有的属性：<br>代码</p><pre><code>class Transaction{    constructor(fromAddress, toAddress, amount){      this.fromAddress = fromAddress;      this.toAddress = toAddress;      this.amount = amount;    }  }  </code></pre><p>这个交易例子非常的简单，仅仅包含了发起方（fromAddress）和接受方（toAddress）以及数量。如果有需求，你也可以在里面加入更多字段，不过这个只是为了最小实现。</p><p>调整我们的区块链</p><p>当前的最大任务：调整我们的区块链来适应这些新变化。我们需要做的第一件事就是存储待处理交易的地方。</p><p>正如你所知道的，由于POW，区块链可以稳定的创建区块。在比特币的场景下，难度被设置成大约每10分钟创建一个新区块。但是，是可以在创造两个区块之间提交新的交易。</p><p>为了做到这一点，首先需要改变我们区块链的构造函数，以便他可以存储待处理的交易。我们还将创造一个新的属性，用于定义矿工获得多少钱作为奖励：</p><pre><code>class Blockchain{    constructor() {      this.chain = [this.createGenesisBlock()];      this.difficulty = 5;      // 在区块产生之间存储交易的地方      this.pendingTransactions = [];      // 挖矿回报      this.miningReward = 100;    }  } </code></pre><p>下一步，我们将调整我们的addBlock()方法。不过我的调整是指删掉并重写它！我们将不再允许人们直接为链上添加区块。相反，他们必须将交易添加至下一个区块中。而且我们将addBlock()更名为createTransaction()，这看起来更语义化：</p><pre><code>createTransaction(transaction) {    // 这里应该有一些校验!    // 推入待处理交易数组    this.pendingTransactions.push(transaction);  }  </code></pre><p>挖矿</p><p>人们现在可以将新的交易添加到待处理交易的列表中。但无论如何，我们需要将他们清理掉并移入实际的区块中。为此，我们来创建一个minePendingTransactions()方法。这个方法不仅会挖掘所有待交易的新区块，而且还会向采矿者发送奖励。</p><pre><code>minePendingTransactions(miningRewardAddress) {    // 用所有待交易来创建新的区块并且开挖..    let block = new Block(Date.now(), this.pendingTransactions);    block.mineBlock(this.difficulty);    // 将新挖的看矿加入到链上    this.chain.push(block);    // 重置待处理交易列表并且发送奖励    this.pendingTransactions = [        new Transaction(null, miningRewardAddress, this.miningReward)    ];  }  </code></pre><p>请注意，该方法采用了参数miningRewardAddress。如果你开始挖矿，你可以将你的钱包地址传递给此方法。一旦成功挖到矿，系统将创建一个新的交易来给你挖矿奖励（在这个栗子里是100枚币）。</p><p>有一点需要注意的是，在这个栗子中，我们将所有待处理交易一并添加到一个区块中。但实际上，由于区块的大小是有限制的，所以这是行不通的。在比特币里，一个区块的大小大概是2Mb。如果有更多的交易能够挤进一个区块，那么矿工可以选择哪些交易达成哪些交易不达成（通常情况下费用更高的交易容易获胜）。</p><p>地址的余额</p><p>在测试我们的代码钱让我们再做一件事！如果能够检查我们区块链上地址的余额将会更好。</p><pre><code>getBalanceOfAddress(address){    let balance = 0; // you start at zero!    // 遍历每个区块以及每个区块内的交易    for(const block of this.chain){      for(const trans of block.transactions){        // 如果地址是发起方 -&gt; 减少余额        if(trans.fromAddress === address){          balance -= trans.amount;        }        // 如果地址是接收方 -&gt; 增加余额        if(trans.toAddress === address){          balance += trans.amount;        }      }    }    return balance;  }  </code></pre><p>测试</p><p>好吧，我们已经完成并可以最终一切是否可以正常工作！为此，我们创建了一些交易：</p><pre><code>let savjeeCoin = new Blockchain();  console.log(&apos;Creating some transactions...&apos;);  savjeeCoin.createTransaction(new Transaction(&apos;address1&apos;, &apos;address2&apos;, 100));  savjeeCoin.createTransaction(new Transaction(&apos;address2&apos;, &apos;address1&apos;, 50));  </code></pre><p>这些交易目前都处于等待状态，为了让他们得到证实，我们必须开始挖矿：</p><pre><code>console.log(&apos;Starting the miner...&apos;);  savjeeCoin.minePendingTransactions(&apos;xaviers-address&apos;);  </code></pre><p>当我们开始挖矿，我们也会传递一个我们想要获得挖矿奖励的地址。在这种情况下，我的地址是xaviers-address（非常复杂！）。</p><p>之后，让我们检查一下xaviers-address的账户余额：</p><pre><code>console.log(&apos;Balance of Xaviers address is&apos;, savjeeCoin.getBalanceOfAddress(&apos;xaviers-address&apos;));  // 输出: 0</code></pre><p>我的账户输出竟然是0？！等等，为什么？难道我不应该得到我的挖矿奖励么？那么，如果你仔细观察代码，你会看到系统会创建一个交易，然后将您的挖矿奖励添加为新的待处理交易。这笔交易将会包含在下一个区块中。所以如果我们再次开始挖矿，我们将收到我们的100枚硬币奖励！</p><pre><code>console.log(&apos;Starting the miner again!&apos;);  savjeeCoin.minePendingTransactions(&quot;xaviers-address&quot;);  console.log(&apos;Balance of Xaviers address is&apos;, savjeeCoin.getBalanceOfAddress(&apos;xaviers-address&apos;));  // 输出: 100</code></pre><p>局限性与结论</p><p>现在我们的区块链已经可以在一个区块上存储多笔交易，并且可以为矿工带来回报。</p><p>不过，还是有一些不足：发送货币是，我们不检查发起人是否有足够的余额来实际进行交易。然而，这其实是一件容易解决的事情。我们也没有创建一个新的钱包和签名交易（传统上用公钥/私钥加密完成）。</p><p>免责声明 &amp; 源代码</p><p>我想指出的是，这绝不是一个完整的区块链实现！它仍然缺少很多功能。这只是为了验证一些概念来帮助您来了解区块链的工作原理。</p><p>该项目的源代码就放在我的<a href="https://link.zhihu.com/?target=https://github.com/SavjeeTutorials/SavjeeCoin" target="_blank" rel="noopener">GitHub</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSR搭建属于自己的梯子</title>
      <link href="/2017/04/08/SSR%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E6%A2%AF%E5%AD%90/"/>
      <url>/2017/04/08/SSR%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E6%A2%AF%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SSR梯子切勿用于非法用途，主要是用来学习交流使用。<br>之前一直在google的蓝灯翻墙，但是后来因为部分原因时好时坏的所以决定自己研究一下梯子的搭建。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>SSTAP：链接: <a href="https://pan.baidu.com/s/1tfuR5gsUnmTNxurvn_fFNA" target="_blank" rel="noopener">https://pan.baidu.com/s/1tfuR5gsUnmTNxurvn_fFNA</a>  密码:67zb<br>Windows客户端代理工具：链接: <a href="https://pan.baidu.com/s/1pqtpMnrHRk89lWDe-IOmFQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1pqtpMnrHRk89lWDe-IOmFQ</a> 密码:fqkt<br>服务器一台：推荐使用vultr地址：<a href="http://www.vuvps.com/vultr.php" target="_blank" rel="noopener">http://www.vuvps.com/vultr.php</a><br>最后一个xShell远程终端，用来连接你的服务器，链接: <a href="https://pan.baidu.com/s/1ab2GYTH7YyLCl0qfAxp5Hg" target="_blank" rel="noopener">https://pan.baidu.com/s/1ab2GYTH7YyLCl0qfAxp5Hg</a>  密码:meeu ，只需要用一次就行了，就是SSR搭建后之后，你就可以把它卸载了。<br>准备支付宝。</p><h3 id="服务器选购"><a href="#服务器选购" class="headerlink" title="服务器选购"></a>服务器选购</h3><p>1.进入到Vultr首页，填写你的邮箱地址和登陆密码（密码需要数字+大写+小写字母），然后点击“CreateAccount”注册账号，注册成功之后,Service一栏里面，需要验证一下自己的邮箱。<br><img src="/2017/04/08/SSR搭建属于自己的梯子/1.png" alt=""></p><p>2.购买服务器需要最低充值10美金，使用支付宝付款，服务器按小时计费。</p><p>充值流程：【Billing】-【Alipay】-【Pay withAlipay】-【完成支付】<br><img src="/2017/04/08/SSR搭建属于自己的梯子/2.png" alt=""></p><p>3.支付完成后，接着选择服务器，本着最便宜的原则来购买（一般纽约为2.5美元一个月）</p><p>【Server Location】<br><img src="/2017/04/08/SSR搭建属于自己的梯子/3.png" alt=""><br>【ServerType】 选择Centos 6x64（默认是Centos 7，如果没选6也没关系）<br><img src="/2017/04/08/SSR搭建属于自己的梯子/4.png" alt=""><br>【ServerSize】反正选最便宜的。<br><img src="/2017/04/08/SSR搭建属于自己的梯子/5.png" alt=""><br>剩下的默认，最后点击右下角“DeployNow”完成购买。</p><p>PS:主机创建的时候需要等两分钟再执行下一步SSR部署</p><h3 id="SSR部署"><a href="#SSR部署" class="headerlink" title="SSR部署"></a>SSR部署</h3><p>1.下载xShell,上面有链接，vps信息在你刚刚购买的面板里面可以看到。</p><p>打开xshell，新建链接，填写主机ip，端口号，钩选重新链接，然后点连接。<br><img src="/2017/04/08/SSR搭建属于自己的梯子/6.png" alt=""><br>弹出“SSR安全警告”，选择“接受并保存”，用户名root（记得钩选记住用户名），密码在你的vultr里面去看，<br><img src="/2017/04/08/SSR搭建属于自己的梯子/7.png" alt=""><br>出现下图（root@vultr）代表成功<br><img src="/2017/04/08/SSR搭建属于自己的梯子/8.png" alt=""></p><h3 id="SSR安装"><a href="#SSR安装" class="headerlink" title="SSR安装"></a>SSR安装</h3><p>执行以下命令（密码建议修改，port可以默认）</p><pre><code>wget --no-check-certificate https://freed.ga/github/shadowsocksR.sh; bash shadowsocksR.sh</code></pre><p><img src="/2017/04/08/SSR搭建属于自己的梯子/9.png" alt=""><br><img src="/2017/04/08/SSR搭建属于自己的梯子/10.png" alt=""></p><p>出现提示“Shadowsocksr安装完成”就可以继续下一步，锐速安装（图片保存一下）。</p><h3 id="锐速安装"><a href="#锐速安装" class="headerlink" title="锐速安装"></a>锐速安装</h3><p>1.执行更换内核脚本</p><pre><code>wget -N --no-check-certificate https://freed.ga/kernel/ruisu.sh&amp;&amp; bash ruisu.sh</code></pre><p>执行之后，脚本会自动断开服务器，假如你钩选了记住用户名和密码，它会自动重连，如果没钩选也没关系，Xshel左上角【File】-【重新连接】，然后执行锐速安装脚本。</p><p>2.锐速安装脚本</p><pre><code>wget -N --no-check-certificatehttps://github.com/91yun/serverspeeder/raw/master/serverspeeder.sh&amp;&amp; bash serverspeeder.sh</code></pre><p>备用脚本(一般是centos7系统需要用到，6系统不需要执行这个)</p><pre><code>wget -N --no-check-certificatehttps://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh&amp;&amp; bash serverspeeder-all.sh</code></pre><p>如果出现版本不匹配，会出现一个选项，直接选个1就行了，直至出现下图，恭喜你，拥有了一个属于自己的SSR梯子。<br><img src="/2017/04/08/SSR搭建属于自己的梯子/11.png" alt=""></p><h3 id="SStap配置"><a href="#SStap配置" class="headerlink" title="SStap配置"></a>SStap配置</h3><p>下载SStap,安装并填写SSR信息，下载链接在上面。</p><p>你只需要填写服务器IP、端口号、密码，其他信息照着下图抄就行了。<br><img src="/2017/04/08/SSR搭建属于自己的梯子/12.png" alt=""><br>最后给个Google一张<br><img src="/2017/04/08/SSR搭建属于自己的梯子/13.png" alt=""><br>SSR各平台下载地址=》 <a href="http://www.vuvps.com/?p=112" target="_blank" rel="noopener">极光SSR各平台客户端操作软件</a></p>]]></content>
      
      
      <categories>
          
          <category> Vpn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssr </tag>
            
            <tag> vps </tag>
            
            <tag> vpn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于ddxoft的驱动级外设模拟</title>
      <link href="/2017/03/11/%E5%9F%BA%E4%BA%8Eddxoft%E7%9A%84%E9%A9%B1%E5%8A%A8%E7%BA%A7%E5%A4%96%E8%AE%BE%E6%A8%A1%E6%8B%9F/"/>
      <url>/2017/03/11/%E5%9F%BA%E4%BA%8Eddxoft%E7%9A%84%E9%A9%B1%E5%8A%A8%E7%BA%A7%E5%A4%96%E8%AE%BE%E6%A8%A1%E6%8B%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="输入层次介绍"><a href="#输入层次介绍" class="headerlink" title="输入层次介绍"></a>输入层次介绍</h3><p>1、当按下键后，键盘或鼠标产生扫描码（不同芯片的键盘产生扫描码不一样）。</p><p>2、扫描码被送给相应硬件的驱动，驱动将扫描码转换成虚拟码（就是以  vk_  打头的，其实就是byte大小的数了，不同语言的虚拟码不全一样）。</p><p>3、虚拟码插入消息队列，等待被传给相应程序。然后就是程序处理的事了。</p><h3 id="模拟层次介绍"><a href="#模拟层次介绍" class="headerlink" title="模拟层次介绍"></a>模拟层次介绍</h3><p>1、局部模拟：用程序生成虚拟码，将虚拟码直接发给程序。</p><p>其一：Java自带的Robot就是这么干的。处理普通程序还有效，游戏就不用想了。</p><p>其二：jna的自带platform中，User32类 的sendMessage、postMessage方法。处理普通程序还有效，游戏就不用想了。</p><p>2、全局模拟：将扫描码、虚拟码插入到消息队列，然后就不管了。</p><p>其一：jna的自带platform中，User32类 的keybd_event方法。处理普通程序还有效，游戏就不用想了。</p><p>其二：键盘钩子。没试过，C语言还停留在大学水平，听说改键是这么做的。</p><p>3、驱动级模拟：用程序模仿键盘端口给系统发送扫描码。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>驱动级模拟，本来准备用jna + winio试一下的。后来发现网上不少说winio太出名了，游戏会针对性防范，再加上winio64位版还要签名，所以没试，然后因为种种原因DM插件也没能使用。</p><p>后来万能的吧友提供了一个AHK的脚本可以使用，破解后发现底层还是调用的DLL。于是有了本文，用Java调用DDxoft实现驱动级模拟。</p><h3 id="加载Dll"><a href="#加载Dll" class="headerlink" title="加载Dll"></a>加载Dll</h3><pre><code>import com.sun.jna.Library;import com.sun.jna.Native;public interface DdXoft extends Library {    DdXoft INSTANCE = (DdXoft) Native.loadLibrary(UnifyEnum.DDXOFT64.v(), DdXoft.class);    //64位JAVA调用*64.dll, 32位调用*32.dll 。与系统本身位数无关。、    int DD_mov(int x, int y);//绝对移动    int DD_movR(int dx, int dy);//相对移动    int DD_btn(int btn);//鼠标    int DD_whl(int whl); //滑轮    int DD_key(int ddcode, int flag);//键盘    int DD_str(String s);//字符串}</code></pre><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><p>位置判断还是用的Robot</p><pre><code>/** * 判断某点颜色是否相同 相同则按下 * * @return */public static boolean existPressKey(Robot robot, Entry entry, int ddCode) {    if (isEquals(robot, entry)) {        return pressKey(robot, entry, ddCode);    }    return false;}</code></pre><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>直接调用DDxoft,一些底层的东西还是C靠谱</p><pre><code>/** * 直接按下某键 */public static boolean pressKey(Robot robot, Entry entry, int ddCode) {    //robot.keyPress(keyCode);    DdXoft.INSTANCE.DD_key(ddCode, 1);    robot.delay(entry.press);    //robot.keyRelease(keyCode);    DdXoft.INSTANCE.DD_key(ddCode, 2);    robot.delay(entry.release);    System.out.println(&quot;{&quot; + entry.skill + &quot;}&quot; +            SkillEnum.PRESS.v() + &quot;:&quot; + entry.press + SkillEnum.MS.v() +            SkillEnum.RELEASE.v() + &quot;:&quot; + entry.release + SkillEnum.MS.v());    return true;}</code></pre><p>完整的程序 在我的github上，界面使用JavaFx，<a href="https://github.com/yibierusi/blade-and-bns-macro" target="_blank" rel="noopener">剑灵灵剑卡到程序</a></p>]]></content>
      
      
      <categories>
          
          <category> Dll </category>
          
      </categories>
      
      
        <tags>
            
            <tag> script </tag>
            
            <tag> ddxoft </tag>
            
            <tag> jIntellitype </tag>
            
            <tag> dll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Java的软件级外设模拟</title>
      <link href="/2017/03/05/%E5%9F%BA%E4%BA%8EJava%E7%9A%84%E8%BD%AF%E4%BB%B6%E7%BA%A7%E5%A4%96%E8%AE%BE%E6%A8%A1%E6%8B%9F/"/>
      <url>/2017/03/05/%E5%9F%BA%E4%BA%8EJava%E7%9A%84%E8%BD%AF%E4%BB%B6%E7%BA%A7%E5%A4%96%E8%AE%BE%E6%A8%A1%E6%8B%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在打副本的时候发现长时间大量重复的操作，非常影响游戏体验，并且达不到卡刀效果，无法有效的解除技能衔接之间的前后摇，使输出无法最大化，于是决定写一个脚本优化这一现象。前后试了很多方法，比如按键精灵，易语言，AHK，不是刚一登陆游戏就被检测出来了，就是一登陆游戏按键时间就失效了。</p><p>本文介绍的是Java的Robot 相比之前Java版本的按键模拟更加强大,但仍然属于软件级模拟，部分游戏仍然会被检测出来，下一篇博客会介绍驱动级的键盘模拟。</p><p>官方JavaDocsApi: j<a href="https://docs.oracle.com/javase/8/docs/api/java/awt/Robot.html" target="_blank" rel="noopener">ava.awt.Robot</a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Robot，机器人。此类用于为测试自动化、自运行演示程序和其他需要控制鼠标和键盘的应用程序生成本机系统输入事件。Robot 的主要目的是便于 Java 平台实现自动测试。</p><p>Robot 可以模拟鼠标和键盘的输入，相当于 Java 版的按键精灵。</p><h3 id="Robot-构造方法"><a href="#Robot-构造方法" class="headerlink" title="Robot 构造方法"></a>Robot 构造方法</h3><pre><code>// 在基本屏幕坐标系中构造一个 Robot 对象, 如果平台不支持 Robot, 将抛出异常Robot()// 为给定屏幕设备创建一个 Robot（用于同时使用多个显示设备的情况）Robot(GraphicsDevice screen)</code></pre><h3 id="模拟鼠标"><a href="#模拟鼠标" class="headerlink" title="模拟鼠标"></a>模拟鼠标</h3><pre><code>// 将鼠标指针移动到指定屏幕坐标void mouseMove(int x, int y)/** * 按下/释放一个或多个鼠标按钮, 参数说明: *     buttons: 鼠标按钮掩码, 一个或多个以下标志的组合: *     InputEvent.BUTTON1_MASK 鼠标左键 *     InputEvent.BUTTON2_MASK 鼠标中键 *     InputEvent.BUTTON3_MASK 鼠标右键 */    void mousePress(int buttons)    void mouseRelease(int buttons)    // 在配有滚轮的鼠标上旋转滚轮    void mouseWheel(int wheelAmt)</code></pre><h3 id="模拟键盘"><a href="#模拟键盘" class="headerlink" title="模拟键盘"></a>模拟键盘</h3><pre><code>/** * 按下/释放键盘按键, 参数说明: *     keycode: 键盘键值常量, 定义在 KeyEvent.VK_XXX 中 */    void keyPress(int keycode)    void keyRelease(int keycode)</code></pre><h3 id="屏幕相关"><a href="#屏幕相关" class="headerlink" title="屏幕相关"></a>屏幕相关</h3><pre><code>// 获取指定屏幕坐标处的像素颜色Color getPixelColor(int x, int y)// 截屏, 截取指定的矩形区域BufferedImage createScreenCapture(Rectangle screenRect)</code></pre><h3 id="控制类"><a href="#控制类" class="headerlink" title="控制类"></a>控制类</h3><pre><code>// 睡眠指定的时间, 相当于 Thread.sleep(long ms)void delay(int ms)// 在处理完当前事件队列中的所有事件之前, 一直等待void waitForIdle()// 设置此 Robot 在生成一个事件后是否自动调用 waitForIdle()// 设置为 true, 表示添加的事件逐个按顺序执行（执行完一个再执行下一个）void setAutoWaitForIdle(boolean isOn)boolean isAutoWaitForIdle()// 设置此 Robot 每在生成一个事件后自动睡眠的毫秒数void setAutoDelay(int ms)int getAutoDelay()</code></pre><h3 id="模拟鼠标事件"><a href="#模拟鼠标事件" class="headerlink" title="模拟鼠标事件"></a>模拟鼠标事件</h3><pre><code>package com.xiets.robot;import java.awt.*;import java.awt.event.InputEvent;public class Main {    public static void main(String[] args) throws AWTException {        // 创建 Robot 实例        Robot robot = new Robot();        // 执行完一个事件后再执行下一个        robot.setAutoWaitForIdle(true);        // 移动鼠标到指定屏幕坐标        robot.mouseMove(100, 100);        // 按下鼠标左键        robot.mousePress(InputEvent.BUTTON1_MASK);        // 延时100毫秒        robot.delay(100);        // 释放鼠标左键（按下后必须要释放, 一次点击操作包含了按下和释放）        robot.mouseRelease(InputEvent.BUTTON1_MASK);    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> robot </tag>
            
            <tag> script </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo系列（四）：yelee主题下载以及配置</title>
      <link href="/2017/02/09/Hexo%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9Ayelee%E4%B8%BB%E9%A2%98%E4%B8%8B%E8%BD%BD%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/02/09/Hexo%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9Ayelee%E4%B8%BB%E9%A2%98%E4%B8%8B%E8%BD%BD%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前搭建的博客基本功能已经实现了，新搭建的博客的默认主题都是<code>landscape</code>，略显简单，我的主题是基于<code>yelee</code>风格的，作者也是在<code>hexo-theme-yilia</code>的基础上进行的修改。具体的使用可以参考<a href="http://moxfive.coding.me/yelee/" target="_blank" rel="noopener">官方API</a></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>CD到 <code>themes</code> 路径下执行clone命令下载主题</p><pre><code>git clone https://github.com/MOxFIVE/hexo-theme-yelee.git</code></pre><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>打开项目目录下的<code>_config.yml</code>文件</p><p>主题更改，注意的是在<code>yelee</code>前面有个空格，主题<code>yml</code>格式可以自行百度</p><pre><code>theme: yelee</code></pre><h3 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h3><pre><code>cd themes/yeleegit pull</code></pre><p><strong>注意</strong>：请先备份你的<code>_config.yml</code>文件后再升级<br>更新好后，本地启动起来效果</p><pre><code>hexo server -g  #生成加预览</code></pre><p><img src="/2017/02/09/Hexo系列（四）：yelee主题下载以及配置/1.jpg" alt="主题预览效果"></p><h3 id="主题的-config-yml配置"><a href="#主题的-config-yml配置" class="headerlink" title="主题的_config.yml配置"></a>主题的_config.yml配置</h3><p>配置文件<code>_config.yml</code>位于主题根目录下,下面贴出我的配置</p><pre><code># Theme Version | 当前版本Yelee: &quot;3.5&quot;# &gt;&gt;&gt; Basic Setup | 基础设置 &lt;&lt;&lt;# Header | 主菜单## About Page: `hexo new page about`## Tags Cloud Page: `hexo new page tags`menu:  主页: /  所有文章: /archives/  #随笔: /tags/随笔  标签云: /tags/  关于我: /about/# Link to your avatar | 填写头像地址avatar: /img/avatar.png# Small icon of Your site | 站点小图标地址favicon: /favicon.png# Internationalization | 主题语言## Change Language in SITE&apos;s _config.yml | 在站点配置中切换语言## https://hexo.io/docs/internationalization.html## Available Languages: en, zh-Hans, zh-Hant-TW, zh-Hant-HK# Subdirectory | 子目录## If your site&apos; url is &apos;http://yoursite.com/blog&apos;, set root_url as &apos;/blog/&apos;## 网站若存放在子目录，请按上面格式填写## https://hexo.io/docs/configuration.html#URLroot_url: # Year of Site Creation | 网站成立年份since: 2016# Social info. Bar | 社交信息展示## Keep &quot;mailto:&quot; in Email | 设置 Email 时保留 &quot;mailto:&quot;## Encrypt email 加密邮件地址 http://ctrlq.org/encode/## RSS requires a plugin to take effect | 使用 RSS 需先安装对应插件## https://github.com/hexojs/hexo-generator-feed#社交subnav:  Email: &quot;mailto:zhouhy1205@aliyun.com&quot;  #新浪微博: &quot;sina weibo&quot;  GitHub: &quot;https://github.com/yibierusi&quot;  #V2EX: &quot;#&quot;  RSS: &quot;/atom.xml&quot;  #知乎: &quot;zhihu&quot;  #豆瓣: &quot;douban&quot;  #简书: &quot;jianshu&quot;  #SegmentFault: &quot;&quot;  #博客园: &quot;cnblogs&quot;  #CSDN: &quot;&quot;  #Coding: &quot;&quot;  网易云音乐: &quot;https://music.163.com/#/user/home?id=110939435&quot;  #虾米音乐: &quot;xiami&quot;  #bilibili: &quot;&quot;  #AcFun: &quot;&quot;  #niconico: &quot;&quot;  #Quora: &quot;&quot;  #Facebook: &quot;#&quot;  #Google: &quot;#&quot;  #Twitter: &quot;#&quot;  #LinkedIn: &quot;#&quot;  #QQ: &quot;4670049&quot;  #微信: &quot;zy4670049&quot;  #PayPal: &quot;#&quot;  #StackOverflow: &quot;#&quot;  #CodePen: &quot;&quot;  #Plunker: &quot;&quot;  #Instagram: &quot;#&quot;  #LOFTER: &quot;&quot;  #Flickr: &quot;#&quot;  #reddit: &quot;&quot;  #Medium: &quot;&quot;  #TiddlyWiki: &quot;&quot;  #Tumblr: &quot;&quot;  #_500px: &quot;&quot;# &gt;&gt;&gt; Conments 评论系统 &lt;&lt;&lt;# Chose ONE as your comment system and keep others disable.# 选一个作为网站评论系统，其他保持禁用。preload_comment: true## false: 当点击评论条等区域时再加载评论模块## false: load comment&apos;s section until u click/hover on the bar/iconshow_count: true## 是否在主页文章标题旁显示评论数（多说、Disqus）## Add comment count after article title#来必力    livere:  on: true  livere_uid: MTAyMC80MjA0MC8xODU4Nw==disqus:   #on: true  shortname:   # https://help.disqus.com/customer/en/portal/articles/466208-what-s-a-shortname-  # It is unnecessary to enable disqus here if   # you have set &quot;disqus_shortname&quot; in your site&apos;s &quot;_config.yml&quot; duoshuo:   #on: true  domain:   # 是否开启多说评论，http://duoshuo.com/create-site/  # 使用上面网址登陆你的多说，然后创建站点，在 domain 中填入你设定的域名前半部分  # http://&lt;要填的部分&gt;.duoshuo.com (domain只填上&lt;&gt;里的内容，不要填整个网址)youyan:  #on: true  id:   # 是否开启友言评论，http://www.uyan.cc/index.php  # id 中填写你的友言用户数字ID，注册后进入后台管理即可查看  # 友言服务在 Web 环境下运行，普通本地环境无法查看，请部署后在线上测试。# &gt;&gt;&gt; Style Customisation 样式自定义 &lt;&lt;&lt;# Background | 背景## &quot;5&quot;: show images form bg-1.jpg to bg-5.jpg in `/yelee/source/background/`## &quot;5&quot;: 显示`/yelee/source/background/`文件夹中 bg-1.jpg 到 bg-5.jpg 这5张图片## &quot;0&quot;: white-gray background | 淳朴灰白背景background_image: 5# Base Font Size | 字号调节base_font_size: 16  #px, 16 - 24## General Color Scheme | 主题配色方案 ## 可用值 Value: yiliacolor_scheme: yiliahighlight_style:  #on: true  inline_code: 1  # Value: 0 - 9 可选  code_block: 1  # Value: 0 - 4   # Set inline_code to style highlight text  # Chose a highlight theme for code block  # 通过 inline_code 切换内置文本高亮样式  # 通过 code_block 切换内置代码高亮配色主题blockquote_style:  #on: true  blockquote: 1  # Value: 0 - 7 可选  # 自定义文章「引用部分」的样式# Headings Style | 标题风格## 0-Yelee, 1-Yilia, 2-GitHubheading_style: 0 # Value: 0 - 2## List style type (ul) | 无序列表项标记样式list_style: 0  # value: 0 - 12 可选# 左边栏宽度 pxleft_col_width: 300# Copyright info. of post | 文末版权信息copyright: true# Table of contents | 文章目录toc:  on: true  list_number: true # 目录序号  max_depth: 3  # 1 - 6 (h1-h6) 目录最大级数  nowrap: false # Keep title on same line | 目录标题不换行# 是否开启主页及加载头像时的动画效果# Animation in Homepage and Loading avataranimate: true# Load jQuery UI to style tooltips# 工具提示框样式美化jquery_ui: true# Max width of right cloumn | 限制右侧内容的宽带 limit_article_width:   on: false  max_width: 60 # em# &gt;&gt;&gt; Small features | 小功能设置 &lt;&lt;&lt;# 是否开启边栏多标签切换# Birdhouse button in left columntagcloud: true# Blogroll, Link exchange | 友情链接friends:  Hexo: https://hexo.io  GitHub: https://pages.github.com/  MOxFIVE: http://moxfive.xyz/#friends: false#是否开启“关于我”。aboutme: 专注于前端#aboutme: false# Open link in a new tab | 是否在新窗口打开链接## `global` 0: Set separately, 1: Open all in new 2: Open all in current## `global` 0: 分开设置, 1: 全部在新标签打开, 2: 全部在&quot;当前&quot;标签打开open_in_new:  global: 0 # 0-2  title: false # article title in homepage 主页文章标题  post: false # link within post/page 正文中的链接  tags: false # 标签  categories: false # 分类  article_nav: false # 导航  archives: true # 归档  mini_archives: true # 迷你归档  menu: false # 边栏菜单  friends: true  # 友情链接  socail: true # 社交图标# Customize feed link 自定义订阅地址rss: /atom.xml# Update Reminder for IE6/7/8# 针对 IE6/7/8 的升级浏览器提示ie_updater:  on: true  link: //outdatedbrowser.com/  ## http://browsehappy.com/  ## http://outdatedbrowser.com/# Tab Title Change | 标签页标题切换tab_title_change:   on: false  left_tab_title: &apos;(つェ⊂) 我藏好了哦~ &apos;  return_tab_title: &apos;(*´∇｀*) 被你发现啦~ &apos;# &gt;&gt;&gt; Vendors | 第三方工具 &amp; 服务 &lt;&lt;&lt;# Local Site Search | 本地站内搜索## Insatall below plugin to take effect | 使用搜索需先安装对应插件## https://github.com/PaicHyperionDev/hexo-generator-searchsearch:   #on: true  onload: true  ## true: get search.xml file when the page has loaded  ## false: get the file when search box gets focus# images viewer | 图片浏览器## http://www.fancyapps.com/fancybox/fancybox: true# Display Math(LaTeX, MathML...) | 数学公式支持## https://www.mathjax.org/mathjax: false# Socail Share | 是否开启分享share:   on: true  baidu: true  addthis: false  addthis_pubid: &quot;ra-56ff76c972fc0cf9&quot;  ## Go to www.addthis.com/dashboard to get your pubid (in src of Code)  ## and customize AddThis share buttons# 百度、谷歌站长验证。填写 HTML 标签 content# Site Verification for Google and Baidu. HTML label content.baidu_site: google_site: # Fill in Google Analytics tracking ID, #e.g. UA-XXXXX-Xgoogle_analytics: # 百度统计 http://sitecenter.baidu.com/sc-web/# 查看代码，填入 //hm.baidu.com/hm.js? 之后的内容baidu_tongji: # 不蒜子网站计数设置# http://ibruce.info/2015/04/04/busuanzi/visit_counter:  on: true  site_visit: true  page_visit: true# GitHub Repo Widget# https://github.com/hustcc/GitHub-Repo-Widget.jsgithub_widget: false# Progress Bar | 页面加载进度条# Demo: http://github.hubspot.com/pace/docs/welcome/# type: barber-shop|big-counter|bounce|center-atom|center-circle|#       center-radar|center-simple|corner-indicator|flash|flat-top|#       loading-bar|mac-osx|minimal# color: black|blue|green|orange|pink|purple|red|silver|white|yellow|progressBar:  on: true  type: &quot;minimal&quot;  # Keep Quotes | 保留引号避免出错  color: blueCDN:  jquery: //cdn.bootcss.com/jquery/2.2.4/jquery.min.js  require: //cdn.bootcss.com/require.js/2.2.0/require.min.js  fontawesome: //cdn.bootcss.com/font-awesome/4.6.3/css/font-awesome.min.css  fancybox_js: //cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.js  fancybox_css: //cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css  animate_css: //cdn.bootcss.com/animate.css/3.5.1/animate.min.css  jquery_ui_js: //cdn.bootcss.com/jqueryui/1.10.4/jquery-ui.min.js  jquery_ui_css: //cdn.bootcss.com/jqueryui/1.10.4/css/jquery-ui.min.css  pace_js: //cdn.bootcss.com/pace/1.0.2/pace.min.js  clipboard: //cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js  mathjax: //cdn.bootcss.com/mathjax/2.6.1/MathJax.js  scrollreveal: //cdn.bootcss.com/scrollReveal.js/3.1.4/scrollreveal.min.js</code></pre><p>说明:</p><ul><li>menu 默认没有启用 /tags 和 /categories页面，如果需要使用 Hexo 命令新建一个名为 <code>tags</code>，<code>categories</code> 的页面即可<code>hexo new page tags</code>，<code>hexo new page categories</code> 因为主题中已经内置了这两个页面的模板，所以他们会被正确的解析出来。</li></ul><p>因为配置中很多有注释，或者官网有详细的说明，本文中就说一下常用的。</p><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><p>使用搜索需先安装对应插件，用于生成索引数据<br>插件主页: <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a></p><p><code>#on: true</code> 改为 <code>on: true</code>即为启用搜索</p><pre><code>search:   on: true  onload: false</code></pre><p><code>onload: true</code> : 索引数据 <code>search.xml</code> 随页面一起加载 [效率优先]</p><p><code>onload: false</code> : 当激活搜索框时再下载索引数据 [按需加载]<br><img src="/2017/02/09/Hexo系列（四）：yelee主题下载以及配置/2.jpg" alt="本地搜索效果"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> yelee </tag>
            
            <tag> themes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo系列（三）：上传资源到博客</title>
      <link href="/2017/02/01/Hexo%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%B8%8A%E4%BC%A0%E8%B5%84%E6%BA%90%E5%88%B0%E5%8D%9A%E5%AE%A2/"/>
      <url>/2017/02/01/Hexo%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E4%B8%8A%E4%BC%A0%E8%B5%84%E6%BA%90%E5%88%B0%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用Hexo+Github搭建博客的初衷就是不想去购买服务器，备案，搭建服务等，所以也不存在文件上传的问题。那么博客中有时需要用到的图片，这里的图片就是静态图片。</p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>cd到博客根目录下 查看<code>_config.yml</code>文件 查找 <code>post_asset_folder</code> 字段，将post_asset_folder 设置为true ， <code>post_asset_folder:true</code>。</p><p>当设置 <code>post_asset_folder</code> 参数为<code>true</code>，在建立文件时，Hexo 会自动建立一个与文章同名的文件夹，可以把与该文章相关的所有资源都放到此文件夹内，这样就可以更方便的使用资源。</p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>到博客的根目录下执行 <code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code> 命令来进行插件的安装。</p><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><p>然后创建一文章 <code>hexo new &quot;test&quot;</code> 然后查看博客的 ../source/_posts 目录下的文件，会看到存在一个test 文件夹 和 test.md 文件<br><img src="/2017/02/01/Hexo系列（三）：上传资源到博客/1.jpg" alt=""></p><h3 id="添加资源"><a href="#添加资源" class="headerlink" title="添加资源"></a>添加资源</h3><p>将所需要的图片资源放到test 文件夹 内 目录结构如下：<br><img src="/2017/02/01/Hexo系列（三）：上传资源到博客/2.jpg" alt=""></p><h3 id="使用资源"><a href="#使用资源" class="headerlink" title="使用资源"></a>使用资源</h3><p>书写文章使用test文件内 的图片<br><img src="/2017/02/01/Hexo系列（三）：上传资源到博客/3.jpg" alt=""></p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>1.使用<code>hexo s</code> 命令运行本地博客即可看到效果</p><p>2.使用<code>hexo clean</code> <code>，hexo g</code> ，<code>hexo d</code>将本地博客推送到远程，即可看到文章中的图片</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> static </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo系列（二）：Github上发布博客</title>
      <link href="/2017/01/12/Hexo%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AGithub%E4%B8%8A%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2/"/>
      <url>/2017/01/12/Hexo%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AGithub%E4%B8%8A%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<!-- # Hexo：Github上发布博客（二）--><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇博客介绍了怎么搭建本地的静态博客，本文内容是将本地的博客通过GitHub Pages发布，使外网可以访问,coding上同理，本文只介绍Github。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>发布前的准备：</p><ul><li>注册Github账号</li></ul><h3 id="创建Github-仓库"><a href="#创建Github-仓库" class="headerlink" title="创建Github 仓库"></a>创建Github 仓库</h3><p>注册完成之后,点击头像左侧的<code>+</code>号, —&gt;<code>New repository</code>，创建新仓库<br><img src="/2017/01/12/Hexo系列（二）：Github上发布博客/1.jpg" alt=""></p><p>因为创建的是个人网站，所以仓库的名称需要安装GitHub个人网站项目的规定来写。<br>规则就是：</p><pre><code>username.github.io</code></pre><p>比如我的GitHub用户名是<code>yibierusi</code>，那我就要填写 <code>yibierusi.github.io</code>。然后选择<code>Public</code>模式，接着点击<code>创建仓库</code>按钮,因为我的已经创建了，所以这里会提示已经存在。<br><img src="/2017/01/12/Hexo系列（二）：Github上发布博客/2.jpg" alt=""></p><h3 id="推送部署"><a href="#推送部署" class="headerlink" title="推送部署"></a>推送部署</h3><p>在根目录下的<code>_config.yml</code>中添加git信息，之后在cmd下通过 <code>hexo d</code> 一键推送本地代码并部署。</p><pre><code>deploy:  type: git  repository: git@github.com:yibierusi/yibierusi.github.io.git  branch: master</code></pre><h3 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h3><p>代码推送成功后，进入新仓库，点击<code>Settings</code>，找到<code>GitHub Pages</code> 设置主题，并且绑定自定义域名<br><img src="/2017/01/12/Hexo系列（二）：Github上发布博客/3.jpg" alt=""><br>第一个红框是选择分支<br>第二个红框是选择主题<br>第三个红框是自定义域名，没有就访问<code>username.github.io</code>，如果有域名需要在域名供应上处解析，并设置第三个红框，否则404，我用的是阿里云的域名。解析配置如下图：<br><img src="/2017/01/12/Hexo系列（二）：Github上发布博客/4.jpg" alt=""></p><p>绑定自定义域名后会生成一个<code>CNAME</code>文件，文件内容就是刚刚绑定的域名<code>zhouhy.top</code>。到了这一步，我们已经完成了个人博客的创建，稍等一两分钟就可以通过域名访问自己的博客了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo系列（一）：个人博客搭建</title>
      <link href="/2017/01/08/Hexo%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2017/01/08/Hexo%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<!-- # Hexo：个人博客搭建（一）--><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大学的时候就有写技术博客的习惯，那时在CSDN。毕业后比较忙，没时间去审词酌句写一篇完整的博客，大部分心得体会都写在有道云笔记中。但记笔记的效果是完全不能跟写博客相比的。一直想写一个自己的个人博客项目，但是没找到满意的前段模板也不想写大量的CSS，再加上备案也麻烦，一直搁浅到现在。无意间发现Hexo这个优秀的静态博客框架，所以写个博客记录一下，也给想搭建Hexo博客的朋友多一点参考。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>操作系统：Windwos 10</p><p>需要安装的软件：Node.js。用来创建hexo博客框架的，我当前安装版本为node-v5.6.0-x64。</p><p>Node.js的安装配置教程参照：<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在CMD下，利用 npm 命令即可安装。</p><p>输入安装hexo命令：</p><pre><code>npm install -g hexo</code></pre><p>或者</p><pre><code>npm install hexo-cli -g</code></pre><p>安装完成后，在你想要搭建的路径下（如D:\hexo），执行以下指令(在D:\hexo下调用CMD，或者CMD下cd到D:\hexo)，Hexo 即会自动在目标文件夹建立网站所需要的所有文件<br><img src="/2017/01/08/Hexo系列（一）：个人博客搭建/1.jpg" alt=""></p><pre><code>hexo init</code></pre><p>安装所需依赖包：</p><pre><code>npm install</code></pre><p>安装后之后执行以下命令，#后为注释，不用输入</p><pre><code>hexo g #用于生成静态文件hexo s #用于启动服务器，主要用来本地预览</code></pre><p>此时访问路径<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ，就可以看到一个搭建完成的hexo博客了，当前博客为本地预览版，外网不能访问。</p><h3 id="Hexo常用的命令"><a href="#Hexo常用的命令" class="headerlink" title="Hexo常用的命令"></a>Hexo常用的命令</h3><p>介绍几个hexo常用的命令,通过<code>hexo n</code>生成md（生成的md文件位置D:\hexo\source_posts\）。</p><p>然后通过Markdown编辑器（这里推荐Markdownpad2编辑器）可以对博客进行编写，编写之后通过<code>hexo g</code>命令生成静态文件。</p><p>执行<code>hexo s</code>用于启动服务器，主要用来本地预览。</p><p>预览没问题之后通过<code>hexo d</code>将本地文件发布到你的github或者coding上。</p><pre><code>hexo g #完整命令为hexo generate,用于生成静态文件hexo s #完整命令为hexo server,用于启动服务器，主要用来本地预览hexo d #完整命令为hexo deploy,用于将本地文件发布到github或者coding上hexo n #完整命令为hexo new,用于新建一篇文章</code></pre><h3 id="hexo文目录"><a href="#hexo文目录" class="headerlink" title="hexo文目录"></a>hexo文目录</h3><p>_<strong>config.yml</strong>:网站的 配置 信息，您可以在此配置大部分的参数。</p><p><strong>package.json</strong>:应用程序的信息。</p><p><strong>scaffolds</strong>:模版文件夹。当您新建文章时，Hexo会根据scaffold 来建立文件。</p><p><strong>source</strong>:资源文件夹是存放用户资源的地方。除posts文件夹之外，开头命名为(下划线)的文件/文件夹和隐藏的文件将会被忽略。Markdown和HTML文件会被解析并放到public文件夹，而其他文件会被拷贝过去。</p><p><strong>themes</strong>:主题 文件夹。Hexo会根据主题来生成静态页面。</p><h3 id="hexo的-config-yml配置"><a href="#hexo的-config-yml配置" class="headerlink" title="hexo的_config.yml配置"></a>hexo的_config.yml配置</h3><pre><code># Hexo Configuration# Docs: https://hexo.io/docs/configuration.html# Source: https://github.com/hexojs/hexo/# Site  网站title: zhouhy                                                              #网站标题subtitle: 勤学如春起之苗，不见其增，日有所长；辍学如磨刀之石，不见其损，日有所亏。  #网站副标题description: description                                                   #网站描述keywords:author: zhouhy                                                             #名字language: zh_CN                                                            #网站使用的语言timezone:                                                                  #网站时区。Hexo 默认使用您电脑的时区# URL 网址## 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。url: http://zhouhy.toproot: /permalink: :year/:month/:day/:title/permalink_defaults:# Directory 目录配置source_dir: source          #源文件夹，这个文件夹用来存放内容。public_dir: public         #公共文件夹，这个文件夹用于存放生成的站点文件。tag_dir: tags              #标签文件夹archive_dir: archives     #归档文件夹category_dir: categories #分类文件夹code_dir: downloads/code #nclude code 文件夹i18n_dir: :lang              #国际化（i18n）文件夹skip_render:              #跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。# Writing 文章new_post_name: :title.md # 新建文章默认文件名default_layout: post     # 默认布局titlecase: false          # Transform title into titlecaseexternal_link: true      # 在新标签中打开一个外部链接，默认为truefilename_case: 0         #转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。render_drafts: false       #是否渲染_drafts目录下的文章，默认为falsepost_asset_folder: false #启动 Asset 文件夹relative_link: false     #把链接改为与根目录的相对位址，默认falsefuture: true             #显示未来的文章，默认falsehighlight:                 #代码块的设置  enable: true  line_number: true  auto_detect: false  tab_replace:# Category &amp; Tag 分类和标签的设置default_category: uncategorized        #默认分类category_map:                        #分类别名tag_map:                            #标签别名# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Home page setting# path: Root path for your blogs index page. (default = &apos;&apos;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator:  path: &apos;&apos;  per_page: 10        order_by: -date# Pagination## Set per_page to 0 to disable paginationper_page: 10            #每页显示的文章量 (0 = 关闭分页功能)pagination_dir: page    #分页目录# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape        #主题（皮肤）# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo:         #github: git@github.com:yibierusi/zhou.github.io.git,master        coding: git@git.coding.net:zhouhy1205/blog.git,master</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
