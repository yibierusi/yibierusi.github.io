<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2019/03/15/JiGuang-Push/"/>
      <url>/2019/03/15/JiGuang-Push/</url>
      
        <content type="html"><![CDATA[<hr><p>title: 极光推送功能集成<br>date: 2018-12-15 16:44:21<br>updated: 2018-12-15 16:44:21<br>tags: [极光,推送]<br>categories: APP</p><h2 id="description-“现在手机App中，每天都能收到大量的推送，这种推送是让用户了解app最新活动与消息，也是提醒用户参与活动并使用app的一个方法，在app中是必不可少的”"><a href="#description-“现在手机App中，每天都能收到大量的推送，这种推送是让用户了解app最新活动与消息，也是提醒用户参与活动并使用app的一个方法，在app中是必不可少的”" class="headerlink" title="description: “现在手机App中，每天都能收到大量的推送，这种推送是让用户了解app最新活动与消息，也是提醒用户参与活动并使用app的一个方法，在app中是必不可少的”"></a>description: “现在手机App中，每天都能收到大量的推送，这种推送是让用户了解app最新活动与消息，也是提醒用户参与活动并使用app的一个方法，在app中是必不可少的”</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近一直想写点东西，但是沉迷吃鸡无法自拔。还有就是我比较懒，稍有少许安逸就不想行动了。<br>今天主要是集成极光服务的推送功能，直接记下来好了。我的Java项目主要是需要集成极光的推送消息给android、IOS，所以在这里我只会介绍怎么给极光推送，至于APP端也很简单，根据你的推送方式设置别名，标签或者ID即可。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="注册极光"><a href="#注册极光" class="headerlink" title="注册极光"></a>注册极光</h3><p>第一步，注册极光账号，这个就不需要多说了，<a href="https://www.jiguang.cn" target="_blank" rel="noopener">极光官网</a>。<br>注册好了之后创建一个应用，创建完成后,记住AppKey 与 Master Secret 后面会用到。</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre><code>&lt;dependency&gt;    &lt;groupId&gt;cn.jpush.api&lt;/groupId&gt;    &lt;artifactId&gt;jpush-client&lt;/artifactId&gt;    &lt;version&gt;3.2.17&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>现在一般都是Maven项目吧！！！如果不是去<a href="https://mvnrepository.com" target="_blank" rel="noopener">Maven仓库</a>下载。</p><h3 id="创建Jpush帮助类"><a href="#创建Jpush帮助类" class="headerlink" title="创建Jpush帮助类"></a>创建Jpush帮助类</h3><pre><code>private final static String appKey = &quot;860d817c725842c111111111&quot;;private final static String masterSecret = &quot;36169d64e73ccd3111111111&quot;;private static JPushClient jPushClient = new JPushClient(masterSecret, appKey);</code></pre><p>AppKey 和  Master Secret 就是前面创建应用得到的。<br>JPushClient 就是我们创建的实例<br>以下是具体推送的代码</p><pre><code>/** * 推送给设备标识参数的用户 * @param registrationId 设备标识 * @param notification_title 通知内容标题 * @param msg_title 消息内容标题 * @param msg_content 消息内容 * @param extrasparam 扩展字段 * @return 0推送失败，1推送成功 */public static int sendToRegistrationId( String registrationId,String notification_title, String msg_title, String msg_content, String extrasparam) {    int result = 0;    try {        PushPayload pushPayload= JpushClientUtil.buildPushObject_all_registrationId_alertWithTitle(registrationId,notification_title,msg_title,msg_content,extrasparam);        System.out.println(pushPayload);        PushResult pushResult=jPushClient.sendPush(pushPayload);        System.out.println(pushResult);        if(pushResult.getResponseCode()==200){            result=1;        }    } catch (APIConnectionException e) {        e.printStackTrace();    } catch (APIRequestException e) {        e.printStackTrace();    }    return result;}/** * 发送给所有安卓用户 * @param notification_title 通知内容标题 * @param msg_title 消息内容标题 * @param msg_content 消息内容 * @param extrasparam 扩展字段 * @return 0推送失败，1推送成功 */public static int sendToAllAndroid( String notification_title, String msg_title, String msg_content, String extrasparam) {    int result = 0;    try {        PushPayload pushPayload= JpushClientUtil.buildPushObject_android_all_alertWithTitle(notification_title,msg_title,msg_content,extrasparam);        System.out.println(pushPayload);        PushResult pushResult=jPushClient.sendPush(pushPayload);        System.out.println(pushResult);        if(pushResult.getResponseCode()==200){            result=1;        }    } catch (Exception e) {        e.printStackTrace();    }    return result;}/** * 发送给所有IOS用户 * @param notification_title 通知内容标题 * @param msg_title 消息内容标题 * @param msg_content 消息内容 * @param extrasparam 扩展字段 * @return 0推送失败，1推送成功 */public static int sendToAllIos(String notification_title, String msg_title, String msg_content, String extrasparam) {    int result = 0;    try {        PushPayload pushPayload= JpushClientUtil.buildPushObject_ios_all_alertWithTitle(notification_title,msg_title,msg_content,extrasparam);        System.out.println(pushPayload);        PushResult pushResult=jPushClient.sendPush(pushPayload);        System.out.println(pushResult);        if(pushResult.getResponseCode()==200){            result=1;        }    } catch (Exception e) {        e.printStackTrace();    }    return result;}/** * 发送给所有用户 * @param notification_title 通知内容标题 * @param msg_title 消息内容标题 * @param msg_content 消息内容 * @param extrasparam 扩展字段 * @return 0推送失败，1推送成功 */public static int sendToAll( String notification_title, String msg_title, String msg_content, String extrasparam) {    int result = 0;    try {        PushPayload pushPayload= JpushClientUtil.buildPushObject_android_and_ios(notification_title,msg_title,msg_content,extrasparam);        System.out.println(pushPayload);        PushResult pushResult=jPushClient.sendPush(pushPayload);        System.out.println(pushResult);        if(pushResult.getResponseCode()==200){            result=1;        }    } catch (Exception e) {        e.printStackTrace();    }    return result;}public static PushPayload buildPushObject_android_and_ios(String notification_title, String msg_title, String msg_content, String extrasparam) {    return PushPayload.newBuilder()            .setPlatform(Platform.android_ios())            .setAudience(Audience.all())            .setNotification(Notification.newBuilder()                    .setAlert(notification_title)                    .addPlatformNotification(AndroidNotification.newBuilder()                            .setAlert(notification_title)                            .setTitle(notification_title)                            //此字段为透传字段，不会显示在通知栏。用户可以通过此字段来做一些定制需求，如特定的key传要指定跳转的页面（value）                            .addExtra(&quot;androidNotification extras key&quot;,extrasparam)                            .build()                    )                    .addPlatformNotification(IosNotification.newBuilder()                            //传一个IosAlert对象，指定apns title、title、subtitle等                            .setAlert(notification_title)                            //直接传alert                            //此项是指定此推送的badge自动加1                            .incrBadge(1)                            //此字段的值default表示系统默认声音；传sound.caf表示此推送以项目里面打包的sound.caf声音来提醒，                            // 如果系统没有此音频则以系统默认声音提醒；此字段如果传空字符串，iOS9及以上的系统是无声音提醒，以下的系统是默认声音                            .setSound(&quot;sound.caf&quot;)                            //此字段为透传字段，不会显示在通知栏。用户可以通过此字段来做一些定制需求，如特定的key传要指定跳转的页面（value）                            .addExtra(&quot;iosNotification extras key&quot;,extrasparam)                            //此项说明此推送是一个background推送，想了解background看：http://docs.jpush.io/client/ios_tutorials/#ios-7-background-remote-notification                            // .setContentAvailable(true)                            .build()                    )                    .build()            )            //Platform指定了哪些平台就会像指定平台中符合推送条件的设备进行推送。 jpush的自定义消息，            // sdk默认不做任何处理，不会有通知提示。建议看文档http://docs.jpush.io/guideline/faq/的            // [通知与自定义消息有什么区别？]了解通知和自定义消息的区别            .setMessage(Message.newBuilder()                    .setMsgContent(msg_content)                    .setTitle(msg_title)                    .addExtra(&quot;message extras key&quot;,extrasparam)                    .build())            .setOptions(Options.newBuilder()                    //此字段的值是用来指定本推送要推送的apns环境，false表示开发，true表示生产；对android和自定义消息无意义                    .setApnsProduction(false)                    //此字段是给开发者自己给推送编号，方便推送者分辨推送记录                    .setSendno(1)                    //此字段的值是用来指定本推送的离线保存时长，如果不传此字段则默认保存一天，最多指定保留十天，单位为秒                    .setTimeToLive(86400)                    .build()            )            .build();}private static PushPayload buildPushObject_all_registrationId_alertWithTitle(String registrationId,String notification_title, String msg_title, String msg_content, String extrasparam) {    System.out.println(&quot;----------buildPushObject_all_all_alert&quot;);    //创建一个IosAlert对象，可指定APNs的alert、title等字段    //IosAlert iosAlert =  IosAlert.newBuilder().setTitleAndBody(&quot;title&quot;, &quot;alert body&quot;).build();    return PushPayload.newBuilder()            //指定要推送的平台，all代表当前应用配置了的所有平台，也可以传android等具体平台            .setPlatform(Platform.all())            //指定推送的接收对象，all代表所有人，也可以指定已经设置成功的tag或alias或该应应用客户端调用接口获取到的registration id            .setAudience(Audience.registrationId(registrationId))            //jpush的通知，android的由jpush直接下发，iOS的由apns服务器下发，Winphone的由mpns下发            .setNotification(Notification.newBuilder()                    //指定当前推送的android通知                    .addPlatformNotification(AndroidNotification.newBuilder()                            .setAlert(notification_title)                            .setTitle(notification_title)                            //此字段为透传字段，不会显示在通知栏。用户可以通过此字段来做一些定制需求，如特定的key传要指定跳转的页面（value）                            .addExtra(&quot;androidNotification extras key&quot;,extrasparam)                            .build())                    //指定当前推送的iOS通知                    .addPlatformNotification(IosNotification.newBuilder()                            //传一个IosAlert对象，指定apns title、title、subtitle等                            .setAlert(notification_title)                            //直接传alert                            //此项是指定此推送的badge自动加1                            .incrBadge(1)                            //此字段的值default表示系统默认声音；传sound.caf表示此推送以项目里面打包的sound.caf声音来提醒，                            // 如果系统没有此音频则以系统默认声音提醒；此字段如果传空字符串，iOS9及以上的系统是无声音提醒，以下的系统是默认声音                            .setSound(&quot;sound.caf&quot;)                            //此字段为透传字段，不会显示在通知栏。用户可以通过此字段来做一些定制需求，如特定的key传要指定跳转的页面（value）                            .addExtra(&quot;iosNotification extras key&quot;,extrasparam)                            //此项说明此推送是一个background推送，想了解background看：http://docs.jpush.io/client/ios_tutorials/#ios-7-background-remote-notification                            //取消此注释，消息推送时ios将无法在锁屏情况接收                            // .setContentAvailable(true)                            .build())                    .build())            //Platform指定了哪些平台就会像指定平台中符合推送条件的设备进行推送。 jpush的自定义消息，            // sdk默认不做任何处理，不会有通知提示。建议看文档http://docs.jpush.io/guideline/faq/的            // [通知与自定义消息有什么区别？]了解通知和自定义消息的区别            .setMessage(Message.newBuilder()                    .setMsgContent(msg_content)                    .setTitle(msg_title)                    .addExtra(&quot;message extras key&quot;,extrasparam)                    .build())            .setOptions(Options.newBuilder()                    //此字段的值是用来指定本推送要推送的apns环境，false表示开发，true表示生产；对android和自定义消息无意义                    .setApnsProduction(false)                    //此字段是给开发者自己给推送编号，方便推送者分辨推送记录                    .setSendno(1)                    //此字段的值是用来指定本推送的离线保存时长，如果不传此字段则默认保存一天，最多指定保留十天；                    .setTimeToLive(86400)                    .build())            .build();}private static PushPayload buildPushObject_android_all_alertWithTitle(String notification_title, String msg_title, String msg_content, String extrasparam) {    System.out.println(&quot;----------buildPushObject_android_registrationId_alertWithTitle&quot;);    return PushPayload.newBuilder()            //指定要推送的平台，all代表当前应用配置了的所有平台，也可以传android等具体平台            .setPlatform(Platform.android())            //指定推送的接收对象，all代表所有人，也可以指定已经设置成功的tag或alias或该应应用客户端调用接口获取到的registration id            .setAudience(Audience.all())            //jpush的通知，android的由jpush直接下发，iOS的由apns服务器下发，Winphone的由mpns下发            .setNotification(Notification.newBuilder()                    //指定当前推送的android通知                    .addPlatformNotification(AndroidNotification.newBuilder()                            .setAlert(notification_title)                            .setTitle(notification_title)                            //此字段为透传字段，不会显示在通知栏。用户可以通过此字段来做一些定制需求，如特定的key传要指定跳转的页面（value）                            .addExtra(&quot;androidNotification extras key&quot;,extrasparam)                            .build())                    .build()            )            //Platform指定了哪些平台就会像指定平台中符合推送条件的设备进行推送。 jpush的自定义消息，            // sdk默认不做任何处理，不会有通知提示。建议看文档http://docs.jpush.io/guideline/faq/的            // [通知与自定义消息有什么区别？]了解通知和自定义消息的区别            .setMessage(Message.newBuilder()                    .setMsgContent(msg_content)                    .setTitle(msg_title)                    .addExtra(&quot;message extras key&quot;,extrasparam)                    .build())            .setOptions(Options.newBuilder()                    //此字段的值是用来指定本推送要推送的apns环境，false表示开发，true表示生产；对android和自定义消息无意义                    .setApnsProduction(false)                    //此字段是给开发者自己给推送编号，方便推送者分辨推送记录                    .setSendno(1)                    //此字段的值是用来指定本推送的离线保存时长，如果不传此字段则默认保存一天，最多指定保留十天，单位为秒                    .setTimeToLive(86400)                    .build())            .build();}private static PushPayload buildPushObject_ios_all_alertWithTitle( String notification_title, String msg_title, String msg_content, String extrasparam) {    System.out.println(&quot;----------buildPushObject_ios_registrationId_alertWithTitle&quot;);    return PushPayload.newBuilder()            //指定要推送的平台，all代表当前应用配置了的所有平台，也可以传android等具体平台            .setPlatform(Platform.ios())            //指定推送的接收对象，all代表所有人，也可以指定已经设置成功的tag或alias或该应应用客户端调用接口获取到的registration id            .setAudience(Audience.all())            //jpush的通知，android的由jpush直接下发，iOS的由apns服务器下发，Winphone的由mpns下发            .setNotification(Notification.newBuilder()                    //指定当前推送的android通知                    .addPlatformNotification(IosNotification.newBuilder()                            //传一个IosAlert对象，指定apns title、title、subtitle等                            .setAlert(notification_title)                            //直接传alert                            //此项是指定此推送的badge自动加1                            .incrBadge(1)                            //此字段的值default表示系统默认声音；传sound.caf表示此推送以项目里面打包的sound.caf声音来提醒，                            // 如果系统没有此音频则以系统默认声音提醒；此字段如果传空字符串，iOS9及以上的系统是无声音提醒，以下的系统是默认声音                            .setSound(&quot;sound.caf&quot;)                            //此字段为透传字段，不会显示在通知栏。用户可以通过此字段来做一些定制需求，如特定的key传要指定跳转的页面（value）                            .addExtra(&quot;iosNotification extras key&quot;,extrasparam)                            //此项说明此推送是一个background推送，想了解background看：http://docs.jpush.io/client/ios_tutorials/#ios-7-background-remote-notification                            // .setContentAvailable(true)                            .build())                    .build()            )            //Platform指定了哪些平台就会像指定平台中符合推送条件的设备进行推送。 jpush的自定义消息，            // sdk默认不做任何处理，不会有通知提示。建议看文档http://docs.jpush.io/guideline/faq/的            // [通知与自定义消息有什么区别？]了解通知和自定义消息的区别            .setMessage(Message.newBuilder()                    .setMsgContent(msg_content)                    .setTitle(msg_title)                    .addExtra(&quot;message extras key&quot;,extrasparam)                    .build())            .setOptions(Options.newBuilder()                    //此字段的值是用来指定本推送要推送的apns环境，false表示开发，true表示生产；对android和自定义消息无意义                    .setApnsProduction(false)                    //此字段是给开发者自己给推送编号，方便推送者分辨推送记录                    .setSendno(1)                    //此字段的值是用来指定本推送的离线保存时长，如果不传此字段则默认保存一天，最多指定保留十天，单位为秒                    .setTimeToLive(86400)                    .build())            .build();}</code></pre><p>}</p><p>实际调用方法：</p><pre><code>JpushClientUtil.sendToAllAndroid(&quot;testIos&quot;,&quot;testIos&quot;,&quot;this is a ios Dev test&quot;,&quot;&quot;)</code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://docs.jiguang.cn/jpush/guideline/intro/" target="_blank" rel="noopener">极光官方API</a></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>极光的API总体来说是用起来是比较简单的，之所以记下来是因为在网上看到了千篇一律的错误文章，不知道是因为极光版本升级了还是其他原因。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IOS 系统通过plist方式安装App</title>
      <link href="/2019/02/14/iphone-install-through-plist/"/>
      <url>/2019/02/14/iphone-install-through-plist/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为之前公司经营不善，几近破产，于是公司决定放弃互联网部门，然后我只能美滋滋的拿着违约补偿金，和平分手。<br>目前在新的公司做app后端开发，一期项目接近尾声，需要做一个App升级的功能，说穿了就是一个下载，这个东西90%的人大一就会吧，Android的本质就是下载，就不多做介绍。app是企业内部使用的，不会上架app store，本文主要介绍利用itms-services协议安装IPA安装包。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>SSL证书 </li><li>对应的plist文件 </li><li>IPA安装包一个</li></ol><p>在iOS开发中，Xcode 7.0也就是iOS9.0(以及以后)中开发中要求App内访问的网络必须使用HTTPS协议，以此来提高数据传输之间的安全性。所以我们需要支持Https的服务环境（也就是SSL证书）。</p><p><strong>注意：个人名义发布的或者非权威机构发布的证书是无用的。</strong> </p><p>当然如果没有有效的证书也可以使用别人的，比如<a href="https://www.jianshu.com" target="_blank" rel="noopener">七牛云</a>、<a href="https://www.jianshu.com" target="_blank" rel="noopener">github</a>、<a href="https://coding.net/" target="_blank" rel="noopener">coding</a>，把上面准备好的 plist 文件 与 IPA 安装包往上面一丢，完事。</p><h3 id="plist文件"><a href="#plist文件" class="headerlink" title="plist文件"></a>plist文件</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;&lt;plist version=&quot;1.0&quot;&gt;&lt;dict&gt;    &lt;key&gt;items&lt;/key&gt;    &lt;array&gt;        &lt;dict&gt;            &lt;key&gt;assets&lt;/key&gt;            &lt;array&gt;                &lt;dict&gt;                    &lt;key&gt;kind&lt;/key&gt;                    &lt;string&gt;software-package&lt;/string&gt;                    &lt;key&gt;url&lt;/key&gt;                    &lt;string&gt;https://.../xxx.ipa&lt;/string&gt;                 &lt;/dict&gt;            &lt;/array&gt;            &lt;key&gt;metadata&lt;/key&gt;            &lt;dict&gt;                &lt;key&gt;bundle-identifier&lt;/key&gt;                &lt;string&gt;xxx&lt;/string&gt;                &lt;key&gt;bundle-version&lt;/key&gt;                &lt;string&gt;1.1.0&lt;/string&gt;                &lt;key&gt;kind&lt;/key&gt;                &lt;string&gt;software&lt;/string&gt;                &lt;key&gt;title&lt;/key&gt;                &lt;string&gt;应用名称&lt;/string&gt;            &lt;/dict&gt;        &lt;/dict&gt;    &lt;/array&gt;&lt;/dict&gt;&lt;/plist&gt;</code></pre><p><strong>以下栏是必填项：</strong><br>URL：应用 (.ipa) 文件的完全限定 HTTPS URL<br>display-image：57 x 57 像素的 PNG 图像，在下载和安装过程中显示。指定图像的完全限定 URL<br>full-size-image：512 x 512 像素的 PNG 图像，表示 iTunes 中相应的应用<br>bundle-identifier：应用的包标识符，与 Xcode 项目中指定的完全一样<br>bundle-version：应用的包版本，在 Xcode 项目中指定<br>title：下载和安装过程中显示的应用的名称        </p><p>样本清单文件还包含可选键。例如，如果应用文件太大，并且想要在执行错误检验（TCP 通信通常会执行该检验）的基础上确保下载的完整性，可以使用 MD5 键。通过指定项目数组的附加成员，您还可以使用一个清单文件安装多个应用。</p><h3 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h3><p>后端代码就是普通的下载，强行贴上来。</p><pre><code>@RequestMapping(&quot;/upgrade/{name}&quot;)    private HttpServletResponse downloadFile(HttpServletResponse response, @PathVariable String name) {        String fileName = name;//被下载的文件名，默认路径为/,        try {            // path是指欲下载的文件的路径。            File file = new File(fileName);            // 取得文件名。            String filename = file.getName();            // 以流的形式下载文件。            InputStream fis = new BufferedInputStream(new FileInputStream(fileName));            byte[] buffer = new byte[fis.available()];            fis.read(buffer);            fis.close();            // 清空response            response.reset();            // 设置response的Header            OutputStream toClient = new BufferedOutputStream(response.getOutputStream());            response.setHeader(&quot;Content-Type&quot;,&quot;text/plain;charset=utf-8&quot;);            toClient.write(buffer);            toClient.flush();            toClient.close();        } catch (IOException ex) {            ex.printStackTrace();        }        return response;    }</code></pre><p>所以我的plist里面的应用url是<code>http://127.0.0.1/upgrade/appname.ipa</code> (plist文件中的URL可以是https也可以是http)</p><h3 id="下载应用"><a href="#下载应用" class="headerlink" title="下载应用"></a>下载应用</h3><p>确认通过浏览器能够直接访问到plist文件，及下载ipa文件后<br>用safari访问 以下链接即可下载应用(也可以通过此方法下载国区未上线的游戏)</p><pre><code>itms-services:///?action=download-manifest&amp;url=https://127.0.0.1/upgrade/plistname.plist</code></pre><h3 id="参考文件"><a href="#参考文件" class="headerlink" title="参考文件"></a>参考文件</h3><ol><li><a href="https://help.apple.com/deployment/ios/#/apdda9e027d2" target="_blank" rel="noopener">IOS部署参考</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> APP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IOS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用JavaScript写一个区块链</title>
      <link href="/2018/07/08/write-a-blockchain-in-JavaScript/"/>
      <url>/2018/07/08/write-a-blockchain-in-JavaScript/</url>
      
        <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>本文是由Savjee.be发布，JeLewine翻译。版权归原作者所有，如有侵权，请与我联系删除</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>原文：<a href="https://link.zhihu.com/?target=https://www.savjee.be/2017/07/Writing-tiny-blockchain-in-JavaScript/" target="_blank" rel="noopener">Writing a tiny blockchain in JavaScript</a><br>作者：Savjee.be<br>译者：JeLewine</p><p>几乎每个人都听说过像比特币和以太币这样的加密货币，但是只有极少数人懂得隐藏在它们背后的技术。在这篇博客中，我将会用JavaScript来创建一个简单的区块链来演示它们的内部究竟是如何工作的。我将会称之为SavjeeCoin！</p><p>全文分为三个部分：<br>part1：实现一个基本的区块链<br>part2：实现POW<br>part3：交易与挖矿奖励</p><h2 id="Part1：实现一个基本的区块链"><a href="#Part1：实现一个基本的区块链" class="headerlink" title="Part1：实现一个基本的区块链"></a>Part1：实现一个基本的区块链</h2><p>区块链</p><p>区块链是由一个个任何人都可以访问的区块构成的公共数据库。这好像没什么特别的，不过它们有一个有趣的属性：它们是不可变的。一旦一个区块被添加到区块链中，除非让剩余的其余区块失效，否则它是不会再被改变的。</p><p>这就是为什么加密货币是基于区块链的原因。你肯定不希望人们在交易完成后再变更交易！</p><p>创造一个区块</p><p>区块链是由许许多多的区块链接在一起的（这听上去好像没毛病..）。链上的区块通过某种方式允许我们检测到是否有人操纵了之前的任何区块。</p><p>那么我们如何确保数据的完整性呢？每个区块都包含一个基于其内容计算出来的hash。同时也包含了前一个区块的hash。</p><p>下面是一个区块类用JavaScript写出来大致的样子：</p><pre><code>const SHA256 = require(&quot;crypto-js/sha256&quot;);  class Block {    constructor(index, timestamp, data, previousHash = &apos;&apos;) {      this.index = index;      this.previousHash = previousHash;      this.timestamp = timestamp;      this.data = data;      this.hash = this.calculateHash();    }    calculateHash() {      return SHA256(this.index + this.previousHash + this.timestamp + JSON.stringify(this.data)).toString();    }  }  </code></pre><p>因为JavaScript中并不支持sha256所以我引入了crypto-js库。然后我定义了一个构造函数来初始化我区块的属性。每一个区块上都被赋予了index属性来告知我们这个区块在整个链上的位置。我们同时也生成了一个时间戳，以及需要在区块里存储的一些数据。最后是前一个区块的hash。</p><p>创造一个链</p><p>现在我们可以在Blockchain类中将区块链接起来了！下面是用JavaScript实现的代码：</p><pre><code>class Blockchain{    constructor() {          this.chain = [this.createGenesisBlock()];    }    createGenesisBlock() {          return new Block(0, &quot;01/01/2017&quot;, &quot;Genesis block&quot;, &quot;0&quot;);    }    getLatestBlock() {          return this.chain[this.chain.length - 1];    }    addBlock(newBlock) {          newBlock.previousHash = this.getLatestBlock().hash;          newBlock.hash = newBlock.calculateHash();          this.chain.push(newBlock);    }    isChainValid() {      for (let i = 1; i &lt; this.chain.length; i++){            const currentBlock = this.chain[i];            const previousBlock = this.chain[i - 1];            if (currentBlock.hash !== currentBlock.calculateHash()) {                      return false;            }            if (currentBlock.previousHash !== previousBlock.hash) {                  return false;            }      }          return true;    }  }  </code></pre><p>在构造函数里，我通过创建一个包含创世块的数组来初始化整个链。第一个区块是特殊的，因为它不能指向前一个区块。我还添加了下面两个方法：<br>getLatestBlock()返回我们区块链上最新的区块。<br>addBlock()负责将新的区块添加到我们的链上。为此，我们将前一个区块的hash添加到我们新的区块中。这样我们就可以保持整个链的完整性。因为只要我们变更了最新区块的内容，我们就需要重新计算它的hash。当计算完成后，我将把这个区块推进链里（一个数组）。<br>最后，我创建一个isChainValid()来确保没有人篡改过区块链。它会遍历所有的区块来检查每个区块的hash是否正确。它会通过比较previousHash来检查每个区块是否指向正确的上一个区块。如果一切都没有问题它会返回true否则会返回false。</p><p>使用区块链</p><p>我们的区块链类已经写完啦，可以真正的开始使用它了！</p><pre><code>let savjeeCoin = new Blockchain();  savjeeCoin.addBlock(new Block(1, &quot;20/07/2017&quot;, { amount: 4 }));  savjeeCoin.addBlock(new Block(2, &quot;20/07/2017&quot;, { amount: 8 }));  </code></pre><p>在这里我仅仅是创建了一个区块链的实例，并且命名它为SavjeeCoin！之后我在链上添加了一些区块。区块里可以包含任何你想要放的数据，不过在上面的代码里，我选择添加了一个带有amount属性的对象。</p><p>试着操作吧！</p><p>在介绍里我曾说过区块链是不可变的。一旦添加，区块就不可能再变更了。让我们试一下！</p><pre><code>// 检查是否有效(将会返回true)  console.log(&apos;Blockchain valid? &apos; + savjeeCoin.isChainValid());  // 现在尝试操作变更数据  savjeeCoin.chain[1].data = { amount: 100 };  // 再次检查是否有效 (将会返回false)  console.log(&quot;Blockchain valid? &quot; + savjeeCoin.isChainValid());  </code></pre><p>我会在一开始通过运行isChainValid()来验证整个链的完整性。我们操作过任何区块，所以它会返回true。</p><p>之后我将链上的第一个（索引为1）区块的数据进行了变更。之后我再次检查整个链的完整性，发现它返回了false。我们的整个链不再有效了。</p><p>结论</p><p>这个小栗子还远未达到完成的程度。它还没有实现POW（工作量证明机制）或P2P网络来与其它矿工来进行交流。</p><p>但他确实证明了区块链的工作原理。许多人认为原理会非常复杂，但这篇文章证明了区块链的基本概念是非常容易理解和实现的。</p><h2 id="Part2：实现POW-proof-of-work-工作量证明"><a href="#Part2：实现POW-proof-of-work-工作量证明" class="headerlink" title="Part2：实现POW(proof-of-work:工作量证明)"></a>Part2：实现POW(proof-of-work:工作量证明)</h2><p>在part1中我们用JavaScript创建了一个简单的区块链来演示区块链的工作原理。不过这个实现并不完整，很多人发现依旧可以篡改该系统。没错！我们的区块链需要另一种机制来抵御攻击。那么让我们来看看我们该如何做到这一点！</p><p>问题</p><p>现在我们可以很快的创造区块然后非常迅速的将它们添加进我们的区块链中。不过这导致了三个问题：<br>第一：人们可以快速创建区块然后在我们的链里塞满垃圾。大量的区块会导致我们区块链过载并让其无法使用。<br>第二：因为创建一个有效的区块太容易了，人们可以篡改链中的某一个区块，然后重新计算所有区块的hash。即使它们已经篡改了区块，他们仍然可以以有效的区块来作为结束。<br>第三：你可以通过结合上述两个破绽来有效控制区块链。区块链由p2p网络驱动，其中节点会将区块添加到可用的最长链中。所以你可以篡改区块，然后计算所有其他的区块，最后添加多任意你想要添加的区块。你最后会得到一个最长的链，所有的其它节点都会接受它然后往上添加自己的区块。<br>显然我们需要一个方案来解决这些问题：POW。</p><p>什么是POW</p><p>POW是在第一个区块链被创造之前就已经存在的一种机制。这是一项简单的技术，通过一定数量的计算来防止滥用。工作量是防止垃圾填充和篡改的关键。如果它需要大量的算力，那么填充垃圾就不再值得。</p><p>比特币通过要求hash以特定0的数目来实现POW。这也被称之为难度</p><p>不过等一下！一个区块的hash怎么可以改变呢？在比特币的场景下，一个区块包含有各种金融交易信息。我们肯定不希望为了获取正确的hash而混淆了那些数据。</p><p>为了解决这个问题，区块链添加了一个nonce值。Nonce是用来查找一个有效Hash的次数。而且，因为无法预测hash函数的输出，因此在获得满足难度条件的hash之前，只能大量组合尝试。寻找到一个有效的hash（创建一个新的区块）在圈内称之为挖矿。</p><p>在比特币的场景下，POW确保每10分钟只能添加一个区块。你可以想象垃圾填充者需要多大的算力来创造一个新区块，他们很难欺骗网络，更不要说篡改整个链。</p><p>实现POW</p><p>我们该如何实现呢？我们先来修改我们区块类并在其构造函数中添加Nonce变量。我会初始化它并将其值设置为0。</p><pre><code>constructor(index, timestamp, data, previousHash = &apos;&apos;) {    this.index = index;    this.previousHash = previousHash;    this.timestamp = timestamp;    this.data = data;    this.hash = this.calculateHash();    this.nonce = 0;  }  </code></pre><p>我们还需要一个新的方法来增加Nonce，直到我们获得一个有效hash。强调一下，这是由难度决定的。所以我们会收到作为参数的难度。</p><pre><code>mineBlock(difficulty) {      while (this.hash.substring(0, difficulty) !== Array(difficulty + 1).join(&quot;0&quot;)) {          this.nonce++;          this.hash = this.calculateHash();      }      console.log(&quot;BLOCK MINED: &quot; + this.hash);  }  </code></pre><p>最后，我们还需要更改一下calculateHash()函数。因为目前他还没有使用Nonce来计算hash。</p><pre><code>calculateHash() {    return SHA256(this.index +      this.previousHash +      this.timestamp +      JSON.stringify(this.data) +      this.nonce    ).toString();  }  </code></pre><p>将它们结合在一起，你会得到如下所示的区块类：</p><pre><code>class Block {    constructor(index, timestamp, data, previousHash = &apos;&apos;) {      this.index = index;      this.previousHash = previousHash;      this.timestamp = timestamp;      this.data = data;      this.hash = this.calculateHash();      this.nonce = 0;    }    calculateHash() {      return SHA256(this.index + this.previousHash + this.timestamp + JSON.stringify(this.data) + this.nonce).toString();    }    mineBlock(difficulty) {      while (this.hash.substring(0, difficulty) !== Array(difficulty + 1).join(&quot;0&quot;)) {        this.nonce++;        this.hash = this.calculateHash();      }      console.log(&quot;BLOCK MINED: &quot; + this.hash);    }  } </code></pre><p>修改区块链</p><p>现在，我们的区块已经拥有Nonce并且可以被开采了，我们还需要确保我们的区块链支持这种新的行为。让我们先在区块链中添加一个新的属性来跟踪整条链的难度。我会将它设置为2（这意味着区块的hash必须以2个0开头）。</p><pre><code>constructor() {    this.chain = [this.createGenesisBlock()];    this.difficulty = 2;  }  </code></pre><p>现在剩下要做的就是改变addBlock()方法，以便在将其添加到链中之前确保实际挖到该区块。下面我们将难度传给区块。</p><pre><code>addBlock(newBlock) {    newBlock.previousHash = this.getLatestBlock().hash;    newBlock.mineBlock(this.difficulty);    this.chain.push(newBlock);  }  </code></pre><p>大功告成！我们的区块链现在拥有了POW来抵御攻击了。</p><p>测试</p><p>现在让我们来测试一下我们的区块链，看看在POW下添加一个新区块会有什么效果。我将会使用之前的代码。我们将创建一个新的区块链实例然后往里添加2个区块。</p><pre><code>let savjeeCoin = new Blockchain();  console.log(&apos;Mining block 1&apos;);  savjeeCoin.addBlock(new Block(1, &quot;20/07/2017&quot;, { amount: 4 }));  console.log(&apos;Mining block 2&apos;);  savjeeCoin.addBlock(new Block(2, &quot;20/07/2017&quot;, { amount: 8 }));  </code></pre><p>如果你运行了上面的代码，你会发现添加新区块依旧非常快。这是因为目前的难度只有2（或者你的电脑性能非常好）。</p><p>如果你创建了一个难度为5的区块链实例，你会发现你的电脑会花费大概十秒钟来挖矿。随着难度的提升，你的防御攻击的保护程度越高。</p><p>免责声明</p><p>就像之前说的：这绝不是一个完整的区块链。它仍然缺少很多功能（像P2P网路）。这只是为了说明区块链的工作原理。</p><p>并且：由于单线程的原因，用JavaScript来挖矿并不快。</p><h2 id="Part3：交易与挖矿奖励"><a href="#Part3：交易与挖矿奖励" class="headerlink" title="Part3：交易与挖矿奖励"></a>Part3：交易与挖矿奖励</h2><p>在前面两部分我们创建了一个简单的区块链，并且加入了POW来抵御攻击。然而我们在途中也偷了懒：我们的区块链只能在一个区块中存储一笔交易，而且矿工没有奖励。现在，让我们解决这个问题！</p><p>重构区块类</p><p>现在一个区块拥有index,previousHash,timestamp,data,hash和nonce属性。这个index属性并不是很有用，事实上我甚至不知道为什么开始我要将它添加进去。所以我把它移除了，同时将data改名为transactions来更语义化。</p><pre><code>class Block{    constructor(timestamp, transactions, previousHash = &apos;&apos;) {      this.previousHash = previousHash;      this.timestamp = timestamp;      this.transactions = transactions;      this.hash = this.calculateHash();      this.nonce = 0;    }  } </code></pre><p>当我们改变区块类时，我们也必须更改calculateHash()函数。现在它还在使用老旧的index和data属性。</p><pre><code>calculateHash() {    return SHA256(this.previousHash + this.timestamp + JSON.stringify(this.transactions) + this.nonce).toString();  }  </code></pre><p>交易类</p><p>在区块内，我们将可以存储多笔交易。因此我们还需要定义一个交易类，一边我们可以锁定交易应当具有的属性：<br>代码</p><pre><code>class Transaction{    constructor(fromAddress, toAddress, amount){      this.fromAddress = fromAddress;      this.toAddress = toAddress;      this.amount = amount;    }  }  </code></pre><p>这个交易例子非常的简单，仅仅包含了发起方（fromAddress）和接受方（toAddress）以及数量。如果有需求，你也可以在里面加入更多字段，不过这个只是为了最小实现。</p><p>调整我们的区块链</p><p>当前的最大任务：调整我们的区块链来适应这些新变化。我们需要做的第一件事就是存储待处理交易的地方。</p><p>正如你所知道的，由于POW，区块链可以稳定的创建区块。在比特币的场景下，难度被设置成大约每10分钟创建一个新区块。但是，是可以在创造两个区块之间提交新的交易。</p><p>为了做到这一点，首先需要改变我们区块链的构造函数，以便他可以存储待处理的交易。我们还将创造一个新的属性，用于定义矿工获得多少钱作为奖励：</p><pre><code>class Blockchain{    constructor() {      this.chain = [this.createGenesisBlock()];      this.difficulty = 5;      // 在区块产生之间存储交易的地方      this.pendingTransactions = [];      // 挖矿回报      this.miningReward = 100;    }  } </code></pre><p>下一步，我们将调整我们的addBlock()方法。不过我的调整是指删掉并重写它！我们将不再允许人们直接为链上添加区块。相反，他们必须将交易添加至下一个区块中。而且我们将addBlock()更名为createTransaction()，这看起来更语义化：</p><pre><code>createTransaction(transaction) {    // 这里应该有一些校验!    // 推入待处理交易数组    this.pendingTransactions.push(transaction);  }  </code></pre><p>挖矿</p><p>人们现在可以将新的交易添加到待处理交易的列表中。但无论如何，我们需要将他们清理掉并移入实际的区块中。为此，我们来创建一个minePendingTransactions()方法。这个方法不仅会挖掘所有待交易的新区块，而且还会向采矿者发送奖励。</p><pre><code>minePendingTransactions(miningRewardAddress) {    // 用所有待交易来创建新的区块并且开挖..    let block = new Block(Date.now(), this.pendingTransactions);    block.mineBlock(this.difficulty);    // 将新挖的看矿加入到链上    this.chain.push(block);    // 重置待处理交易列表并且发送奖励    this.pendingTransactions = [        new Transaction(null, miningRewardAddress, this.miningReward)    ];  }  </code></pre><p>请注意，该方法采用了参数miningRewardAddress。如果你开始挖矿，你可以将你的钱包地址传递给此方法。一旦成功挖到矿，系统将创建一个新的交易来给你挖矿奖励（在这个栗子里是100枚币）。</p><p>有一点需要注意的是，在这个栗子中，我们将所有待处理交易一并添加到一个区块中。但实际上，由于区块的大小是有限制的，所以这是行不通的。在比特币里，一个区块的大小大概是2Mb。如果有更多的交易能够挤进一个区块，那么矿工可以选择哪些交易达成哪些交易不达成（通常情况下费用更高的交易容易获胜）。</p><p>地址的余额</p><p>在测试我们的代码钱让我们再做一件事！如果能够检查我们区块链上地址的余额将会更好。</p><pre><code>getBalanceOfAddress(address){    let balance = 0; // you start at zero!    // 遍历每个区块以及每个区块内的交易    for(const block of this.chain){      for(const trans of block.transactions){        // 如果地址是发起方 -&gt; 减少余额        if(trans.fromAddress === address){          balance -= trans.amount;        }        // 如果地址是接收方 -&gt; 增加余额        if(trans.toAddress === address){          balance += trans.amount;        }      }    }    return balance;  }  </code></pre><p>测试</p><p>好吧，我们已经完成并可以最终一切是否可以正常工作！为此，我们创建了一些交易：</p><pre><code>let savjeeCoin = new Blockchain();  console.log(&apos;Creating some transactions...&apos;);  savjeeCoin.createTransaction(new Transaction(&apos;address1&apos;, &apos;address2&apos;, 100));  savjeeCoin.createTransaction(new Transaction(&apos;address2&apos;, &apos;address1&apos;, 50));  </code></pre><p>这些交易目前都处于等待状态，为了让他们得到证实，我们必须开始挖矿：</p><pre><code>console.log(&apos;Starting the miner...&apos;);  savjeeCoin.minePendingTransactions(&apos;xaviers-address&apos;);  </code></pre><p>当我们开始挖矿，我们也会传递一个我们想要获得挖矿奖励的地址。在这种情况下，我的地址是xaviers-address（非常复杂！）。</p><p>之后，让我们检查一下xaviers-address的账户余额：</p><pre><code>console.log(&apos;Balance of Xaviers address is&apos;, savjeeCoin.getBalanceOfAddress(&apos;xaviers-address&apos;));  // 输出: 0</code></pre><p>我的账户输出竟然是0？！等等，为什么？难道我不应该得到我的挖矿奖励么？那么，如果你仔细观察代码，你会看到系统会创建一个交易，然后将您的挖矿奖励添加为新的待处理交易。这笔交易将会包含在下一个区块中。所以如果我们再次开始挖矿，我们将收到我们的100枚硬币奖励！</p><pre><code>console.log(&apos;Starting the miner again!&apos;);  savjeeCoin.minePendingTransactions(&quot;xaviers-address&quot;);  console.log(&apos;Balance of Xaviers address is&apos;, savjeeCoin.getBalanceOfAddress(&apos;xaviers-address&apos;));  // 输出: 100</code></pre><p>局限性与结论</p><p>现在我们的区块链已经可以在一个区块上存储多笔交易，并且可以为矿工带来回报。</p><p>不过，还是有一些不足：发送货币是，我们不检查发起人是否有足够的余额来实际进行交易。然而，这其实是一件容易解决的事情。我们也没有创建一个新的钱包和签名交易（传统上用公钥/私钥加密完成）。</p><p>免责声明 &amp; 源代码</p><p>我想指出的是，这绝不是一个完整的区块链实现！它仍然缺少很多功能。这只是为了验证一些概念来帮助您来了解区块链的工作原理。</p><p>该项目的源代码就放在我的<a href="https://link.zhihu.com/?target=https://github.com/SavjeeTutorials/SavjeeCoin" target="_blank" rel="noopener">GitHub</a></p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
            <tag> POW </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC：Response获取Body问题</title>
      <link href="/2018/03/04/SpringMVC-Response-get-Body/"/>
      <url>/2018/03/04/SpringMVC-Response-get-Body/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><hr><p>现在开发的项目是基于SpringBoot的maven项目，拦截器的使用很多时候是必不可少的，当你需要对请求的body与返回的body进行记录的时候，在<code>afterCompletion</code>中从response中获取流，读取body入库后，你会发现前端获取不到后端传过去的body。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><hr><p>这个问题跟requst 一模一样，情况在<a href="http://zhouhy.top/2018/03/02/Request%E8%8E%B7%E5%8F%96Body%E9%97%AE%E9%A2%98/">上篇博客</a>中有详细的说明</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><hr><p>IO流关闭只能读取一次，所以需要解决流只能读取一次的问题，让它可以被多次重复读取，这里只需要重写Response缓存一下流中的数据就好了。</p><h3 id="引包"><a href="#引包" class="headerlink" title="引包"></a>引包</h3><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;    &lt;artifactId&gt;tomcat-embed-core&lt;/artifactId&gt;    &lt;version&gt;8.5.15&lt;/version&gt;&lt;/dependency&gt;</code></pre><h3 id="新建类Response包装类"><a href="#新建类Response包装类" class="headerlink" title="新建类Response包装类"></a>新建类Response包装类</h3><p>新建BodyCachingHttpServletResponseWrapper（防止流丢失）</p><pre><code>import lombok.AllArgsConstructor;import lombok.Data;import javax.servlet.ServletOutputStream;import javax.servlet.WriteListener;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpServletResponseWrapper;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.OutputStreamWriter;import java.io.PrintWriter;/** * @author * @date 2018/10/1 */public class BodyCachingHttpServletResponseWrapper extends HttpServletResponseWrapper {    private ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();    private HttpServletResponse response;    public BodyCachingHttpServletResponseWrapper(HttpServletResponse response) {        super(response);        this.response = response;    }    //获取包装前的response    public HttpServletResponse getNativeResponse(){        return this.response;    }    public byte[] getBody() {        return byteArrayOutputStream.toByteArray();    }    @Override    public ServletOutputStream getOutputStream() {        return new ServletOutputStreamWrapper(this.byteArrayOutputStream , this.response);    }    @Override    public PrintWriter getWriter() throws IOException {        return new PrintWriter(new OutputStreamWriter(this.byteArrayOutputStream , this.response.getCharacterEncoding()));    }    @Data    @AllArgsConstructor    private static class ServletOutputStreamWrapper extends ServletOutputStream {        private ByteArrayOutputStream outputStream;        private HttpServletResponse response;        @Override        public boolean isReady() {            return true;        }        @Override        public void setWriteListener(WriteListener listener) {        }        @Override        public void write(int b) throws IOException {            this.outputStream.write(b);        }        @Override        public void flush() throws IOException {            if (! this.response.isCommitted()) {                byte[] body = this.outputStream.toByteArray();                ServletOutputStream outputStream = this.response.getOutputStream();                outputStream.write(body);                outputStream.flush();            }        }    }}</code></pre><h3 id="新建过滤器"><a href="#新建过滤器" class="headerlink" title="新建过滤器"></a>新建过滤器</h3><p>新建HttpServletResponseReplacedFilter(过滤器)</p><pre><code>import javax.servlet.*;import javax.servlet.annotation.WebFilter;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebFilter(urlPatterns = &quot;/*&quot;, filterName = &quot;channelFilter&quot;)public class HttpServletRequestReplacedFilter implements Filter {    @Override    public void destroy() {    }    @Override    public void doFilter(ServletRequest request, ServletResponse response,                         FilterChain chain) throws IOException, ServletException {        BodyCachingHttpServletResponseWrapper responseWrapper = null;        if (response instanceof HttpServletResponse){            responseWrapper  = new BodyCachingHttpServletResponseWrapper((HttpServletResponse) response);        }        //获取请求中的流如何，将取出来的字符串，再次转换成流，然后把它放入到新request对象中。        // 在chain.doFiler方法中传递新的request对象        //此处response包装为responseWrapper 后 通过response.getWriter().print(str);传值是 前台无法接收        if (requestWrapper == null &amp;&amp; responseWrapper != null){            chain.doFilter(request, responseWrapper);        }    }    @Override    public void init(FilterConfig arg0) throws ServletException {    }}</code></pre><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><hr><p>如下代码即可在拦截其中获取body且保证了controller中依旧可以再次获取</p><pre><code>byte[] body = ((BodyCachingHttpServletResponseWrapper) res).getBody();java.lang.String string = new java.lang.String(body);</code></pre><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><hr><p>在拦截器的<code>preHandle</code>方法中返回true的请求，会进入到对应的Controller，在Controller中返回的对象有Spring Boot框架自动转换为JSON，放入response的body中，这个步骤是没有问题的。</p><p>但是当在拦截器中<code>preHandle</code>方法中返回false的请求,不会经由Controller赋予返回值，应该由程序员手动赋值。<br>常用的方法如下：</p><pre><code>PrintWriter writer = response.getWriter();writer.print(JSON.toJSONString(Result.create(MsgConstant.NOT_LOGIN)));writer.flush();writer.close();</code></pre><p>实际上，此时的response是经过包装后的，它的实际类型还是<code>BodyCachingHttpServletResponseWrapper</code>，这个方式前端是接收不到值的。需要把BodyCachingHttpServletResponseWrapper 转化为HttpServletResponse，<strong>而不是父类引用指向子类对象</strong>。</p><p>我在<code>BodyCachingHttpServletResponseWrapper</code>中写了如下方法，目的就是获取HttpServletResponse类型的response</p><pre><code>//获取包装前的responsepublic HttpServletResponse getNativeResponse(){    return this.response;}</code></pre><p>此处返回值的代码如下：</p><pre><code>response = ((BodyCachingHttpServletResponseWrapper)response).getNativeResponse();PrintWriter writer = response.getWriter();writer.print(JSON.toJSONString(Result.create(MsgConstant.JSON_INVALID_FORMAT)));writer.flush();writer.close();</code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Response </tag>
            
            <tag> HttpServletResponseWrapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC：Request获取Body问题</title>
      <link href="/2018/03/02/SpringMVC-Request-get-Body/"/>
      <url>/2018/03/02/SpringMVC-Request-get-Body/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>现在开发的项目是基于<code>SpringBoot</code>的<code>maven</code>项目，拦截器的使用很多时候是必不可少的，当有需要你对请求体（request.body）中的值进行校验，例如加密验签、防重复提交、内容校验等等。<br>当你开开心心的在拦截器中通过<code>request.getInputStream();</code>获取到body中的信息后，你会发现你在<code>controller</code>中使用了<code>@RequestBody</code>注解获取参数报如下错误:</p><pre><code>I/O error while reading input message; nested exception is java.io.IOException: Stream closedorg.springframework.http.converter.HttpMessageNotReadableException: I/O error while reading input message; nested exception is java.io.IOException: Stream closed    at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.readWithMessageConverters(AbstractMessageConverterMethodArgumentResolver.java:229)    at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters(RequestResponseBodyMethodProcessor.java:150)    at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:128)    at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)    at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:158)    at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:128)    at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:97)    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)    at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967)    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901)    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)    at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)    at javax.servlet.http.HttpServlet.service(HttpServlet.java:661)    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)    at javax.servlet.http.HttpServlet.service(HttpServlet.java:742)    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)    at org.springframework.boot.web.filter.ApplicationContextHeaderFilter.doFilterInternal(ApplicationContextHeaderFilter.java:55)    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)    at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96)    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)    at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:110)    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)</code></pre><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>我们希望从请求Request中获取输入流，解析里面的内容，但是<code>InputStream</code>只能被读取一次。为什么呢？看InputStream源码发现注释说的很清楚：</p><blockquote><p>public int read(byte[] b,int off, int len)<br>　　　Reads up to len bytes of data into an array of bytes from this input stream. Ifpos equals count, then -1 is returned to<br>　　　indicate end of file. Otherwise, the number k of bytes read is equal to the smaller of len and count-pos.If k<br>　　　is positive, then bytes buf[pos] through buf[pos+k-1] are copied into b[off] through b[off+k-1] in the manner performed by<br>　　　System.arraycopy. The value k is added into pos and k is returned. </p></blockquote><p>　　</p><blockquote><p>注释的大概意思是说：在InputStream读取的时候，会有一个pos 指针，它指示每次读取之后下一次要读取的起始位置。在每次读取后会更新pos的值，当你下次再来读取的时候是从pos的位置开始的，而不是从头开始，所以第二次获取String中的值的时候是不全的。如果第一次全部读取完了，pos就指向流的末尾，第二次就读取不到内容，API中提供了一个解决办法：reset()。<code>request、response中根本不起作用</code>。提示 mark/reset not supported 。意思是只有重写过markSupported()方法的IO流才可以用。所以一般我们使用inputStream，最好在一次内处理完所有逻辑。</p></blockquote><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>IO流关闭只能读取一次，所以需要解决流只能读取一次的问题，让它可以被多次重复读取，这里只需要重写Request缓存一下流中的数据就好了。</p><h3 id="引包"><a href="#引包" class="headerlink" title="引包"></a>引包</h3><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;    &lt;artifactId&gt;tomcat-embed-core&lt;/artifactId&gt;    &lt;version&gt;8.5.15&lt;/version&gt;&lt;/dependency&gt;</code></pre><h3 id="新建帮助类"><a href="#新建帮助类" class="headerlink" title="新建帮助类"></a>新建帮助类</h3><p>新建HttpUtil类 从流中读取body<br>public class HttpUtil {</p><pre><code>public static String getBodyString(HttpServletRequest request) throws IOException {    StringBuilder sb = new StringBuilder();    InputStream inputStream = null;    BufferedReader reader = null;    try {        inputStream = request.getInputStream();        reader = new BufferedReader(new InputStreamReader(inputStream, Charset.forName(&quot;UTF-8&quot;)));        String line = &quot;&quot;;        while ((line = reader.readLine()) != null) {            sb.append(line);        }    } catch (IOException e) {        e.printStackTrace();    } finally {        if (inputStream != null) {            try {                inputStream.close();            } catch (IOException e) {                e.printStackTrace();            }        }        if (reader != null) {            try {                reader.close();            } catch (IOException e) {                e.printStackTrace();            }        }    }    return sb.toString();}</code></pre><h3 id="新建类Request包装类"><a href="#新建类Request包装类" class="headerlink" title="新建类Request包装类"></a>新建类Request包装类</h3><p>新建RequestReaderHttpServletRequestWrapper（防止流丢失）</p><pre><code>import com.zbsoft.common.util.HttpUtil;import java.io.BufferedReader;import java.io.ByteArrayInputStream;import java.io.IOException;import java.io.InputStreamReader;import java.nio.charset.Charset;import javax.servlet.ReadListener;import javax.servlet.ServletInputStream;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletRequestWrapper;public class RequestReaderHttpServletRequestWrapper extends HttpServletRequestWrapper {private final byte[] body;public RequestReaderHttpServletRequestWrapper(HttpServletRequest request) throws IOException {    super(request);    body = HttpUtil.getBodyString(request).getBytes(Charset.forName(&quot;UTF-8&quot;));}@Overridepublic BufferedReader getReader() throws IOException {    return new BufferedReader(new InputStreamReader(getInputStream()));}@Overridepublic ServletInputStream getInputStream() throws IOException {    final ByteArrayInputStream bais = new ByteArrayInputStream(body);    return new ServletInputStream() {        @Override        public int read() throws IOException {            return bais.read();        }        @Override        public boolean isFinished() {            return false;        }        @Override        public boolean isReady() {            return false;        }        @Override        public void setReadListener(ReadListener readListener) {        }    };}</code></pre><p>}</p><h3 id="新建过滤器"><a href="#新建过滤器" class="headerlink" title="新建过滤器"></a>新建过滤器</h3><p>新建HttpServletRequestReplacedFilter(过滤器)</p><pre><code>import javax.servlet.*;import javax.servlet.annotation.WebFilter;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;@WebFilter(urlPatterns = &quot;/*&quot;, filterName = &quot;channelFilter&quot;)public class HttpServletRequestReplacedFilter implements Filter {    @Override    public void destroy() {    }    @Override    public void doFilter(ServletRequest request, ServletResponse response,                         FilterChain chain) throws IOException, ServletException {        ServletRequest requestWrapper = null;                  if (request instanceof HttpServletRequest) {            requestWrapper = new RequestReaderHttpServletRequestWrapper((HttpServletRequest) request);        }        //获取请求中的流如何，将取出来的字符串，再次转换成流，然后把它放入到新request对象中。        // 在chain.doFiler方法中传递新的request对象        if (requestWrapper != null &amp;&amp; responseWrapper == null){            chain.doFilter(requestWrapper, response);        }    }    @Override    public void init(FilterConfig arg0) throws ServletException {    }}</code></pre><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>如下代码即可在拦截其中获取body且保证了controller中依旧可以再次获取</p><pre><code>HttpUtil.getBodyString(request);</code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Request </tag>
            
            <tag> HttpServletRequestWrapper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC：拦截器的工作流程</title>
      <link href="/2017/05/08/SpringMVC-Interceptor-workflow/"/>
      <url>/2017/05/08/SpringMVC-Interceptor-workflow/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SpringWebMVC的处理器拦截器，类似于Servlet开发中的过滤器Filter，用于处理器进行预处理和后处理。它提供了一种机制可以使开发者可以定义在一个action执行的前后执行的代码，也可以在一个action执行前阻止其执行，同时也提供了一种可以提取action中可重用部分的方式。在AOP（Aspect-Oriented Programming）中拦截器用于在某个方法或字段被访问之前，进行拦截然后在之前或之后加入某些操作。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>1、日志记录，可以记录请求信息的日志，以便进行信息监控、信息统计等。<br>2、权限检查：如登陆检测，进入处理器检测是否登陆，如果没有直接返回到登陆页面。<br>3、性能监控：典型的是慢日志。</p><h2 id="HandlerInterceptor"><a href="#HandlerInterceptor" class="headerlink" title="HandlerInterceptor"></a>HandlerInterceptor</h2><p><strong>拦截器</strong><br>    public interface HandlerInterceptor {</p><pre><code>   /**     * 预处理回调方法，实现处理器的预处理（如检查登陆），第三个参数为响应的处理器，自定义Controller     * 返回值：true表示继续流程（如调用下一个拦截器或处理器）；false表示流程中断（如登录检查失败），不会继续调用其他的拦截器或处理器，此时我们需要通过response来产生响应；   */    boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)            throws Exception;   /**     * 后处理回调方法，实现处理器的后处理（但在渲染视图之前），此时我们可以通过modelAndView（模型和视图对象）对模型数据进行处理或对视图进行处理，modelAndView也可能为null。   */    void postHandle(            HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)            throws Exception;   /**    * 整个请求处理完毕回调方法，即在视图渲染完毕时回调，如性能监控中我们可以在此记录结束时间并输出消耗时间，还可以进行一些资源清理，类似于try-catch-finally中的finally，但仅调用处理器执行链中   */    void afterCompletion(            HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)            throws Exception;}</code></pre><h2 id="HandlerInterceptorAdapter"><a href="#HandlerInterceptorAdapter" class="headerlink" title="HandlerInterceptorAdapter"></a>HandlerInterceptorAdapter</h2><p><strong>拦截器适配器</strong><br>有时候我们可能只需要实现三个回调方法中的某一个，如果实现HandlerInterceptor接口的话，三个方法必须实现，不管你需不需要，此时spring提供了一个HandlerInterceptorAdapter适配器（种适配器设计模式的实现），允许我们只实现需要的回调方法。</p><pre><code>public abstract class HandlerInterceptorAdapter implements AsyncHandlerInterceptor {    /**     * 默认是true     */    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)            throws Exception {        return true;    }    /**     * This implementation is empty.     */    @Override    public void postHandle(            HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)            throws Exception {    }    /**     * This implementation is empty.     */    @Override    public void afterCompletion(            HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)            throws Exception {    }    /**     * 不是HandlerInterceptor的接口实现，是AsyncHandlerInterceptor的，AsyncHandlerInterceptor实现了HandlerInterceptor     */    @Override    public void afterConcurrentHandlingStarted(            HttpServletRequest request, HttpServletResponse response, Object handler)            throws Exception {    }}</code></pre><p>这样在我们业务中比如要记录系统日志，日志肯定是在afterCompletion之后记录的，否则中途失败了，也记录了，那就扯淡了。一定是程序正常跑完后，我们记录下那些对数据库做个增删改的操作日志进数据库。所以我们只需要继承HandlerInterceptorAdapter，并重写afterCompletion一个方法即可，因为preHandle默认是true。</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="/2017/05/08/SpringMVC-Interceptor-workflow/拦截器流程图.png" alt="运行流程图"></p><p>运行流程总结如下：</p><p><strong>1、拦截器执行顺序是按照Spring配置文件中定义的顺序而定的。<br>2、会先按照顺序执行所有拦截器的preHandle方法，一直遇到return false为止，比如第二个preHandle方法是return false，则第三个以及以后所有拦截器都不会执行。若都是return true，则按顺序加载完preHandle方法。<br>3、然后执行主方法（自己的controller接口），若中间抛出异常，则跟return false效果一致，不会继续执行postHandle，只会倒序执行afterCompletion方法。<br>4、在主方法执行完业务逻辑（页面还未渲染数据）时，按倒序执行postHandle方法。若第三个拦截器的preHandle方法return false，则会执行第二个和第一个的postHandle方法和afterCompletion（postHandle都执行完才会执行这个，也就是页面渲染完数据后，执行after进行清理工作）方法。（postHandle和afterCompletion都是倒序执行）</strong></p><h2 id="拦截器Demo"><a href="#拦截器Demo" class="headerlink" title="拦截器Demo"></a>拦截器Demo</h2><h3 id="拦截器1"><a href="#拦截器1" class="headerlink" title="拦截器1"></a>拦截器1</h3><pre><code>import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class SyslogInterceptor implements HandlerInterceptor {    /**     * 预处理回调方法，实现处理器的预处理（如检查登陆），第三个参数为响应的处理器，自定义Controller     * 返回值：true表示继续流程（如调用下一个拦截器或处理器）；false表示流程中断（如登录检查失败），不会继续调用其他的拦截器或处理器，此时我们需要通过response来产生响应；     */    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)            throws Exception {        System.out.println(&quot;==========================================1================================================&quot;);        return true;    }    /**     * 后处理回调方法，实现处理器的后处理（但在渲染视图之前），此时我们可以通过modelAndView（模型和视图对象）对模型数据进行处理或对视图进行处理，modelAndView也可能为null。     */    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,            ModelAndView modelAndView) throws Exception {        System.out.println(&quot;==========================================post1================================================&quot;);    }    /**     * 整个请求处理完毕回调方法，即在视图渲染完毕时回调，如性能监控中我们可以在此记录结束时间并输出消耗时间，还可以进行一些资源清理，类似于try-catch-finally中的finally，但仅调用处理器执行链中     */    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)            throws Exception {        System.out.println(&quot;==========================================after1================================================&quot;);    }}</code></pre><h3 id="拦截器2"><a href="#拦截器2" class="headerlink" title="拦截器2"></a>拦截器2</h3><pre><code>import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class SyslogInterceptor2 implements HandlerInterceptor {    /**     * 预处理回调方法，实现处理器的预处理（如检查登陆），第三个参数为响应的处理器，自定义Controller     * 返回值：true表示继续流程（如调用下一个拦截器或处理器）；false表示流程中断（如登录检查失败），不会继续调用其他的拦截器或处理器，此时我们需要通过response来产生响应；     */    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)            throws Exception {        System.out.println(&quot;==========================================2================================================&quot;);        return true;    }    /**     * 后处理回调方法，实现处理器的后处理（但在渲染视图之前），此时我们可以通过modelAndView（模型和视图对象）对模型数据进行处理或对视图进行处理，modelAndView也可能为null。     */    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,            ModelAndView modelAndView) throws Exception {        System.out.println(&quot;==========================================post2================================================&quot;);    }    /**     * 整个请求处理完毕回调方法，即在视图渲染完毕时回调，如性能监控中我们可以在此记录结束时间并输出消耗时间，还可以进行一些资源清理，类似于try-catch-finally中的finally，但仅调用处理器执行链中     */    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)            throws Exception {        System.out.println(&quot;==========================================after2================================================&quot;);    }}</code></pre><h3 id="拦截器3"><a href="#拦截器3" class="headerlink" title="拦截器3"></a>拦截器3</h3><pre><code>import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public class SyslogInterceptor3 implements HandlerInterceptor {    /**     * 预处理回调方法，实现处理器的预处理（如检查登陆），第三个参数为响应的处理器，自定义Controller     * 返回值：true表示继续流程（如调用下一个拦截器或处理器）；false表示流程中断（如登录检查失败），不会继续调用其他的拦截器或处理器，此时我们需要通过response来产生响应；     */    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)            throws Exception {        System.out.println(&quot;==========================================3================================================&quot;);        return true;    }    /**     * 后处理回调方法，实现处理器的后处理（但在渲染视图之前），此时我们可以通过modelAndView（模型和视图对象）对模型数据进行处理或对视图进行处理，modelAndView也可能为null。     */    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,            ModelAndView modelAndView) throws Exception {        System.out.println(&quot;==========================================post3================================================&quot;);    }    /**     * 整个请求处理完毕回调方法，即在视图渲染完毕时回调，如性能监控中我们可以在此记录结束时间并输出消耗时间，还可以进行一些资源清理，类似于try-catch-finally中的finally，但仅调用处理器执行链中     */    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)            throws Exception {        System.out.println(&quot;==========================================after3================================================&quot;);    }}</code></pre><h3 id="拦截器配置"><a href="#拦截器配置" class="headerlink" title="拦截器配置"></a>拦截器配置</h3><p><code>&lt;mvc:mapping path=&quot;/**&quot;/&gt;</code>需要拦截的路径，这里匹配所有。这里的配置顺序将是拦截器执行顺序。</p><pre><code>&lt;mvc:interceptors&gt;        &lt;mvc:interceptor&gt;            &lt;mvc:mapping path=&quot;/**&quot;/&gt;            &lt;bean class=&quot;com.bshf.recipe.demo.syslog.SyslogInterceptor&quot; /&gt;        &lt;/mvc:interceptor&gt;        &lt;mvc:interceptor&gt;            &lt;mvc:mapping path=&quot;/**&quot;/&gt;            &lt;bean class=&quot;com.bshf.recipe.demo.syslog.SyslogInterceptor2&quot; /&gt;        &lt;/mvc:interceptor&gt;        &lt;mvc:interceptor&gt;            &lt;mvc:mapping path=&quot;/**&quot;/&gt;            &lt;bean class=&quot;com.bshf.recipe.demo.syslog.SyslogInterceptor3&quot; /&gt;        &lt;/mvc:interceptor&gt;&lt;/mvc:interceptors&gt;</code></pre><h3 id="Demo输出结果"><a href="#Demo输出结果" class="headerlink" title="Demo输出结果"></a>Demo输出结果</h3><pre><code>==========================================1==========================================================================================2==========================================================================================3==========================================================================================post3==========================================================================================post2==========================================================================================post1==========================================================================================after3==========================================================================================after2==========================================================================================after1================================================</code></pre><p>从结果可以看出来post和after是倒序的！！！！</p><p>中断流程Demo<br>将SyslogInterceptor3的preHandle方法返回false。其他不变，再看输出结果</p><pre><code>==========================================1==========================================================================================2==========================================================================================3==========================================================================================after2==========================================================================================after1================================================</code></pre><p>发现没有了post，post方法一个都没有输出。不仅如此，你的主程序代码（xxx.controller的一个接口）都不会被执行，所以只要遇到return false，则直接进行after清理工作，post和自己主程序代码都将被略过。</p>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拦截器 </tag>
            
            <tag> HandlerInterceptor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC：拦截器和过滤器的区别</title>
      <link href="/2017/04/28/SpringMVC-The-difference-between-interceptors-and-filters/"/>
      <url>/2017/04/28/SpringMVC-The-difference-between-interceptors-and-filters/</url>
      
        <content type="html"><![CDATA[<p>aaaaaaaaaaaaaa<br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 拦截器 </tag>
            
            <tag> 过滤器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程调试(一)：在IDEA中远程调试Jar包</title>
      <link href="/2017/04/21/remote-debugging-one-remotely-debugging-the-Jar-package-in-IDEA/"/>
      <url>/2017/04/21/remote-debugging-one-remotely-debugging-the-Jar-package-in-IDEA/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>因为现在用Spring Boot 的工程多了起来，有时候用Spring Boot写的小脚本部署在服务器上出现独有的错误（开发环境正常）时，并不是那么好定位，所以用了一下远程调试Jar包，发现意外的好用，所以记录一下过程。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="配置IDEA"><a href="#配置IDEA" class="headerlink" title="配置IDEA"></a>配置IDEA</h3><p>点击<code>+</code> —&gt;选择<code>Remote</code><br><img src="/2017/04/21/remote-debugging-one-remotely-debugging-the-Jar-package-in-IDEA/new-remote.jpg" alt="新建Remote配置"><br>配置远程服务器的ip与端口号，因为我的Jar是在本地启动的，所以是localhost<br><img src="/2017/04/21/remote-debugging-one-remotely-debugging-the-Jar-package-in-IDEA/config.jpg" alt="配置"></p><h3 id="启动Jar"><a href="#启动Jar" class="headerlink" title="启动Jar"></a>启动Jar</h3><p><code>address</code> 是远程服务的端口，也就是刚才配置的8081，<code>xxxxxx.jar</code> Jar包名字</p><pre><code>java -Xdebug -Xrunjdwp:transport=dt_socket,address=8081,server=y,suspend=y -jar xxxxxx.jar</code></pre><p>启动后，会在以下界面卡住，此时正在监听8081端口，等待IDEA启动调试。</p><pre><code>E:\Run&gt;java -Xdebug -Xrunjdwp:transport=dt_socket,address=8081,server=y,suspend=y -jar gateway.jar --spring.profiles.active=proListening for transport dt_socket at address: 8081</code></pre><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p><img src="/2017/04/21/remote-debugging-one-remotely-debugging-the-Jar-package-in-IDEA/start-debug.jpg" alt="启动调试"><br>启动调试后，服务器启动Jar界面会出现 ，项目启动日志，如果没有，说明没有监听到。</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>请求一下接口，发现打的断点生效了。<br><img src="/2017/04/21/remote-debugging-one-remotely-debugging-the-Jar-package-in-IDEA/res.jpg" alt="效果"></p>]]></content>
      
      
      <categories>
          
          <category> 远程调试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Remote </tag>
            
            <tag> IEAD </tag>
            
            <tag> DEBUG </tag>
            
            <tag> Jar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSR搭建属于自己的梯子</title>
      <link href="/2017/04/08/SSR-builds-its-own-ladder/"/>
      <url>/2017/04/08/SSR-builds-its-own-ladder/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SSR梯子切勿用于非法用途，主要是用来学习交流使用。<br>这几天一直有小伙伴问我有没有免费的梯子，我之前一直在用google的蓝灯，但是后来因为国情原因时好时坏的所以决定自己研究一下梯子的搭建。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>SSTAP：链接: <a href="https://pan.baidu.com/s/1tfuR5gsUnmTNxurvn_fFNA" target="_blank" rel="noopener">https://pan.baidu.com/s/1tfuR5gsUnmTNxurvn_fFNA</a>  密码:67zb<br>Windows客户端代理工具：链接: <a href="https://pan.baidu.com/s/1pqtpMnrHRk89lWDe-IOmFQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1pqtpMnrHRk89lWDe-IOmFQ</a> 密码:fqkt<br>服务器一台：推荐使用vultr地址：<a href="http://www.vuvps.com/vultr.php" target="_blank" rel="noopener">http://www.vuvps.com/vultr.php</a><br>最后一个xShell远程终端，用来连接你的服务器，链接: <a href="https://pan.baidu.com/s/1ab2GYTH7YyLCl0qfAxp5Hg" target="_blank" rel="noopener">https://pan.baidu.com/s/1ab2GYTH7YyLCl0qfAxp5Hg</a>  密码:meeu ，只需要用一次就行了，就是SSR搭建后之后，你就可以把它卸载了。<br>准备支付宝。</p><h3 id="服务器选购"><a href="#服务器选购" class="headerlink" title="服务器选购"></a>服务器选购</h3><p>1.进入到Vultr首页，填写你的邮箱地址和登陆密码（密码需要数字+大写+小写字母），然后点击“CreateAccount”注册账号，注册成功之后,Service一栏里面，需要验证一下自己的邮箱。<br><img src="/2017/04/08/SSR-builds-its-own-ladder/1.png" alt=""></p><p>2.购买服务器需要最低充值10美金，使用支付宝付款，服务器按小时计费。</p><p>充值流程：【Billing】-【Alipay】-【Pay withAlipay】-【完成支付】<br><img src="/2017/04/08/SSR-builds-its-own-ladder/2.png" alt=""></p><p>3.支付完成后，接着选择服务器，本着最便宜的原则来购买（一般纽约为2.5美元一个月）</p><p>【Server Location】<br><img src="/2017/04/08/SSR-builds-its-own-ladder/3.png" alt=""><br>【ServerType】 选择Centos 6x64（默认是Centos 7，如果没选6也没关系）<br><img src="/2017/04/08/SSR-builds-its-own-ladder/4.png" alt=""><br>【ServerSize】反正选最便宜的。<br><img src="/2017/04/08/SSR-builds-its-own-ladder/5.png" alt=""><br>剩下的默认，最后点击右下角“DeployNow”完成购买。</p><p>PS:主机创建的时候需要等两分钟再执行下一步SSR部署</p><h3 id="SSR部署"><a href="#SSR部署" class="headerlink" title="SSR部署"></a>SSR部署</h3><p>1.下载xShell,上面有链接，vps信息在你刚刚购买的面板里面可以看到。</p><p>打开xshell，新建链接，填写主机ip，端口号，钩选重新链接，然后点连接。<br><img src="/2017/04/08/SSR-builds-its-own-ladder/6.png" alt=""><br>弹出“SSR安全警告”，选择“接受并保存”，用户名root（记得钩选记住用户名），密码在你的vultr里面去看，<br><img src="/2017/04/08/SSR-builds-its-own-ladder/7.png" alt=""><br>出现下图（root@vultr）代表成功<br><img src="/2017/04/08/SSR-builds-its-own-ladder/8.png" alt=""></p><h3 id="SSR安装"><a href="#SSR安装" class="headerlink" title="SSR安装"></a>SSR安装</h3><p>执行以下命令（密码建议修改，port可以默认）</p><pre><code>wget --no-check-certificate https://freed.ga/github/shadowsocksR.sh; bash shadowsocksR.sh</code></pre><p><img src="/2017/04/08/SSR-builds-its-own-ladder/9.png" alt=""><br><img src="/2017/04/08/SSR-builds-its-own-ladder/10.png" alt=""></p><p>出现提示“Shadowsocksr安装完成”就可以继续下一步，锐速安装（图片保存一下）。</p><h3 id="锐速安装"><a href="#锐速安装" class="headerlink" title="锐速安装"></a>锐速安装</h3><p>1.执行更换内核脚本</p><pre><code>wget -N --no-check-certificate https://freed.ga/kernel/ruisu.sh&amp;&amp; bash ruisu.sh</code></pre><p>执行之后，脚本会自动断开服务器，假如你钩选了记住用户名和密码，它会自动重连，如果没钩选也没关系，Xshel左上角【File】-【重新连接】，然后执行锐速安装脚本。</p><p>2.锐速安装脚本</p><pre><code>wget -N --no-check-certificatehttps://github.com/91yun/serverspeeder/raw/master/serverspeeder.sh&amp;&amp; bash serverspeeder.sh</code></pre><p>备用脚本(一般是centos7系统需要用到，6系统不需要执行这个)</p><pre><code>wget -N --no-check-certificatehttps://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh&amp;&amp; bash serverspeeder-all.sh</code></pre><p>如果出现版本不匹配，会出现一个选项，直接选个1就行了，直至出现下图，恭喜你，拥有了一个属于自己的SSR梯子。<br><img src="/2017/04/08/SSR-builds-its-own-ladder/11.png" alt=""></p><h3 id="SStap配置"><a href="#SStap配置" class="headerlink" title="SStap配置"></a>SStap配置</h3><p>下载SStap,安装并填写SSR信息，下载链接在上面。</p><p>你只需要填写服务器IP、端口号、密码，其他信息照着下图抄就行了。<br><img src="/2017/04/08/SSR-builds-its-own-ladder/12.png" alt=""><br>最后给个Google一张<br><img src="/2017/04/08/SSR-builds-its-own-ladder/13.png" alt=""><br>SSR各平台下载地址=》 <a href="http://www.vuvps.com/?p=112" target="_blank" rel="noopener">极光SSR各平台客户端操作软件</a></p>]]></content>
      
      
      <categories>
          
          <category> VPN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssr </tag>
            
            <tag> vps </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏辅助（四）：基于Java的内存修改器（CE）</title>
      <link href="/2017/03/21/game-assist-four-Java-based-memory-modifier/"/>
      <url>/2017/03/21/game-assist-four-Java-based-memory-modifier/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>记得初中玩游戏作弊就是用的<code>八门神器</code>，大学玩天天跑酷用<code>烧饼修改器</code>，毕业玩荒野之息用的是<code>CE</code>，这些工具说白的就是内存修改器，通过内存中的值不断的变化，不断的搜索，不断的定位到内存中的值对应的游戏属性，通过修改它达到作弊的效果。前面几篇博客主要是讲外设的模拟，窗口的绑定，都是属于辅助的范围，本文讲的内存修改器应该算是达到了外挂的范畴。</p><h2 id="嗯？"><a href="#嗯？" class="headerlink" title="嗯？"></a>嗯？</h2><p>先挖个坑，有时间再填。</p>]]></content>
      
      
      <categories>
          
          <category> 游戏辅助 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CE </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏辅助（三）：基于C绑定句柄</title>
      <link href="/2017/03/20/game-assist-Based-on-C-binding-handle/"/>
      <url>/2017/03/20/game-assist-Based-on-C-binding-handle/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面几篇介绍了用Java调用第三方插件去进行驱动级别的外设模拟，至于基于Java的以图找图，以色定位就不多说了，Robot就可以满足，本文讲的是通过Java操作句柄（实际上还是通过C），Java本身的定位并不适合写辅助，这篇博客只是娱乐一下，研究为主。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p><strong>首先导入xnx3.jar</strong>,以寻仙窗口句柄为例。</p><pre><code>import com.xnx3.microsoft.Com;import com.xnx3.microsoft.Mouse;import com.xnx3.microsoft.Press;import com.xnx3.microsoft.Sleep;import com.xnx3.microsoft.Window;    /**     * 寻仙游戏模拟操作     */    public class XunXianTest {        public static void main(String[] args) {            //所有辅助的，模拟进行某种操作(键盘、鼠标、..)要先创建此类,在new Com()时，会自动检测运行环境是否符合、部署、注册Dll            Com com=new Com();            //返回创建Com()的结果，如果自检过程中发现异常，创建Com失败，则调用此会返回false            if(!com.isCreateSuccess()){                return;            }            //创建window窗口操作对象            Window window=new Window(com.getActiveXComponent());            //查找当前运行的程序中标题包含“寻仙 -”三个字的窗口句柄，            int hwnd=window.findWindow(0, null, &quot;寻仙 -&quot;);            //如果找到了寻仙这个游戏窗口了，确定是有这个程序存在，那么可以继续以下操作            if(hwnd&gt;0){                        /*                         * 对找到的寻仙这个窗口进行绑定，绑定完毕后，那么所有的鼠标、键盘、图色等操作就是都是对这个窗口（寻仙游戏）操作的，完全后台的~~，窗口可以被遮挡、点击葫芦隐藏，但是不可以最小化                         * 寻仙的就是这种模式绑定，只需要传入窗口句柄就可                         * 其他游戏的请自行组合测试绑定模式,使用： com.bind(hwnd, display, mouse, key, mode) 自行测试                         */                if(com.bind(hwnd)){                    /**                     * 绑定完毕，对游戏的操作全在这里                     */                    Press press=new Press(com.getActiveXComponent());        //创建模拟按键对象                    Mouse mouse=new Mouse(com.getActiveXComponent());        //创建模拟鼠标对象                    Sleep sleep=new Sleep();                                                        //创建延迟等待对象                    /***************以下来模拟按wasd四个方向键转三圈，然后结束软件退出运行***************/                    int i=0;                    while(i++&lt;3){                        press.keyPressTime(Press.W, 300);        //模拟按下W键0.3秒钟                        press.keyPressTime(Press.A, 300);                        press.keyPressTime(Press.S, 300);                        press.keyPressTime(Press.D, 300);                    }                    System.out.println(&quot;执行完毕&quot;);                }else{                    System.out.println(&quot;窗口绑定失败&quot;);                }            }else{                System.out.println(&quot;没有发现寻仙窗口&quot;);            }            //用完后一定要记得释放，释放内存，无论是否绑定了窗口、绑定是否成功，都可以直接调用此函数释放            com.unbind();        }    }</code></pre>]]></content>
      
      
      <categories>
          
          <category> 游戏辅助 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xnx3 </tag>
            
            <tag> 句柄 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏辅助（二）：基于C的驱动级外设模拟</title>
      <link href="/2017/03/11/game-assist-C-based-driver-level-peripheral-simulation/"/>
      <url>/2017/03/11/game-assist-C-based-driver-level-peripheral-simulation/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文主要对外设的输入层次、模拟层次的介绍，以及通过基于C的dll插件实现自动执行外设的输入，达到解放双手、提高（外设）输入速度、频率或者高操作的效果。</p><h3 id="输入层次介绍"><a href="#输入层次介绍" class="headerlink" title="输入层次介绍"></a>输入层次介绍</h3><p>1、当按下键后，键盘或鼠标产生扫描码（不同芯片的键盘产生扫描码不一样）。</p><p>2、扫描码被送给相应硬件的驱动，驱动将扫描码转换成虚拟码（就是以  vk_  打头的，其实就是byte大小的数了，不同语言的虚拟码不全一样）。</p><p>3、虚拟码插入消息队列，等待被传给相应程序。然后就是程序处理的事了。</p><h3 id="模拟层次介绍"><a href="#模拟层次介绍" class="headerlink" title="模拟层次介绍"></a>模拟层次介绍</h3><p>1、局部模拟：用程序生成虚拟码，将虚拟码直接发给程序。</p><p>其一：Java自带的Robot就是这么干的。处理普通程序还有效，游戏就不用想了。</p><p>其二：jna的自带platform中，User32类 的sendMessage、postMessage方法。处理普通程序还有效，游戏就不用想了。</p><p>2、全局模拟：将扫描码、虚拟码插入到消息队列，然后就不管了。</p><p>其一：jna的自带platform中，User32类 的keybd_event方法。处理普通程序还有效，游戏就不用想了。</p><p>其二：键盘钩子。没试过，C语言还停留在大学水平，听说改键是这么做的。</p><p>3、驱动级模拟：用程序模仿键盘端口给系统发送扫描码。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>驱动级模拟，本来准备用jna + winio试一下的。后来发现网上不少说winio太出名了，游戏会针对性防范，再加上winio64位版还要签名，所以没试，然后因为种种原因DM插件也没能使用。</p><p>后来万能的吧友提供了一个AHK的脚本可以使用，破解后发现底层还是调用的DLL。于是有了本文，用Java调用DDxoft实现驱动级模拟。</p><h3 id="加载Dll"><a href="#加载Dll" class="headerlink" title="加载Dll"></a>加载Dll</h3><pre><code>import com.sun.jna.Library;import com.sun.jna.Native;public interface DdXoft extends Library {    DdXoft INSTANCE = (DdXoft) Native.loadLibrary(UnifyEnum.DDXOFT64.v(), DdXoft.class);    //64位JAVA调用*64.dll, 32位调用*32.dll 。与系统本身位数无关。、    int DD_mov(int x, int y);//绝对移动    int DD_movR(int dx, int dy);//相对移动    int DD_btn(int btn);//鼠标    int DD_whl(int whl); //滑轮    int DD_key(int ddcode, int flag);//键盘    int DD_str(String s);//字符串}</code></pre><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><p>位置判断还是用的Robot</p><pre><code>/** * 判断某点颜色是否相同 相同则按下 * * @return */public static boolean existPressKey(Robot robot, Entry entry, int ddCode) {    if (isEquals(robot, entry)) {        return pressKey(robot, entry, ddCode);    }    return false;}</code></pre><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>直接调用DDxoft,一些底层的东西还是C靠谱</p><pre><code>/** * 直接按下某键 */public static boolean pressKey(Robot robot, Entry entry, int ddCode) {    //robot.keyPress(keyCode);    DdXoft.INSTANCE.DD_key(ddCode, 1);    robot.delay(entry.press);    //robot.keyRelease(keyCode);    DdXoft.INSTANCE.DD_key(ddCode, 2);    robot.delay(entry.release);    System.out.println(&quot;{&quot; + entry.skill + &quot;}&quot; +            SkillEnum.PRESS.v() + &quot;:&quot; + entry.press + SkillEnum.MS.v() +            SkillEnum.RELEASE.v() + &quot;:&quot; + entry.release + SkillEnum.MS.v());    return true;}</code></pre><p>完整的程序 在我的github上，界面使用JavaFx，<a href="https://github.com/yibierusi/blade-and-bns-macro" target="_blank" rel="noopener">剑灵灵剑卡刀脚本</a></p>]]></content>
      
      
      <categories>
          
          <category> 游戏辅助 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ddxoft </tag>
            
            <tag> dll </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游戏辅助（一）：基于Java的软件级外设模拟</title>
      <link href="/2017/03/05/game-assist-one-Java-based-software-level-peripheral-simulation/"/>
      <url>/2017/03/05/game-assist-one-Java-based-software-level-peripheral-simulation/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在打副本的时候发现长时间大量重复的操作，非常影响游戏体验，并且达不到卡刀效果，无法有效的解除技能衔接之间的前后摇，使输出无法最大化，于是决定写一个脚本优化这一现象。前后试了很多方法，比如按键精灵，易语言，AHK，不是刚一登陆游戏就被检测出来了，就是一登陆游戏按键事件就失效了。</p><p>本文介绍的是Java的Robot 相比之前Java版本的按键模拟更加强大,但仍然属于软件级模拟，部分游戏仍然会被检测出来，下一篇博客会介绍驱动级的键盘模拟。</p><p>官方JavaDocsApi: j<a href="https://docs.oracle.com/javase/8/docs/api/java/awt/Robot.html" target="_blank" rel="noopener">ava.awt.Robot</a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Robot，机器人。此类用于为测试自动化、自运行演示程序和其他需要控制鼠标和键盘的应用程序生成本机系统输入事件。Robot 的主要目的是便于 Java 平台实现自动测试。</p><p>Robot 可以模拟鼠标和键盘的输入，相当于 Java 版的按键精灵。</p><h3 id="Robot-构造方法"><a href="#Robot-构造方法" class="headerlink" title="Robot 构造方法"></a>Robot 构造方法</h3><pre><code>// 在基本屏幕坐标系中构造一个 Robot 对象, 如果平台不支持 Robot, 将抛出异常Robot()// 为给定屏幕设备创建一个 Robot（用于同时使用多个显示设备的情况）Robot(GraphicsDevice screen)</code></pre><h3 id="模拟鼠标"><a href="#模拟鼠标" class="headerlink" title="模拟鼠标"></a>模拟鼠标</h3><pre><code>// 将鼠标指针移动到指定屏幕坐标void mouseMove(int x, int y)/** * 按下/释放一个或多个鼠标按钮, 参数说明: *     buttons: 鼠标按钮掩码, 一个或多个以下标志的组合: *     InputEvent.BUTTON1_MASK 鼠标左键 *     InputEvent.BUTTON2_MASK 鼠标中键 *     InputEvent.BUTTON3_MASK 鼠标右键 */    void mousePress(int buttons)    void mouseRelease(int buttons)    // 在配有滚轮的鼠标上旋转滚轮    void mouseWheel(int wheelAmt)</code></pre><h3 id="模拟键盘"><a href="#模拟键盘" class="headerlink" title="模拟键盘"></a>模拟键盘</h3><pre><code>/** * 按下/释放键盘按键, 参数说明: *     keycode: 键盘键值常量, 定义在 KeyEvent.VK_XXX 中 */    void keyPress(int keycode)    void keyRelease(int keycode)</code></pre><h3 id="屏幕相关"><a href="#屏幕相关" class="headerlink" title="屏幕相关"></a>屏幕相关</h3><pre><code>// 获取指定屏幕坐标处的像素颜色Color getPixelColor(int x, int y)// 截屏, 截取指定的矩形区域BufferedImage createScreenCapture(Rectangle screenRect)</code></pre><h3 id="控制类"><a href="#控制类" class="headerlink" title="控制类"></a>控制类</h3><pre><code>// 睡眠指定的时间, 相当于 Thread.sleep(long ms)void delay(int ms)// 在处理完当前事件队列中的所有事件之前, 一直等待void waitForIdle()// 设置此 Robot 在生成一个事件后是否自动调用 waitForIdle()// 设置为 true, 表示添加的事件逐个按顺序执行（执行完一个再执行下一个）void setAutoWaitForIdle(boolean isOn)boolean isAutoWaitForIdle()// 设置此 Robot 每在生成一个事件后自动睡眠的毫秒数void setAutoDelay(int ms)int getAutoDelay()</code></pre><h3 id="模拟鼠标事件"><a href="#模拟鼠标事件" class="headerlink" title="模拟鼠标事件"></a>模拟鼠标事件</h3><pre><code>package com.xiets.robot;import java.awt.*;import java.awt.event.InputEvent;public class Main {    public static void main(String[] args) throws AWTException {        // 创建 Robot 实例        Robot robot = new Robot();        // 执行完一个事件后再执行下一个        robot.setAutoWaitForIdle(true);        // 移动鼠标到指定屏幕坐标        robot.mouseMove(100, 100);        // 按下鼠标左键        robot.mousePress(InputEvent.BUTTON1_MASK);        // 延时100毫秒        robot.delay(100);        // 释放鼠标左键（按下后必须要释放, 一次点击操作包含了按下和释放）        robot.mouseRelease(InputEvent.BUTTON1_MASK);    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 游戏辅助 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
            <tag> Robot </tag>
            
            <tag> JavaFX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo系列（七）：提交搜索引擎</title>
      <link href="/2017/02/28/hexo-seven-submit-search-engine/"/>
      <url>/2017/02/28/hexo-seven-submit-search-engine/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>到了这一步，就博客的搭建基本已经完成了，细心的人就会发现一个问题，搭建的博客在<code>baidu</code>和<code>google</code>上搜索不到，这个问题真的是忍不了啊，完全不能愉快的装逼了，本文教大家做一下简单的SEO。</p><h2 id="查看收录情况"><a href="#查看收录情况" class="headerlink" title="查看收录情况"></a>查看收录情况</h2><hr><p>在站点前面输入<code>site:</code>可以查看搜索引擎对该站点的收录情况。<br><img src="/2017/02/28/hexo-seven-submit-search-engine/baidu_site.png" alt="百度收录情况"><br><img src="/2017/02/28/hexo-seven-submit-search-engine/google_site.png" alt="谷歌收录情况"><br>从图中可以看出<code>baidu</code>和<code>google</code>对我的网站没有收录任何一个路径。</p><h2 id="验证网站"><a href="#验证网站" class="headerlink" title="验证网站"></a>验证网站</h2><p>首先要确认网站是你本人所有，可以通过一下方式验证</p><blockquote><p><a href="https://ziyuan.baidu.com/linksubmit/url" target="_blank" rel="noopener">百度搜索引擎入口</a><br><a href="https://ziyuan.baidu.com/college/courseinfo?id=267&amp;page=1#h2_article_title3" target="_blank" rel="noopener">为什么要验证网站</a>　　<br>站长平台推荐站长添加主站（您网站的链接也许会使用www 和非 www 两种网址，建议添加用户能够真实访问到的网址），添加并验证后，可证明您是该域名的拥有者，可以快捷批量添加子站点，查看所有子站数据，无需再一一验证您的子站点。<br><a href="https://ziyuan.baidu.com/college/courseinfo?id=267&amp;page=1#h2_article_title13" target="_blank" rel="noopener">如何验证网站</a><br>首先如果您的网站已使用了百度统计，您可以使用统计账号登录平台，或者绑定站长平台与百度统计账号，站长平台支持您批量导入百度统计中的站点，您不需要再对网站进行验证。<br>百度站长平台为未使用百度统计的站点提供三种验证方式：文件验证、html标签验证、CNAME验证。<br>　　1.文件验证：您需要下载验证文件，将文件上传至您的服务器，放置于域名根目录下。<br>　　2.html标签验证：将html标签添加至网站首页html代码的标签与标签之间。<br>　　3.CNAME验证：您需要登录域名提供商或托管服务提供商的网站，添加新的DNS记录。<br>验证完成后，我们将会认为您是网站的拥有者。为使您的网站一直保持验证通过的状态，请保留验证的文件、html标签或CNAME记录，我们会去定期检查验证记录。<br><img src="/2017/02/28/hexo-seven-submit-search-engine/google验证" alt="验证"></p></blockquote><p>不管谷歌还是百度都要先添加域名，然后验证网站，这里统一都使用文件验证，就是下载对应的html文件，放到域名根目录下，也就收博客根目录下的source下面，当执行<code>hexo g</code>后会自动打包到<code>public</code>下面<br><img src="/2017/02/28/hexo-seven-submit-search-engine/验证文件位置.jpg" alt="验证文件位置"></p><p>然后部署到服务器,输入地址：<a href="https://zhouhy.top/baidu_verify_zn1b0ZTy80.html">https://zhouhy.top/baidu_verify_zn1b0ZTy80.html</a> 能访问到就可以点验证按钮。<br><img src="/2017/02/28/hexo-seven-submit-search-engine/验证页面.jpg" alt="验证页面"></p><h2 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h2><blockquote><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。</p></blockquote><p>我们要先安装一下，打开hexo博客根目录，分别用下面两个命令来安装针对谷歌和百度的插件</p><pre><code>npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save</code></pre><p>在博客目录的_config.yml中添加如下代码</p><pre><code># 自动生成sitemapsitemap:path: sitemap.xml</code></pre><p>编译你的博客</p><pre><code>hexo g</code></pre><p>如果你在你的博客根目录的public下面发现生成了<code>sitemap.xml</code>就表示成功了。<br><strong>注意：</strong>github禁止了百度爬虫，提交了百度也是不会访问的。</p><p>部署后访问<br><a href="http://zhouhy.top/sitemap.xml">http://zhouhy.top/sitemap.xml</a><br>效果如下图：<br><img src="/2017/02/28/hexo-seven-submit-search-engine/site_page.jpg" alt="sitemap.xml"><br>为了本地md文件容易阅读，我的md文件名字为中文，所以我的路径中也出现了中文（路径最好不要出现中文），类似：<code>http://yibierusi.github.io/2017/02/28/Hexo%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E6%8F%90%E4%BA%A4%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</code></p><h2 id="网站提交方式"><a href="#网站提交方式" class="headerlink" title="网站提交方式"></a>网站提交方式</h2><blockquote><p>如何选择链接提交方式<br>1、主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。<br>2、自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。<br>3、sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。<br>4、手动提交：一次性提交链接给百度，可以使用此种方式。</p></blockquote><p>一般主动提交比手动提交效果好。</p><p>从效率上来说：</p><blockquote><p>主动推送 &gt; 自动推送 &gt; sitemap</p></blockquote><blockquote><p>为什么自动推送可以更快的将页面推送给百度搜索？基于自动推送的实现原理问题，当新页面每次被浏览时，页面URL会自动推送给百度，无需站长汇总URL再进行主动推送操作。<br>借助用户的浏览行为来触发推送动作，省去了站长人工操作的时间。<br>自动推送和链接提交有什么区别？已经在使用链接提交的网站还需要再部署自动推送代码吗？<br>二者之间互不冲突，互为补充。已经使用主动推送的站点，依然可以部署自动推送的JS代码，二者一起使用。<br>什么样的网站更适合使用自动推送？自动推送由于实现便捷和后续维护成本低的特点，适合技术能力相对薄弱，无能力支持全天候实时主动推送程序的站长。<br>站长仅需一次部署自动推送JS代码的操作，就可以实现新页面被浏览即推送的效果，低成本实现链接自动提交。<br>同时，我们也支持主动推送和自动推送代码配合使用，二者互不影响。</p></blockquote><h2 id="谷歌收录"><a href="#谷歌收录" class="headerlink" title="谷歌收录"></a>谷歌收录</h2><h3 id="sitemap"><a href="#sitemap" class="headerlink" title="sitemap"></a>sitemap</h3><p>谷歌操作比较简单，就是向<a href="https://www.google.com/webmasters/tools" target="_blank" rel="noopener">Google站长工具</a>提交<code>sitemap</code></p><p>登录Google账号，添加了站点验证通过后，选择站点，<code>抓取</code>—&gt;<code>站点地图</code>—&gt;<code>添加/测试站点地图</code>，提交自己的<code>sitemap</code>就可以了<br>谷歌收录网站的效率非常高，提交上去一天左右就能搜索到了。</p><h2 id="百度收录"><a href="#百度收录" class="headerlink" title="百度收录"></a>百度收录</h2><p>谷歌很好搞定，百度就很麻烦了，流程复杂，耗时长，收录效果差。<br>正常情况，是要等百度爬虫来爬到网站，才会被收录。<br>但是github屏蔽了百度爬虫目前，所以不能被动的等着百度来爬取，我们自己把网站提交给百度。<br>这就要使用到<a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度站长平台</a></p><h3 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h3><p>自动推送很简单，就是在你代码里面嵌入自动推送JS代码，在页面被访问时，页面URL将立即被推送给百度<br>代码如下：</p><pre><code>&lt;script&gt;    (function(){        var bp = document.createElement(&apos;script&apos;);        bp.src = &apos;//push.zhanzhang.baidu.com/push.js&apos;;        var s = document.getElementsByTagName(&quot;script&quot;)[0];        s.parentNode.insertBefore(bp, s);    })();&lt;/script&gt;</code></pre><p>我是放在\themes\yelee\layout_partial\after_footer.ejs中，添加到下面就行。</p><h3 id="sitemap-1"><a href="#sitemap-1" class="headerlink" title="sitemap"></a>sitemap</h3><p><code>sitemap</code>的提交流程跟上面<code>google</code>一样，直接提交<a href="http://zhouhy.top/sitemap.xml">http://zhouhy.top/sitemap.xml</a> 就行，注意sitemap中的路径，如果是github的路径百度是无法爬取的，需要改为zhouhy.top,这个就会自动跳转到coding的路径。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> baidu </tag>
            
            <tag> google </tag>
            
            <tag> seo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo系列（六）：添加评论功能</title>
      <link href="/2017/02/22/hexo-six-add-comment-function/"/>
      <url>/2017/02/22/hexo-six-add-comment-function/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>博客评论功能的重要性不言而喻，拥有了评论功能就相当于拥有了一批志同道合的良师益友，可以指出文章中的错误得到提高，可以讨论加深理解与认同。</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>yelee</code>主题目前支持 Disqus，多说 及 友言评论，把 <code>#on: true</code> 改为 <code>on: true</code> 即启用对应评论系统<br>但是多说已经关闭，友言是基于Web的，Disqus在手机上展示不出来，发现还需要翻墙，那实在对用户太不友好了，于是我选择使用<a href="https://www.livere.com/" target="_blank" rel="noopener">来必力</a>评论系统。<br><img src="/2017/02/22/hexo-six-add-comment-function/来必力官网首页.jpg" alt="来必力官网首页"></p><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>注册后可以查看详细的评论数据分析。<br><img src="/2017/02/22/hexo-six-add-comment-function/数据分析.jpg" alt="数据分析"></p><h3 id="获取data-uid"><a href="#获取data-uid" class="headerlink" title="获取data-uid"></a>获取data-uid</h3><p>代码管理，我们需要用到这个<code>data-uid</code><br><img src="/2017/02/22/hexo-six-add-comment-function/代码.jpg" alt="代码"></p><h3 id="添加data-uid"><a href="#添加data-uid" class="headerlink" title="添加data-uid"></a>添加data-uid</h3><p>打开<code>theme/yelee/_config.yml</code>，添加配置信息</p><pre><code>livere:    on: true    livere_uid: Your uid</code></pre><h3 id="创建ejs文件"><a href="#创建ejs文件" class="headerlink" title="创建ejs文件"></a>创建ejs文件</h3><p>在<code>themes/yelee/layout/_partial/comments</code>文件夹创建<code>livere.ejs</code>文件，将代码拷贝进去，将你注册后的代码拷贝到<code>&lt;section&gt;&lt;/section</code>&gt;里面。</p><pre><code>&lt;section class=&quot;livere&quot; id=&quot;comments&quot;&gt;    &lt;!-- 来必力City版安装代码 --&gt;    &lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;Your uid&quot;&gt;    &lt;script type=&quot;text/javascript&quot;&gt;   (function(d, s) {       var j, e = d.getElementsByTagName(s)[0];       if (typeof LivereTower === &apos;function&apos;) { return; }       j = d.createElement(s);       j.src = &apos;https://cdn-city.livere.com/js/embed.dist.js&apos;;       j.async = true;       e.parentNode.insertBefore(j, e);       })(document, &apos;script&apos;);    &lt;/script&gt;    &lt;noscript&gt; 为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;    &lt;/div&gt;    &lt;!-- City版安装代码已完成 --&gt;&lt;/section&gt;</code></pre><h3 id="追加逻辑判断"><a href="#追加逻辑判断" class="headerlink" title="追加逻辑判断"></a>追加逻辑判断</h3><p>打开<code>themes/yelee/layout/_partial/article.ejs</code>，在下图位置插入下面的逻辑判断代码</p><pre><code>else if (theme.livere.on) { %&gt;    &lt;%- partial(&apos;comments/livere&apos;) %&gt;&lt;% } </code></pre><p><img src="/2017/02/22/hexo-six-add-comment-function/插入位置.jpg" alt="插入位置"></p><p>到这一步就完成了，集成评论。<br><img src="/2017/02/22/hexo-six-add-comment-function/评论.jpg" alt="评论"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> comment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo系列（五）：站内搜索与文章统计</title>
      <link href="/2017/02/16/hexo-five-site-search-and-article-statistics/"/>
      <url>/2017/02/16/hexo-five-site-search-and-article-statistics/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本来想用百度站内搜索，但是没成功，然后改用swiftype，但是swiftype需要注册账号并且只能用30天所以也放弃了，本文就简单的介绍一些yelee自带的站内搜索以及文章字数与阅读时长统计。</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><p>使用搜索需先安装对应插件，用于生成索引数据</p><blockquote><p>插件主页: <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a></p></blockquote><p><code>#on: true</code> 改为 <code>on: true</code>即为启用搜索</p><pre><code>search:   on: true  onload: false</code></pre><p><code>onload: true</code> : 索引数据 <code>search.xml</code> 随页面一起加载 [效率优先]</p><p><code>onload: false</code> : 当激活搜索框时再下载索引数据 [按需加载]<br><img src="/2017/02/16/hexo-five-site-search-and-article-statistics/站内搜索.jpg" alt="本地搜索效果"></p><h3 id="文章统计"><a href="#文章统计" class="headerlink" title="文章统计"></a>文章统计</h3><p><code>next</code>主题是已经集成这个功能的，但是<code>yelee</code>就需要我们自己配置了，可以看下官网对<a href="https://www.npmjs.com/package/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>的介绍</p><h4 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h4><blockquote><p>安装hexo-wordcount</p></blockquote><pre><code>npm i --save hexo-wordcount</code></pre><h4 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h4><blockquote><p>在yelee/layout/_partial/post下创建word.ejs文件：</p></blockquote><pre><code>&lt;div style=&quot;margin-top:10px;&quot;&gt;    &lt;span class=&quot;post-time&quot;&gt;      &lt;span class=&quot;post-meta-item-icon&quot;&gt;        &lt;i class=&quot;fa fa-keyboard-o&quot;&gt;&lt;/i&gt;        &lt;span class=&quot;post-meta-item-text&quot;&gt;  字数统计: &lt;/span&gt;        &lt;span class=&quot;post-count&quot;&gt;&lt;%= wordcount(post.content) %&gt;字&lt;/span&gt;      &lt;/span&gt;    &lt;/span&gt;    &lt;span class=&quot;post-time&quot;&gt;      &amp;nbsp; | &amp;nbsp;      &lt;span class=&quot;post-meta-item-icon&quot;&gt;        &lt;i class=&quot;fa fa-hourglass-half&quot;&gt;&lt;/i&gt;        &lt;span class=&quot;post-meta-item-text&quot;&gt;  阅读时长: &lt;/span&gt;        &lt;span class=&quot;post-count&quot;&gt;&lt;%= min2read(post.content) %&gt;分&lt;/span&gt;      &lt;/span&gt;    &lt;/span&gt;&lt;/div&gt;</code></pre><blockquote><p>然后添加逻辑判断</p></blockquote><p>打开 themes/yelee/layout/_partial/article.ejs</p><pre><code>&lt;% if(theme.word_count &amp;&amp; !post.no_word_count){ %&gt;    &lt;%- partial(&apos;post/word&apos;) %&gt;&lt;% } %&gt;</code></pre><p>在下图位置添加<br><img src="/2017/02/16/hexo-five-site-search-and-article-statistics/插入位置.jpg" alt="插入位置"><br><code>word_count</code> 是主题<code>_config.yml</code>中配置是否需要添加字数统计功能控制 flag，</p><p><code>no_word_count</code>即配置文章是否需要显示字数统计的功能。</p><pre><code># 是否开启字数统计#不需要使用，直接设置值为false，或注释掉word_count: trueno_word_count: true</code></pre><p>如果统计与标签重合或者位置不对，可以在<code>yelee/layout/_partial/post</code> 下面的的<code>word.ejs</code>与<code>tag.ejs</code> 设置<code>margin</code>属性</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo系列（四）：主题下载以及配置</title>
      <link href="/2017/02/09/hexo-four-yelee-theme-download-and-config/"/>
      <url>/2017/02/09/hexo-four-yelee-theme-download-and-config/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>之前搭建的博客基本功能已经实现了，新搭建的博客的默认主题都是<code>landscape</code>，略显简单，我的主题是基于<code>yelee</code>风格的，作者也是在<code>hexo-theme-yilia</code>的基础上进行的修改。具体的使用可以参考<a href="http://moxfive.coding.me/yelee/" target="_blank" rel="noopener">官方API</a></p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>CD到 <code>themes</code> 路径下执行clone命令下载主题</p><pre><code>git clone https://github.com/MOxFIVE/hexo-theme-yelee.git</code></pre><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>打开项目目录下的<code>_config.yml</code>文件</p><p>主题更改，注意的是在<code>yelee</code>前面有个空格，主题<code>yml</code>格式可以自行百度</p><pre><code>theme: yelee</code></pre><h3 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h3><pre><code>cd themes/yeleegit pull</code></pre><blockquote><p><strong>注意</strong>：请先备份你的<code>_config.yml</code>文件后再升级</p></blockquote><p>更新好后，本地启动起来效果</p><pre><code>hexo server -g  #生成加预览</code></pre><p><img src="/2017/02/09/hexo-four-yelee-theme-download-and-config/1.jpg" alt="主题预览效果"></p><h3 id="主题的-config-yml配置"><a href="#主题的-config-yml配置" class="headerlink" title="主题的_config.yml配置"></a>主题的_config.yml配置</h3><p>配置文件<code>_config.yml</code>位于主题根目录下,下面贴出我的配置</p><pre><code># Theme Version | 当前版本Yelee: &quot;3.5&quot;# &gt;&gt;&gt; Basic Setup | 基础设置 &lt;&lt;&lt;# Header | 主菜单## About Page: `hexo new page about`## Tags Cloud Page: `hexo new page tags`menu:  主页: /  所有文章: /archives/  #随笔: /tags/随笔  标签云: /tags/  关于我: /about/# Link to your avatar | 填写头像地址avatar: /img/avatar.png# Small icon of Your site | 站点小图标地址favicon: /favicon.png# Internationalization | 主题语言## Change Language in SITE&apos;s _config.yml | 在站点配置中切换语言## https://hexo.io/docs/internationalization.html## Available Languages: en, zh-Hans, zh-Hant-TW, zh-Hant-HK# Subdirectory | 子目录## If your site&apos; url is &apos;http://yoursite.com/blog&apos;, set root_url as &apos;/blog/&apos;## 网站若存放在子目录，请按上面格式填写## https://hexo.io/docs/configuration.html#URLroot_url: # Year of Site Creation | 网站成立年份since: 2016# Social info. Bar | 社交信息展示## Keep &quot;mailto:&quot; in Email | 设置 Email 时保留 &quot;mailto:&quot;## Encrypt email 加密邮件地址 http://ctrlq.org/encode/## RSS requires a plugin to take effect | 使用 RSS 需先安装对应插件## https://github.com/hexojs/hexo-generator-feed#社交subnav:  Email: &quot;mailto:zhouhy1205@aliyun.com&quot;  #新浪微博: &quot;sina weibo&quot;  GitHub: &quot;https://github.com/yibierusi&quot;  #V2EX: &quot;#&quot;  RSS: &quot;/atom.xml&quot;  #知乎: &quot;zhihu&quot;  #豆瓣: &quot;douban&quot;  #简书: &quot;jianshu&quot;  #SegmentFault: &quot;&quot;  #博客园: &quot;cnblogs&quot;  #CSDN: &quot;&quot;  #Coding: &quot;&quot;  网易云音乐: &quot;https://music.163.com/#/user/home?id=110939435&quot;  #虾米音乐: &quot;xiami&quot;  #bilibili: &quot;&quot;  #AcFun: &quot;&quot;  #niconico: &quot;&quot;  #Quora: &quot;&quot;  #Facebook: &quot;#&quot;  #Google: &quot;#&quot;  #Twitter: &quot;#&quot;  #LinkedIn: &quot;#&quot;  #QQ: &quot;4670049&quot;  #微信: &quot;zy4670049&quot;  #PayPal: &quot;#&quot;  #StackOverflow: &quot;#&quot;  #CodePen: &quot;&quot;  #Plunker: &quot;&quot;  #Instagram: &quot;#&quot;  #LOFTER: &quot;&quot;  #Flickr: &quot;#&quot;  #reddit: &quot;&quot;  #Medium: &quot;&quot;  #TiddlyWiki: &quot;&quot;  #Tumblr: &quot;&quot;  #_500px: &quot;&quot;# &gt;&gt;&gt; Conments 评论系统 &lt;&lt;&lt;# Chose ONE as your comment system and keep others disable.# 选一个作为网站评论系统，其他保持禁用。preload_comment: true## false: 当点击评论条等区域时再加载评论模块## false: load comment&apos;s section until u click/hover on the bar/iconshow_count: true## 是否在主页文章标题旁显示评论数（多说、Disqus）## Add comment count after article title#来必力    livere:  on: true  livere_uid: MTAyMC80MjA0MC8xODU4Nw==disqus:   #on: true  shortname:   # https://help.disqus.com/customer/en/portal/articles/466208-what-s-a-shortname-  # It is unnecessary to enable disqus here if   # you have set &quot;disqus_shortname&quot; in your site&apos;s &quot;_config.yml&quot; duoshuo:   #on: true  domain:   # 是否开启多说评论，http://duoshuo.com/create-site/  # 使用上面网址登陆你的多说，然后创建站点，在 domain 中填入你设定的域名前半部分  # http://&lt;要填的部分&gt;.duoshuo.com (domain只填上&lt;&gt;里的内容，不要填整个网址)youyan:  #on: true  id:   # 是否开启友言评论，http://www.uyan.cc/index.php  # id 中填写你的友言用户数字ID，注册后进入后台管理即可查看  # 友言服务在 Web 环境下运行，普通本地环境无法查看，请部署后在线上测试。# &gt;&gt;&gt; Style Customisation 样式自定义 &lt;&lt;&lt;# Background | 背景## &quot;5&quot;: show images form bg-1.jpg to bg-5.jpg in `/yelee/source/background/`## &quot;5&quot;: 显示`/yelee/source/background/`文件夹中 bg-1.jpg 到 bg-5.jpg 这5张图片## &quot;0&quot;: white-gray background | 淳朴灰白背景background_image: 5# Base Font Size | 字号调节base_font_size: 16  #px, 16 - 24## General Color Scheme | 主题配色方案 ## 可用值 Value: yiliacolor_scheme: yiliahighlight_style:  #on: true  inline_code: 1  # Value: 0 - 9 可选  code_block: 1  # Value: 0 - 4   # Set inline_code to style highlight text  # Chose a highlight theme for code block  # 通过 inline_code 切换内置文本高亮样式  # 通过 code_block 切换内置代码高亮配色主题blockquote_style:  #on: true  blockquote: 1  # Value: 0 - 7 可选  # 自定义文章「引用部分」的样式# Headings Style | 标题风格## 0-Yelee, 1-Yilia, 2-GitHubheading_style: 0 # Value: 0 - 2## List style type (ul) | 无序列表项标记样式list_style: 0  # value: 0 - 12 可选# 左边栏宽度 pxleft_col_width: 300# Copyright info. of post | 文末版权信息copyright: true# Table of contents | 文章目录toc:  on: true  list_number: true # 目录序号  max_depth: 3  # 1 - 6 (h1-h6) 目录最大级数  nowrap: false # Keep title on same line | 目录标题不换行# 是否开启主页及加载头像时的动画效果# Animation in Homepage and Loading avataranimate: true# Load jQuery UI to style tooltips# 工具提示框样式美化jquery_ui: true# Max width of right cloumn | 限制右侧内容的宽带 limit_article_width:   on: false  max_width: 60 # em# &gt;&gt;&gt; Small features | 小功能设置 &lt;&lt;&lt;# 是否开启边栏多标签切换# Birdhouse button in left columntagcloud: true# Blogroll, Link exchange | 友情链接friends:  Hexo: https://hexo.io  GitHub: https://pages.github.com/  MOxFIVE: http://moxfive.xyz/#friends: false#是否开启“关于我”。aboutme: 专注于前端#aboutme: false# Open link in a new tab | 是否在新窗口打开链接## `global` 0: Set separately, 1: Open all in new 2: Open all in current## `global` 0: 分开设置, 1: 全部在新标签打开, 2: 全部在&quot;当前&quot;标签打开open_in_new:  global: 0 # 0-2  title: false # article title in homepage 主页文章标题  post: false # link within post/page 正文中的链接  tags: false # 标签  categories: false # 分类  article_nav: false # 导航  archives: true # 归档  mini_archives: true # 迷你归档  menu: false # 边栏菜单  friends: true  # 友情链接  socail: true # 社交图标# Customize feed link 自定义订阅地址rss: /atom.xml# Update Reminder for IE6/7/8# 针对 IE6/7/8 的升级浏览器提示ie_updater:  on: true  link: //outdatedbrowser.com/  ## http://browsehappy.com/  ## http://outdatedbrowser.com/# Tab Title Change | 标签页标题切换tab_title_change:   on: false  left_tab_title: &apos;(つェ⊂) 我藏好了哦~ &apos;  return_tab_title: &apos;(*´∇｀*) 被你发现啦~ &apos;# &gt;&gt;&gt; Vendors | 第三方工具 &amp; 服务 &lt;&lt;&lt;# Local Site Search | 本地站内搜索## Insatall below plugin to take effect | 使用搜索需先安装对应插件## https://github.com/PaicHyperionDev/hexo-generator-searchsearch:   #on: true  onload: true  ## true: get search.xml file when the page has loaded  ## false: get the file when search box gets focus# images viewer | 图片浏览器## http://www.fancyapps.com/fancybox/fancybox: true# Display Math(LaTeX, MathML...) | 数学公式支持## https://www.mathjax.org/mathjax: false# Socail Share | 是否开启分享share:   on: true  baidu: true  addthis: false  addthis_pubid: &quot;ra-56ff76c972fc0cf9&quot;  ## Go to www.addthis.com/dashboard to get your pubid (in src of Code)  ## and customize AddThis share buttons# 百度、谷歌站长验证。填写 HTML 标签 content# Site Verification for Google and Baidu. HTML label content.baidu_site: google_site: # Fill in Google Analytics tracking ID, #e.g. UA-XXXXX-Xgoogle_analytics: # 百度统计 http://sitecenter.baidu.com/sc-web/# 查看代码，填入 //hm.baidu.com/hm.js? 之后的内容baidu_tongji: # 不蒜子网站计数设置# http://ibruce.info/2015/04/04/busuanzi/visit_counter:  on: true  site_visit: true  page_visit: true# GitHub Repo Widget# https://github.com/hustcc/GitHub-Repo-Widget.jsgithub_widget: false# Progress Bar | 页面加载进度条# Demo: http://github.hubspot.com/pace/docs/welcome/# type: barber-shop|big-counter|bounce|center-atom|center-circle|#       center-radar|center-simple|corner-indicator|flash|flat-top|#       loading-bar|mac-osx|minimal# color: black|blue|green|orange|pink|purple|red|silver|white|yellow|progressBar:  on: true  type: &quot;minimal&quot;  # Keep Quotes | 保留引号避免出错  color: blueCDN:  jquery: //cdn.bootcss.com/jquery/2.2.4/jquery.min.js  require: //cdn.bootcss.com/require.js/2.2.0/require.min.js  fontawesome: //cdn.bootcss.com/font-awesome/4.6.3/css/font-awesome.min.css  fancybox_js: //cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.js  fancybox_css: //cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css  animate_css: //cdn.bootcss.com/animate.css/3.5.1/animate.min.css  jquery_ui_js: //cdn.bootcss.com/jqueryui/1.10.4/jquery-ui.min.js  jquery_ui_css: //cdn.bootcss.com/jqueryui/1.10.4/css/jquery-ui.min.css  pace_js: //cdn.bootcss.com/pace/1.0.2/pace.min.js  clipboard: //cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js  mathjax: //cdn.bootcss.com/mathjax/2.6.1/MathJax.js  scrollreveal: //cdn.bootcss.com/scrollReveal.js/3.1.4/scrollreveal.min.js</code></pre><h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><blockquote><p>草稿相当于很多博客都有的“私密文章”功能。</p></blockquote><p>会在source/_drafts目录下生成一个<code>new-draft.md</code>文件。但是这个文件不被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到<code>_drafts</code>目录之中。</p><pre><code>$ hexo new draft &quot;new draft&quot;</code></pre><p>如果你希望强行预览草稿，更改配置文件：</p><pre><code>render_drafts: true</code></pre><p>或者，如下方式启动server：</p><pre><code>$ hexo server --drafts</code></pre><p>下面这条命令可以把草稿变成文章，或者页面：</p><pre><code>$ hexo publish [layout] &lt;filename&gt;</code></pre><h3 id="md模板"><a href="#md模板" class="headerlink" title="md模板"></a>md模板</h3><blockquote><p>新建md文章时候会有默认的模板。修改默认的模板</p></blockquote><p>其中<code>layout</code>是可选参数，默认值为<code>post</code>。有哪些<code>layout</code>呢，请到<code>scaffolds</code>目录下查看，这些文件名称就是<code>layout</code>名称。当然你可以添加自己的<code>layout</code>，方法就是添加一个文件即可，同时你也可以编辑现有的<code>layout</code>，比如post的<code>layout</code>默认是<code>hexo\scaffolds\post.md</code></p><pre><code>title: { { title } }date: { { date } }tags:</code></pre><p>修改为：</p><pre><code>title: json520博客001 #文章标题date: 2015-02-05 12:47:44 #文章生成时间categories: 必须写 #文章分类目录 可以省略tags: 必须写 #文章标签 可以省略description: 问题描述必须写 #你对本页的描述 可以省略</code></pre><p>这样每次新建都不用手动添加属性了</p><h3 id="标签云"><a href="#标签云" class="headerlink" title="标签云"></a>标签云</h3><p>menu 默认没有启用 /tags 和 /categories页面，如果需要使用 Hexo 命令新建一个名为 <code>tags</code>，<code>categories</code> 的页面即可<code>hexo new page tags</code>，<code>hexo new page categories</code> 因为主题中已经内置了这两个页面的模板，所以他们会被正确的解析出来。</p><h3 id="个人头像"><a href="#个人头像" class="headerlink" title="个人头像"></a>个人头像</h3><p>默认头像存储于 <code>yelee/source/img/avatar.png</code></p><p>配置中对应填写 <code>/img/avatar.png</code>，可替换图片或指定新地址</p><p><code>themes/yelee/_config.yml</code> 背景参数:</p><pre><code>avatar: /img/avatar.png</code></pre><h3 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h3><p>目前主题可使用两种方式在首页显示文章摘要而不是全文。</p><p><strong>方法一</strong>: <code>&lt;!-- more --&gt;</code><br>注：之前最好不要有空格等字符；</p><pre><code>title: Hello Worlddate: 2017-12-03 00:00:00---&lt;Excerpt in index | 首页摘要&gt; &lt;!-- more --&gt;&lt;The rest of contents | 余下全文&gt;</code></pre><p><strong>方法二</strong>: <code>description</code> in <strong>Front-matter</strong></p><pre><code>title: Hello Worlddate: 2015-12-03 00:00:00description: &quot;Welcome to Hexo! This is your very first post.&quot;---&lt;Contents&gt;</code></pre><p>通过 <code>description</code> 添加的摘要只能为纯文本；</p><p><code>description</code> 中的内容加引号，可以避免一些程序错误，例如当内容里包含英文冒号时。</p><h3 id="网页背景图"><a href="#网页背景图" class="headerlink" title="网页背景图"></a>网页背景图</h3><p>背景图文件所在路径:</p><pre><code>/yelee/source/background/</code></pre><p><code>themes/yelee/_config.yml</code> 背景参数:</p><pre><code>background_image: 5</code></pre><p>默认值为5，可按需修改</p><p>“5”: 设置/yelee/source/background/文件夹中 bg-1.jpg 到 bg-5.jpg 这5张图片为背景</p><p>“0”: 取消网页背景图，使用淳朴的灰白主题</p><h3 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h3><p>通过 <code>code_block</code> 切换内置代码高亮配色主题，目前额外提供 4 种搭配</p><pre><code>## 移除 `#` 后自定义样式生效highlight_style:  #on: true  code_block: 1  # Value: 0 - 4</code></pre><h3 id="文本高亮"><a href="#文本高亮" class="headerlink" title="文本高亮"></a>文本高亮</h3><p>通过 <code>inline_code</code> 切换内置文本高亮样式，目前额外提供 9 种样式</p><pre><code>## 移除 `#` 后自定义样式生效highlight_style:  #on: true  inline_code: 1  # Value: 0 - 9</code></pre><p>部分样式图示：<br><img src="/2017/02/09/hexo-four-yelee-theme-download-and-config/2.jpg" alt="文本高亮"></p><h3 id="引用区"><a href="#引用区" class="headerlink" title="引用区"></a>引用区</h3><p>可自定义文章「引用部分」的样式，目前额外提供 7 种样式</p><pre><code>blockquote_style:  on: true  blockquote: 1  # Value: 0 - 7 可选</code></pre><p>部分样式图示：<br><img src="/2017/02/09/hexo-four-yelee-theme-download-and-config/5.jpg" alt="引用"></p><h3 id="404-页面"><a href="#404-页面" class="headerlink" title="404 页面"></a>404 页面</h3><p>使用 Hexo 命令新建一个名为 404 的页面</p><pre><code>hexo new page 404</code></pre><p>/source/404/index.md 文件中添加 <code>permalink: /404</code></p><pre><code>title: 404 Not Found：该页无法显示toc: falsecomments: falsepermalink: /404---</code></pre><p> 404 页面显示效果可以在本地查看 <a href="http://localhost:4000/404.html" target="_blank" rel="noopener">http://localhost:4000/404.html</a></p><p> 无效网址自动跳转 404 页面则必须在线上测试</p><p> <a href="http://moxfive.xyz/2015/10/16/hexo-404-page/" target="_blank" rel="noopener">在 Hexo 中创建匹配主题的404页面</a><br><img src="/2017/02/09/hexo-four-yelee-theme-download-and-config/3.jpg" alt="404"></p><h3 id="左边栏鸟屋"><a href="#左边栏鸟屋" class="headerlink" title="左边栏鸟屋"></a>左边栏鸟屋</h3><p><img src="/2017/02/09/hexo-four-yelee-theme-download-and-config/4.jpg" alt="边栏鸟屋"><br>关闭鸟屋</p><pre><code># 边栏多标签切换tagcloud: false</code></pre><h3 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h3><pre><code>## 编辑友链friends:  Hexo: https://hexo.io  GitHub: https://pages.github.com/  MOxFIVE: http://moxfive.xyz/## 关闭友链friends: false</code></pre><h3 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h3><pre><code># 是否开启“关于我”。aboutme: 专注于前端# 关闭“关于我”aboutme: false</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yelee </tag>
            
            <tag> themes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo系列（三）：上传资源到博客</title>
      <link href="/2017/02/01/hexo-three-uploading-resources-to-blog/"/>
      <url>/2017/02/01/hexo-three-uploading-resources-to-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>用Hexo+Github搭建博客的初衷就是不想去购买服务器，备案，搭建服务等，所以也不存在文件上传的问题。那么博客中有时需要用到的图片，这里的图片就是静态图片。</p><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>cd到博客根目录下 查看<code>_config.yml</code>文件 查找 <code>post_asset_folder</code> 字段，将post_asset_folder 设置为true ， <code>post_asset_folder:true</code>。</p><p>当设置 <code>post_asset_folder</code> 参数为<code>true</code>，在建立文件时，Hexo 会自动建立一个与文章同名的文件夹，可以把与该文章相关的所有资源都放到此文件夹内，这样就可以更方便的使用资源。</p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>到博客的根目录下执行 <code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code> 命令来进行插件的安装。</p><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><p>然后创建一文章 <code>hexo new &quot;test&quot;</code> 然后查看博客的 ../source/_posts 目录下的文件，会看到存在一个test 文件夹 和 test.md 文件<br><img src="/2017/02/01/hexo-three-uploading-resources-to-blog/1.jpg" alt=""></p><h3 id="添加资源"><a href="#添加资源" class="headerlink" title="添加资源"></a>添加资源</h3><p>将所需要的图片资源放到test 文件夹 内 目录结构如下：<br><img src="/2017/02/01/hexo-three-uploading-resources-to-blog/2.jpg" alt=""></p><h3 id="使用资源"><a href="#使用资源" class="headerlink" title="使用资源"></a>使用资源</h3><p>书写文章使用test文件内 的图片<br><img src="/2017/02/01/hexo-three-uploading-resources-to-blog/3.jpg" alt=""></p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>1.使用<code>hexo s</code> 命令运行本地博客即可看到效果</p><p>2.使用<code>hexo clean</code> <code>，hexo g</code> ，<code>hexo d</code>将本地博客推送到远程，即可看到文章中的图片</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> static pages </tag>
            
            <tag> Resources </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo系列（二）：远程仓库托管博客</title>
      <link href="/2017/01/12/hexo-two-remote-repository-hosting-blog/"/>
      <url>/2017/01/12/hexo-two-remote-repository-hosting-blog/</url>
      
        <content type="html"><![CDATA[<!-- # Hexo：Github上发布博客（二）--><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇博客介绍了怎么搭建本地的静态博客，本文内容是将本地的博客通过GitHub Pages发布，使外网可以访问,coding上同理，本文只介绍Github。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>发布前的准备：</p><ul><li>注册Github账号</li></ul><h3 id="创建Github-仓库"><a href="#创建Github-仓库" class="headerlink" title="创建Github 仓库"></a>创建Github 仓库</h3><p>注册完成之后,点击头像左侧的<code>+</code>号, —&gt;<code>New repository</code>，创建新仓库<br><img src="/2017/01/12/hexo-two-remote-repository-hosting-blog/1.jpg" alt=""></p><p>因为创建的是个人网站，所以仓库的名称需要安装GitHub个人网站项目的规定来写。<br>规则就是：</p><pre><code>username.github.io</code></pre><p>比如我的GitHub用户名是<code>yibierusi</code>，那我就要填写 <code>yibierusi.github.io</code>。然后选择<code>Public</code>模式，接着点击<code>创建仓库</code>按钮,因为我的已经创建了，所以这里会提示已经存在。<br><img src="/2017/01/12/hexo-two-remote-repository-hosting-blog/2.jpg" alt=""></p><h3 id="推送部署"><a href="#推送部署" class="headerlink" title="推送部署"></a>推送部署</h3><p>在根目录下的<code>_config.yml</code>中添加git信息，之后在cmd下通过 <code>hexo d</code> 一键推送本地代码并部署。<br>单个仓库配置：</p><pre><code>deploy:  type: git  repository: git@github.com:yibierusi/yibierusi.github.io.git  branch: master</code></pre><p>多个仓库配置：</p><pre><code>deploy:  type: git  repo:      github: git@github.com:yibierusi/yibierusi.github.io.git,master      coding: git@git.coding.net:zhouhy1205/blog.git,master</code></pre><h3 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h3><p>代码推送成功后，进入新仓库，点击<code>Settings</code>，找到<code>GitHub Pages</code> 设置主题，并且绑定自定义域名<br><img src="/2017/01/12/hexo-two-remote-repository-hosting-blog/3.jpg" alt=""><br>第一个红框是选择分支<br>第二个红框是选择主题<br>第三个红框是自定义域名，没有就访问<code>username.github.io</code>，如果有域名需要在域名供应上处解析，并设置第三个红框，否则404，我用的是阿里云的域名。解析配置如下图：<br><img src="/2017/01/12/hexo-two-remote-repository-hosting-blog/4.jpg" alt=""></p><p>绑定自定义域名后会生成一个<code>CNAME</code>文件，文件内容就是刚刚绑定的域名<code>zhouhy.top</code>。到了这一步，我们已经完成了个人博客的创建，稍等一两分钟就可以通过域名访问自己的博客了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文只介绍了<code>github</code>托管，但是最好在<code>coding</code>上同时托管一份代码，步骤同<code>github</code>一样，因为后面会涉及到百度收录网站的问题，<code>github</code>是禁止百度爬取的，所以需要走<code>coding</code>的路线。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo系列（一）：个人博客搭建</title>
      <link href="/2017/01/08/hexo-one-blog-building/"/>
      <url>/2017/01/08/hexo-one-blog-building/</url>
      
        <content type="html"><![CDATA[<!-- # Hexo：个人博客搭建（一）--><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大学的时候就有写技术博客的习惯，那时在CSDN。毕业后比较忙，没时间去审词酌句写一篇完整的博客，大部分心得体会都写在有道云笔记中。但记笔记的效果是完全不能跟写博客相比的。一直想写一个自己的个人博客项目，但是没找到满意的前段模板也不想写大量的CSS，再加上备案也麻烦，一直搁浅到现在。无意间发现Hexo这个优秀的静态博客框架，所以写个博客记录一下搭建的过程，也给想搭建Hexo博客的朋友多一点参考。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>操作系统：Windwos 10</p><p>需要安装的软件：Node.js。用来创建hexo博客框架的，我当前安装版本为node-v5.6.0-x64。</p><p>Node.js的安装配置教程参照：<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在CMD下，利用 npm 命令即可安装。</p><p>输入安装hexo命令：</p><pre><code>npm install -g hexo</code></pre><p>或者</p><pre><code>npm install hexo-cli -g</code></pre><p>安装完成后，在你想要搭建的路径下（如D:\hexo），执行以下指令(在D:\hexo下调用CMD，或者CMD下cd到D:\hexo)，Hexo 即会自动在目标文件夹建立网站所需要的所有文件<br><img src="/2017/01/08/hexo-one-blog-building/1.jpg" alt=""></p><pre><code>hexo init</code></pre><p>安装所需依赖包：</p><pre><code>npm install</code></pre><p>安装后之后执行以下命令，#后为注释，不用输入</p><pre><code>hexo g #用于生成静态文件hexo s #用于启动服务器，主要用来本地预览</code></pre><p>此时访问路径<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> ，就可以看到一个搭建完成的hexo博客了，当前博客为本地预览版，外网不能访问。</p><h3 id="Hexo常用的命令"><a href="#Hexo常用的命令" class="headerlink" title="Hexo常用的命令"></a>Hexo常用的命令</h3><p>介绍几个hexo常用的命令,通过<code>hexo n</code>生成md（生成的md文件位置D:\hexo\source_posts\）。</p><p>然后通过Markdown编辑器（这里推荐Markdownpad2编辑器）可以对博客进行编写，编写之后通过<code>hexo g</code>命令生成静态文件。</p><p>执行<code>hexo s</code>用于启动服务器，主要用来本地预览。</p><p>预览没问题之后通过<code>hexo d</code>将本地文件发布到你的github或者coding上。</p><h4 id="命令缩写"><a href="#命令缩写" class="headerlink" title="命令缩写"></a>命令缩写</h4><pre><code>hexo g #完整命令为hexo generate,用于生成静态文件hexo s #完整命令为hexo server,用于启动服务器，主要用来本地预览hexo d #完整命令为hexo deploy,用于将本地文件发布到github或者coding上hexo n #完整命令为hexo new,用于新建一篇文章</code></pre><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><pre><code>hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #将.deploy目录部署到GitHub</code></pre><h4 id="复合命令"><a href="#复合命令" class="headerlink" title="复合命令"></a>复合命令</h4><pre><code>hexo deploy -ghexo server -g</code></pre><ol start="6"><li>常用复合命令：<br>hexo deploy -g<br>hexo server -g</li></ol><h3 id="hexo文目录"><a href="#hexo文目录" class="headerlink" title="hexo文目录"></a>hexo文目录</h3><p>_<strong>config.yml</strong>:网站的 配置 信息，您可以在此配置大部分的参数。</p><p><strong>package.json</strong>:应用程序的信息。</p><p><strong>scaffolds</strong>:模版文件夹。当您新建文章时，Hexo会根据scaffold 来建立文件。</p><p><strong>source</strong>:资源文件夹是存放用户资源的地方。除posts文件夹之外，开头命名为(下划线)的文件/文件夹和隐藏的文件将会被忽略。Markdown和HTML文件会被解析并放到public文件夹，而其他文件会被拷贝过去。</p><p><strong>themes</strong>:主题 文件夹。Hexo会根据主题来生成静态页面。</p><h3 id="hexo的-config-yml配置"><a href="#hexo的-config-yml配置" class="headerlink" title="hexo的_config.yml配置"></a>hexo的_config.yml配置</h3><pre><code># Hexo Configuration# Docs: https://hexo.io/docs/configuration.html# Source: https://github.com/hexojs/hexo/# Site  网站title: zhouhy                                                              #网站标题subtitle: 勤学如春起之苗，不见其增，日有所长；辍学如磨刀之石，不见其损，日有所亏。  #网站副标题description: description                                                   #网站描述keywords:author: zhouhy                                                             #名字language: zh_CN                                                            #网站使用的语言timezone:                                                                  #网站时区。Hexo 默认使用您电脑的时区# URL 网址## 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，则请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。url: http://zhouhy.toproot: /permalink: :year/:month/:day/:title/permalink_defaults:# Directory 目录配置source_dir: source          #源文件夹，这个文件夹用来存放内容。public_dir: public         #公共文件夹，这个文件夹用于存放生成的站点文件。tag_dir: tags              #标签文件夹archive_dir: archives     #归档文件夹category_dir: categories #分类文件夹code_dir: downloads/code #nclude code 文件夹i18n_dir: :lang              #国际化（i18n）文件夹skip_render:              #跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。# Writing 文章new_post_name: :title.md # 新建文章默认文件名default_layout: post     # 默认布局titlecase: false          # Transform title into titlecaseexternal_link: true      # 在新标签中打开一个外部链接，默认为truefilename_case: 0         #转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。render_drafts: false       #是否渲染_drafts目录下的文章，默认为falsepost_asset_folder: false #启动 Asset 文件夹relative_link: false     #把链接改为与根目录的相对位址，默认falsefuture: true             #显示未来的文章，默认falsehighlight:                 #代码块的设置  enable: true  line_number: true  auto_detect: false  tab_replace:# Category &amp; Tag 分类和标签的设置default_category: uncategorized        #默认分类category_map:                        #分类别名tag_map:                            #标签别名# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Home page setting# path: Root path for your blogs index page. (default = &apos;&apos;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator:  path: &apos;&apos;  per_page: 10        order_by: -date# Pagination## Set per_page to 0 to disable paginationper_page: 10            #每页显示的文章量 (0 = 关闭分页功能)pagination_dir: page    #分页目录# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: landscape        #主题（皮肤）# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo:         #github: git@github.com:yibierusi/zhou.github.io.git,master        coding: git@git.coding.net:zhouhy1205/blog.git,master</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
